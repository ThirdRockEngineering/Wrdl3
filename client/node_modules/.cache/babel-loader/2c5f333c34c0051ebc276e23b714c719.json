{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar normaliseInput = require('ipfs-core-utils/pins/normalise-input');\n\nvar utils = require('../../utils.js');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar errCode = require('err-code');\n\nvar pinTypes = require('ipfs-repo/pin-types');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nfunction toPin(type, cid, metadata) {\n  const output = {\n    type,\n    cid\n  };\n\n  if (metadata) {\n    output.metadata = metadata;\n  }\n\n  return output;\n}\n\nfunction createLs(_ref) {\n  let {\n    repo,\n    codecs\n  } = _ref;\n\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let type = pinTypes.PinTypes.all;\n\n    if (options.type) {\n      type = options.type;\n\n      if (!Object.keys(pinTypes.PinTypes).includes(type)) {\n        throw errCode__default[\"default\"](new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');\n      }\n    }\n\n    if (options.paths) {\n      let matched = false;\n\n      for await (const {\n        path\n      } of normaliseInput.normaliseInput(options.paths)) {\n        const {\n          cid\n        } = await utils.resolvePath(repo, codecs, path);\n        const {\n          reason,\n          pinned,\n          parent,\n          metadata\n        } = await repo.pins.isPinnedWithType(cid, type);\n\n        if (!pinned) {\n          throw errCode__default[\"default\"](new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED');\n        }\n\n        switch (reason) {\n          case pinTypes.PinTypes.direct:\n          case pinTypes.PinTypes.recursive:\n            matched = true;\n            yield toPin(reason, cid, metadata);\n            break;\n\n          default:\n            matched = true;\n            yield toPin(`${pinTypes.PinTypes.indirect} through ${parent}`, cid, metadata);\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found');\n      }\n\n      return;\n    }\n\n    if (type === pinTypes.PinTypes.recursive || type === pinTypes.PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.recursiveKeys()) {\n        yield toPin(pinTypes.PinTypes.recursive, cid, metadata);\n      }\n    }\n\n    if (type === pinTypes.PinTypes.indirect || type === pinTypes.PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(pinTypes.PinTypes.indirect, cid);\n      }\n    }\n\n    if (type === pinTypes.PinTypes.direct || type === pinTypes.PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.directKeys()) {\n        yield toPin(pinTypes.PinTypes.direct, cid, metadata);\n      }\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(ls);\n}\n\nexports.createLs = createLs;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/pin/ls.js"],"names":["Object","defineProperty","exports","value","normaliseInput","require","utils","withTimeoutOption","errCode","pinTypes","_interopDefaultLegacy","e","errCode__default","toPin","type","cid","metadata","output","createLs","repo","codecs","ls","options","PinTypes","all","keys","includes","Error","paths","matched","path","resolvePath","reason","pinned","parent","pins","isPinnedWithType","direct","recursive","indirect","recursiveKeys","indirectKeys","directKeys"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar normaliseInput = require('ipfs-core-utils/pins/normalise-input');\nvar utils = require('../../utils.js');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar errCode = require('err-code');\nvar pinTypes = require('ipfs-repo/pin-types');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nfunction toPin(type, cid, metadata) {\n  const output = {\n    type,\n    cid\n  };\n  if (metadata) {\n    output.metadata = metadata;\n  }\n  return output;\n}\nfunction createLs({repo, codecs}) {\n  async function* ls(options = {}) {\n    let type = pinTypes.PinTypes.all;\n    if (options.type) {\n      type = options.type;\n      if (!Object.keys(pinTypes.PinTypes).includes(type)) {\n        throw errCode__default[\"default\"](new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');\n      }\n    }\n    if (options.paths) {\n      let matched = false;\n      for await (const {path} of normaliseInput.normaliseInput(options.paths)) {\n        const {cid} = await utils.resolvePath(repo, codecs, path);\n        const {reason, pinned, parent, metadata} = await repo.pins.isPinnedWithType(cid, type);\n        if (!pinned) {\n          throw errCode__default[\"default\"](new Error(`path '${ path }' is not pinned`), 'ERR_NOT_PINNED');\n        }\n        switch (reason) {\n        case pinTypes.PinTypes.direct:\n        case pinTypes.PinTypes.recursive:\n          matched = true;\n          yield toPin(reason, cid, metadata);\n          break;\n        default:\n          matched = true;\n          yield toPin(`${ pinTypes.PinTypes.indirect } through ${ parent }`, cid, metadata);\n        }\n      }\n      if (!matched) {\n        throw new Error('No match found');\n      }\n      return;\n    }\n    if (type === pinTypes.PinTypes.recursive || type === pinTypes.PinTypes.all) {\n      for await (const {cid, metadata} of repo.pins.recursiveKeys()) {\n        yield toPin(pinTypes.PinTypes.recursive, cid, metadata);\n      }\n    }\n    if (type === pinTypes.PinTypes.indirect || type === pinTypes.PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(pinTypes.PinTypes.indirect, cid);\n      }\n    }\n    if (type === pinTypes.PinTypes.direct || type === pinTypes.PinTypes.all) {\n      for await (const {cid, metadata} of repo.pins.directKeys()) {\n        yield toPin(pinTypes.PinTypes.direct, cid, metadata);\n      }\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(ls);\n}\n\nexports.createLs = createLs;\n"]},"metadata":{},"sourceType":"script"}