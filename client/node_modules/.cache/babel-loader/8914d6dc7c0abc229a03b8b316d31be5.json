{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decryptStream = exports.encryptStream = void 0;\n\nconst constants_1 = require(\"./constants\"); // Returns generator that encrypts payload from the user\n\n\nfunction encryptStream(handshake) {\n  return async function* (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += constants_1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + constants_1.NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n\n        if (end > chunk.length) {\n          end = chunk.length;\n        }\n\n        const data = handshake.encrypt(chunk.slice(i, end), handshake.session);\n        yield data;\n      }\n    }\n  };\n}\n\nexports.encryptStream = encryptStream; // Decrypt received payload to the user\n\nfunction decryptStream(handshake) {\n  return async function* (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += constants_1.NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + constants_1.NOISE_MSG_MAX_LENGTH_BYTES;\n\n        if (end > chunk.length) {\n          end = chunk.length;\n        }\n\n        const {\n          plaintext: decrypted,\n          valid\n        } = await handshake.decrypt(chunk.slice(i, end), handshake.session);\n\n        if (!valid) {\n          throw new Error('Failed to validate decrypted chunk');\n        }\n\n        yield decrypted;\n      }\n    }\n  };\n}\n\nexports.decryptStream = decryptStream;","map":{"version":3,"mappings":";;;;;;;AACA,2C,CAMA;;;AACA,SAAgBA,aAAhB,CAA+BC,SAA/B,EAAoD;AAClD,SAAO,iBAAkBC,MAAlB,EAAwB;AAC7B,eAAW,MAAMC,KAAjB,IAA0BD,MAA1B,EAAkC;AAChC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,IAAIE,kDAAvC,EAA+E;AAC7E,YAAIC,GAAG,GAAGH,CAAC,GAAGE,kDAAd;;AACA,YAAIC,GAAG,GAAGJ,KAAK,CAACE,MAAhB,EAAwB;AACtBE,aAAG,GAAGJ,KAAK,CAACE,MAAZ;AACD;;AAED,cAAMG,IAAI,GAAGP,SAAS,CAACQ,OAAV,CAAkBN,KAAK,CAACO,KAAN,CAAYN,CAAZ,EAAeG,GAAf,CAAlB,EAAuCN,SAAS,CAACU,OAAjD,CAAb;AACA,cAAMH,IAAN;AACD;AACF;AACF,GAZD;AAaD;;AAdDI,sC,CAgBA;;AACA,SAAgBC,aAAhB,CAA+BZ,SAA/B,EAAoD;AAClD,SAAO,iBAAkBC,MAAlB,EAAwB;AAC7B,eAAW,MAAMC,KAAjB,IAA0BD,MAA1B,EAAkC;AAChC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,IAAIE,sCAAvC,EAAmE;AACjE,YAAIC,GAAG,GAAGH,CAAC,GAAGE,sCAAd;;AACA,YAAIC,GAAG,GAAGJ,KAAK,CAACE,MAAhB,EAAwB;AACtBE,aAAG,GAAGJ,KAAK,CAACE,MAAZ;AACD;;AAED,cAAM;AAAES,mBAAS,EAAEC,SAAb;AAAwBC;AAAxB,YAAkC,MAAMf,SAAS,CAACgB,OAAV,CAAkBd,KAAK,CAACO,KAAN,CAAYN,CAAZ,EAAeG,GAAf,CAAlB,EAAuCN,SAAS,CAACU,OAAjD,CAA9C;;AACA,YAAI,CAACK,KAAL,EAAY;AACV,gBAAM,IAAIE,KAAJ,CAAU,oCAAV,CAAN;AACD;;AACD,cAAMH,SAAN;AACD;AACF;AACF,GAfD;AAgBD;;AAjBDH","names":["encryptStream","handshake","source","chunk","i","length","constants_1","end","data","encrypt","slice","session","exports","decryptStream","plaintext","decrypted","valid","decrypt","Error"],"sourceRoot":"","sources":["../../src/crypto.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}