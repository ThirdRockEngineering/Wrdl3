{"ast":null,"code":"'use strict';\n\nconst {\n  AbstractChainedBatch\n} = require('abstract-leveldown');\n\nconst kOperations = Symbol('operations');\nmodule.exports = class DeferredChainedBatch extends AbstractChainedBatch {\n  constructor(db) {\n    super(db);\n    this[kOperations] = [];\n  }\n\n  _put(key, value, options) {\n    this[kOperations].push({ ...options,\n      type: 'put',\n      key,\n      value\n    });\n  }\n\n  _del(key, options) {\n    this[kOperations].push({ ...options,\n      type: 'del',\n      key\n    });\n  }\n\n  _clear() {\n    this[kOperations] = [];\n  }\n\n  _write(options, callback) {\n    // AbstractChainedBatch would call _batch(), we call batch()\n    this.db.batch(this[kOperations], options, callback);\n  }\n\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/deferred-leveldown/deferred-chained-batch.js"],"names":["AbstractChainedBatch","require","kOperations","Symbol","module","exports","DeferredChainedBatch","constructor","db","_put","key","value","options","push","type","_del","_clear","_write","callback","batch"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,oBAAD,CAAxC;;AACA,MAAMC,WAAW,GAAGC,MAAM,CAAC,YAAD,CAA1B;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,oBAAN,SAAmCN,oBAAnC,CAAwD;AACvEO,EAAAA,WAAW,CAAEC,EAAF,EAAM;AACf,UAAMA,EAAN;AACA,SAAKN,WAAL,IAAoB,EAApB;AACD;;AAEDO,EAAAA,IAAI,CAAEC,GAAF,EAAOC,KAAP,EAAcC,OAAd,EAAuB;AACzB,SAAKV,WAAL,EAAkBW,IAAlB,CAAuB,EAAE,GAAGD,OAAL;AAAcE,MAAAA,IAAI,EAAE,KAApB;AAA2BJ,MAAAA,GAA3B;AAAgCC,MAAAA;AAAhC,KAAvB;AACD;;AAEDI,EAAAA,IAAI,CAAEL,GAAF,EAAOE,OAAP,EAAgB;AAClB,SAAKV,WAAL,EAAkBW,IAAlB,CAAuB,EAAE,GAAGD,OAAL;AAAcE,MAAAA,IAAI,EAAE,KAApB;AAA2BJ,MAAAA;AAA3B,KAAvB;AACD;;AAEDM,EAAAA,MAAM,GAAI;AACR,SAAKd,WAAL,IAAoB,EAApB;AACD;;AAEDe,EAAAA,MAAM,CAAEL,OAAF,EAAWM,QAAX,EAAqB;AACzB;AACA,SAAKV,EAAL,CAAQW,KAAR,CAAc,KAAKjB,WAAL,CAAd,EAAiCU,OAAjC,EAA0CM,QAA1C;AACD;;AArBsE,CAAzE","sourcesContent":["'use strict'\n\nconst { AbstractChainedBatch } = require('abstract-leveldown')\nconst kOperations = Symbol('operations')\n\nmodule.exports = class DeferredChainedBatch extends AbstractChainedBatch {\n  constructor (db) {\n    super(db)\n    this[kOperations] = []\n  }\n\n  _put (key, value, options) {\n    this[kOperations].push({ ...options, type: 'put', key, value })\n  }\n\n  _del (key, options) {\n    this[kOperations].push({ ...options, type: 'del', key })\n  }\n\n  _clear () {\n    this[kOperations] = []\n  }\n\n  _write (options, callback) {\n    // AbstractChainedBatch would call _batch(), we call batch()\n    this.db.batch(this[kOperations], options, callback)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}