{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar ipfsBitswap = require('ipfs-bitswap');\n\nvar libp2p = require('./libp2p.js');\n\nvar multiaddr = require('multiaddr');\n\nvar errCode = require('err-code');\n\nvar blockStorage = require('../block-storage.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nclass Network {\n  constructor(peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n\n  static async start(_ref) {\n    let {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    } = _ref;\n\n    if (repo.closed) {\n      await repo.open();\n    }\n\n    const config = await repo.config.getAll();\n    const libp2p$1 = await libp2p.createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    });\n\n    if (libp2p$1.keychain) {\n      await libp2p$1.loadKeychain();\n    }\n\n    await libp2p$1.start();\n\n    for (const ma of libp2p$1.multiaddrs) {\n      print(`Swarm listening on ${ma}/p2p/${peerId.toB58String()}`);\n    }\n\n    const bitswap = ipfsBitswap.createBitswap(libp2p$1, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers\n    });\n    await bitswap.start();\n    const blockstore = new blockStorage.BlockStorage(repo.blocks, bitswap);\n    repo.blocks = blockstore;\n    repo.pins.blockstore = blockstore;\n    return new Network(peerId, libp2p$1, bitswap, repo, blockstore);\n  }\n\n  static async stop(network) {\n    network.repo.blocks = network.blockstore.unwrap();\n    network.repo.pins.blockstore = network.blockstore.unwrap();\n    await network.bitswap.stop();\n    await network.libp2p.stop();\n  }\n\n}\n\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toB58String();\n  const addrs = [];\n  const swarm = config.Addresses && config.Addresses.Swarm || [];\n\n  for (const addr of swarm) {\n    let ma = new multiaddr.Multiaddr(addr);\n\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode__default[\"default\"](new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n    }\n\n    const maId = ma.getPeerId();\n\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`);\n    }\n\n    addrs.push(ma);\n  }\n\n  return addrs;\n};\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479;\nexports.Network = Network;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/network.js"],"names":["Object","defineProperty","exports","value","ipfsBitswap","require","libp2p","multiaddr","errCode","blockStorage","_interopDefaultLegacy","e","errCode__default","Network","constructor","peerId","bitswap","repo","blockstore","start","print","hashers","options","closed","open","config","getAll","libp2p$1","createLibp2p","multiaddrs","readAddrs","keychainConfig","undefined","keychain","loadKeychain","ma","toB58String","createBitswap","blocks","statsEnabled","hashLoader","BlockStorage","pins","stop","network","unwrap","peerIdStr","addrs","swarm","Addresses","Swarm","addr","Multiaddr","protoCodes","includes","WEBSOCKET_STAR_PROTO_CODE","Error","maId","getPeerId","encapsulate","push"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ipfsBitswap = require('ipfs-bitswap');\nvar libp2p = require('./libp2p.js');\nvar multiaddr = require('multiaddr');\nvar errCode = require('err-code');\nvar blockStorage = require('../block-storage.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nclass Network {\n  constructor(peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n  static async start({peerId, repo, print, hashers, options}) {\n    if (repo.closed) {\n      await repo.open();\n    }\n    const config = await repo.config.getAll();\n    const libp2p$1 = await libp2p.createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    });\n    if (libp2p$1.keychain) {\n      await libp2p$1.loadKeychain();\n    }\n    await libp2p$1.start();\n    for (const ma of libp2p$1.multiaddrs) {\n      print(`Swarm listening on ${ ma }/p2p/${ peerId.toB58String() }`);\n    }\n    const bitswap = ipfsBitswap.createBitswap(libp2p$1, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers\n    });\n    await bitswap.start();\n    const blockstore = new blockStorage.BlockStorage(repo.blocks, bitswap);\n    repo.blocks = blockstore;\n    repo.pins.blockstore = blockstore;\n    return new Network(peerId, libp2p$1, bitswap, repo, blockstore);\n  }\n  static async stop(network) {\n    network.repo.blocks = network.blockstore.unwrap();\n    network.repo.pins.blockstore = network.blockstore.unwrap();\n    await network.bitswap.stop();\n    await network.libp2p.stop();\n  }\n}\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toB58String();\n  const addrs = [];\n  const swarm = config.Addresses && config.Addresses.Swarm || [];\n  for (const addr of swarm) {\n    let ma = new multiaddr.Multiaddr(addr);\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode__default[\"default\"](new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n    }\n    const maId = ma.getPeerId();\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${ peerIdStr }`);\n    }\n    addrs.push(ma);\n  }\n  return addrs;\n};\nconst WEBSOCKET_STAR_PROTO_CODE = 479;\n\nexports.Network = Network;\n"]},"metadata":{},"sourceType":"script"}