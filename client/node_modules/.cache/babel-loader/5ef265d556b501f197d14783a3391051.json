{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errors = require('../errors.js');\n\nvar utils = require('../utils.js');\n\nclass Service {\n  static create(_ref) {\n    let {\n      start,\n      stop\n    } = _ref;\n    return new Service(start, stop);\n  }\n\n  static async start(service, options) {\n    const {\n      state,\n      activate\n    } = service;\n\n    switch (state.status) {\n      case 'stopped':\n        {\n          try {\n            const promise = activate(options);\n            service.state = {\n              status: 'starting',\n              ready: promise\n            };\n            const result = await promise;\n            service.state = {\n              status: 'started',\n              value: result\n            };\n            return result;\n          } catch (error) {\n            service.state = {\n              status: 'stopped'\n            };\n            throw error;\n          }\n        }\n\n      case 'starting':\n        {\n          throw new errors.AlreadyStartingError();\n        }\n\n      case 'started':\n        {\n          throw new errors.AlreadyStartedError();\n        }\n\n      case 'stopping':\n        {\n          await state.ready;\n          return await Service.start(service, options);\n        }\n\n      default:\n        {\n          return Service.panic(service);\n        }\n    }\n  }\n\n  static async stop(service) {\n    const {\n      state,\n      deactivate\n    } = service;\n\n    switch (state.status) {\n      case 'stopped':\n        {\n          break;\n        }\n\n      case 'starting':\n        {\n          try {\n            await state.ready;\n          } catch (_) {}\n\n          return await Service.stop(service);\n        }\n\n      case 'stopping':\n        {\n          return await state.ready;\n        }\n\n      case 'started':\n        {\n          if (deactivate) {\n            await deactivate(state.value);\n          }\n\n          service.state = {\n            status: 'stopped'\n          };\n          break;\n        }\n\n      default:\n        {\n          Service.panic(state);\n        }\n    }\n  }\n\n  static try(_ref2) {\n    let {\n      state\n    } = _ref2;\n\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      default:\n        return null;\n    }\n  }\n\n  static async use(_ref3, options) {\n    let {\n      state\n    } = _ref3;\n\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      case 'starting':\n        return await utils.withTimeout(state.ready, options);\n\n      default:\n        throw new errors.NotStartedError();\n    }\n  }\n\n  static panic(_ref4) {\n    let {\n      state\n    } = _ref4;\n    const status = JSON.stringify({\n      status: state.status\n    });\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`);\n  }\n\n  constructor(activate, deactivate) {\n    this.activate = activate;\n    this.deactivate = deactivate;\n    this.state = {\n      status: 'stopped'\n    };\n  }\n\n  async use(options) {\n    return await Service.use(this, options);\n  }\n\n  try() {\n    return Service.try(this);\n  }\n\n}\n\nexports.Service = Service;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/utils/service.js"],"names":["Object","defineProperty","exports","value","errors","require","utils","Service","create","start","stop","service","options","state","activate","status","promise","ready","result","error","AlreadyStartingError","AlreadyStartedError","panic","deactivate","_","try","use","withTimeout","NotStartedError","JSON","stringify","RangeError","constructor"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errors = require('../errors.js');\nvar utils = require('../utils.js');\n\nclass Service {\n  static create({start, stop}) {\n    return new Service(start, stop);\n  }\n  static async start(service, options) {\n    const {state, activate} = service;\n    switch (state.status) {\n    case 'stopped': {\n        try {\n          const promise = activate(options);\n          service.state = {\n            status: 'starting',\n            ready: promise\n          };\n          const result = await promise;\n          service.state = {\n            status: 'started',\n            value: result\n          };\n          return result;\n        } catch (error) {\n          service.state = { status: 'stopped' };\n          throw error;\n        }\n      }\n    case 'starting': {\n        throw new errors.AlreadyStartingError();\n      }\n    case 'started': {\n        throw new errors.AlreadyStartedError();\n      }\n    case 'stopping': {\n        await state.ready;\n        return await Service.start(service, options);\n      }\n    default: {\n        return Service.panic(service);\n      }\n    }\n  }\n  static async stop(service) {\n    const {state, deactivate} = service;\n    switch (state.status) {\n    case 'stopped': {\n        break;\n      }\n    case 'starting': {\n        try {\n          await state.ready;\n        } catch (_) {\n        }\n        return await Service.stop(service);\n      }\n    case 'stopping': {\n        return await state.ready;\n      }\n    case 'started': {\n        if (deactivate) {\n          await deactivate(state.value);\n        }\n        service.state = { status: 'stopped' };\n        break;\n      }\n    default: {\n        Service.panic(state);\n      }\n    }\n  }\n  static try({state}) {\n    switch (state.status) {\n    case 'started':\n      return state.value;\n    default:\n      return null;\n    }\n  }\n  static async use({state}, options) {\n    switch (state.status) {\n    case 'started':\n      return state.value;\n    case 'starting':\n      return await utils.withTimeout(state.ready, options);\n    default:\n      throw new errors.NotStartedError();\n    }\n  }\n  static panic({state}) {\n    const status = JSON.stringify({ status: state.status });\n    throw RangeError(`Service in invalid state ${ status }, should never happen if you see this please report a bug`);\n  }\n  constructor(activate, deactivate) {\n    this.activate = activate;\n    this.deactivate = deactivate;\n    this.state = { status: 'stopped' };\n  }\n  async use(options) {\n    return await Service.use(this, options);\n  }\n  try() {\n    return Service.try(this);\n  }\n}\n\nexports.Service = Service;\n"]},"metadata":{},"sourceType":"script"}