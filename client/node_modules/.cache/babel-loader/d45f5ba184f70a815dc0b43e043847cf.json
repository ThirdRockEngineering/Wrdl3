{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar PeerId = require('peer-id');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\n\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\nfunction createPing(_ref) {\n  let {\n    network\n  } = _ref;\n\n  async function* ping(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      libp2p\n    } = await network.use();\n    options.count = options.count || 10;\n    const peer = PeerId__default[\"default\"].createFromB58String(peerId);\n    const storedPeer = await libp2p.peerStore.get(peer);\n    let id = storedPeer && storedPeer.id;\n\n    if (!id) {\n      yield { ...basePacket,\n        text: `Looking up peer ${peerId}`\n      };\n      const remotePeer = await libp2p.peerRouting.findPeer(peer);\n      id = remotePeer && remotePeer.id;\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found');\n    }\n\n    yield { ...basePacket,\n      text: `PING ${id.toB58String()}`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id);\n        totalTime += time;\n        packetCount++;\n        yield { ...basePacket,\n          time\n        };\n      } catch (err) {\n        yield { ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield { ...basePacket,\n        text: `Average latency: ${average}ms`\n      };\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(ping);\n}\n\nexports.createPing = createPing;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/ping.js"],"names":["Object","defineProperty","exports","value","PeerId","require","withTimeoutOption","_interopDefaultLegacy","e","PeerId__default","basePacket","success","time","text","createPing","network","ping","peerId","options","libp2p","use","count","peer","createFromB58String","storedPeer","peerStore","get","id","remotePeer","peerRouting","findPeer","Error","toB58String","packetCount","totalTime","i","err","toString","average"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar PeerId = require('peer-id');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\n\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\nfunction createPing({network}) {\n  async function* ping(peerId, options = {}) {\n    const {libp2p} = await network.use();\n    options.count = options.count || 10;\n    const peer = PeerId__default[\"default\"].createFromB58String(peerId);\n    const storedPeer = await libp2p.peerStore.get(peer);\n    let id = storedPeer && storedPeer.id;\n    if (!id) {\n      yield {\n        ...basePacket,\n        text: `Looking up peer ${ peerId }`\n      };\n      const remotePeer = await libp2p.peerRouting.findPeer(peer);\n      id = remotePeer && remotePeer.id;\n    }\n    if (!id) {\n      throw new Error('Peer was not found');\n    }\n    yield {\n      ...basePacket,\n      text: `PING ${ id.toB58String() }`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id);\n        totalTime += time;\n        packetCount++;\n        yield {\n          ...basePacket,\n          time\n        };\n      } catch (err) {\n        yield {\n          ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield {\n        ...basePacket,\n        text: `Average latency: ${ average }ms`\n      };\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(ping);\n}\n\nexports.createPing = createPing;\n"]},"metadata":{},"sourceType":"script"}