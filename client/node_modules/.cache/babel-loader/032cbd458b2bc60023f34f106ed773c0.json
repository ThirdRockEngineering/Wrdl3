{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar events = require('events');\n\nvar MovingAverage = require('@vascosantos/moving-average');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar MovingAverage__default = /*#__PURE__*/_interopDefaultLegacy(MovingAverage);\n\nclass Stat extends events.EventEmitter {\n  constructor(initialCounters, options) {\n    super();\n    this._options = options;\n    this._queue = [];\n    this._stats = {};\n    this._frequencyLastTime = Date.now();\n    this._frequencyAccumulators = {};\n    this._movingAverages = {};\n    this._update = this._update.bind(this);\n    initialCounters.forEach(key => {\n      this._stats[key] = BigInt(0);\n      this._movingAverages[key] = {};\n\n      this._options.movingAverageIntervals.forEach(interval => {\n        const ma = this._movingAverages[key][interval] = MovingAverage__default[\"default\"](interval);\n        ma.push(this._frequencyLastTime, 0);\n      });\n    });\n    this._enabled = this._options.enabled;\n  }\n\n  enable() {\n    this._enabled = true;\n  }\n\n  disable() {\n    this._disabled = true;\n  }\n\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n\n  get snapshot() {\n    return Object.assign({}, this._stats);\n  }\n\n  get movingAverages() {\n    return Object.assign({}, this._movingAverages);\n  }\n\n  push(counter, inc) {\n    if (this._enabled) {\n      this._queue.push([counter, inc, Date.now()]);\n\n      this._resetComputeTimeout();\n    }\n  }\n\n  _resetComputeTimeout() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n\n    this._timeout = setTimeout(this._update, this._nextTimeout());\n  }\n\n  _nextTimeout() {\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n  }\n\n  _update() {\n    this._timeout = null;\n\n    if (this._queue.length) {\n      let last;\n\n      while (this._queue.length) {\n        const op = last = this._queue.shift();\n\n        op && this._applyOp(op);\n      }\n\n      last && this._updateFrequency(last[2]);\n      this.emit('update', this._stats);\n    }\n  }\n\n  _updateFrequency(latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime;\n\n    if (timeDiff) {\n      Object.keys(this._stats).forEach(key => {\n        this._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n    }\n\n    this._frequencyLastTime = latestTime;\n  }\n\n  _updateFrequencyFor(key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0;\n    this._frequencyAccumulators[key] = 0;\n    const hz = count / timeDiffMS * 1000;\n    let movingAverages = this._movingAverages[key];\n\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {};\n    }\n\n    this._options.movingAverageIntervals.forEach(movingAverageInterval => {\n      let movingAverage = movingAverages[movingAverageInterval];\n\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage__default[\"default\"](movingAverageInterval);\n      }\n\n      movingAverage.push(latestTime, hz);\n    });\n  }\n\n  _applyOp(op) {\n    const key = op[0];\n    const inc = op[1];\n\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${inc}`);\n    }\n\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0);\n    }\n\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0;\n    }\n\n    this._frequencyAccumulators[key] += inc;\n  }\n\n}\n\nexports.Stat = Stat;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-bitswap/cjs/src/stats/stat.js"],"names":["Object","defineProperty","exports","value","events","require","MovingAverage","_interopDefaultLegacy","e","MovingAverage__default","Stat","EventEmitter","constructor","initialCounters","options","_options","_queue","_stats","_frequencyLastTime","Date","now","_frequencyAccumulators","_movingAverages","_update","bind","forEach","key","BigInt","movingAverageIntervals","interval","ma","push","_enabled","enabled","enable","disable","_disabled","stop","_timeout","clearTimeout","snapshot","assign","movingAverages","counter","inc","_resetComputeTimeout","setTimeout","_nextTimeout","urgency","length","computeThrottleMaxQueueSize","Math","max","computeThrottleTimeout","last","op","shift","_applyOp","_updateFrequency","emit","latestTime","timeDiff","keys","_updateFrequencyFor","timeDiffMS","count","hz","movingAverageInterval","movingAverage","Error","prototype","hasOwnProperty","call"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar events = require('events');\nvar MovingAverage = require('@vascosantos/moving-average');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar MovingAverage__default = /*#__PURE__*/_interopDefaultLegacy(MovingAverage);\n\nclass Stat extends events.EventEmitter {\n  constructor(initialCounters, options) {\n    super();\n    this._options = options;\n    this._queue = [];\n    this._stats = {};\n    this._frequencyLastTime = Date.now();\n    this._frequencyAccumulators = {};\n    this._movingAverages = {};\n    this._update = this._update.bind(this);\n    initialCounters.forEach(key => {\n      this._stats[key] = BigInt(0);\n      this._movingAverages[key] = {};\n      this._options.movingAverageIntervals.forEach(interval => {\n        const ma = this._movingAverages[key][interval] = MovingAverage__default[\"default\"](interval);\n        ma.push(this._frequencyLastTime, 0);\n      });\n    });\n    this._enabled = this._options.enabled;\n  }\n  enable() {\n    this._enabled = true;\n  }\n  disable() {\n    this._disabled = true;\n  }\n  stop() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n  }\n  get snapshot() {\n    return Object.assign({}, this._stats);\n  }\n  get movingAverages() {\n    return Object.assign({}, this._movingAverages);\n  }\n  push(counter, inc) {\n    if (this._enabled) {\n      this._queue.push([\n        counter,\n        inc,\n        Date.now()\n      ]);\n      this._resetComputeTimeout();\n    }\n  }\n  _resetComputeTimeout() {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n    }\n    this._timeout = setTimeout(this._update, this._nextTimeout());\n  }\n  _nextTimeout() {\n    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;\n    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);\n  }\n  _update() {\n    this._timeout = null;\n    if (this._queue.length) {\n      let last;\n      while (this._queue.length) {\n        const op = last = this._queue.shift();\n        op && this._applyOp(op);\n      }\n      last && this._updateFrequency(last[2]);\n      this.emit('update', this._stats);\n    }\n  }\n  _updateFrequency(latestTime) {\n    const timeDiff = latestTime - this._frequencyLastTime;\n    if (timeDiff) {\n      Object.keys(this._stats).forEach(key => {\n        this._updateFrequencyFor(key, timeDiff, latestTime);\n      });\n    }\n    this._frequencyLastTime = latestTime;\n  }\n  _updateFrequencyFor(key, timeDiffMS, latestTime) {\n    const count = this._frequencyAccumulators[key] || 0;\n    this._frequencyAccumulators[key] = 0;\n    const hz = count / timeDiffMS * 1000;\n    let movingAverages = this._movingAverages[key];\n    if (!movingAverages) {\n      movingAverages = this._movingAverages[key] = {};\n    }\n    this._options.movingAverageIntervals.forEach(movingAverageInterval => {\n      let movingAverage = movingAverages[movingAverageInterval];\n      if (!movingAverage) {\n        movingAverage = movingAverages[movingAverageInterval] = MovingAverage__default[\"default\"](movingAverageInterval);\n      }\n      movingAverage.push(latestTime, hz);\n    });\n  }\n  _applyOp(op) {\n    const key = op[0];\n    const inc = op[1];\n    if (typeof inc !== 'number') {\n      throw new Error(`invalid increment number: ${ inc }`);\n    }\n    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {\n      this._stats[key] = BigInt(0);\n    }\n    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);\n    if (!this._frequencyAccumulators[key]) {\n      this._frequencyAccumulators[key] = 0;\n    }\n    this._frequencyAccumulators[key] += inc;\n  }\n}\n\nexports.Stat = Stat;\n"]},"metadata":{},"sourceType":"script"}