{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _get = require('just-safe-get');\n\nvar debug = require('debug');\n\nvar errCode = require('err-code');\n\nvar migrator = require('ipfs-repo-migrations');\n\nvar bytes = require('bytes');\n\nvar merge = require('merge-options');\n\nvar constants = require('./constants.js');\n\nvar version = require('./version.js');\n\nvar config = require('./config.js');\n\nvar spec = require('./spec.js');\n\nvar apiAddr = require('./api-addr.js');\n\nvar idstore = require('./idstore.js');\n\nvar defaultOptions = require('./default-options.js');\n\nvar defaultDatastore = require('./default-datastore.js');\n\nvar errors = require('./errors.js');\n\nvar pinManager = require('./pin-manager.js');\n\nvar pinnedBlockstore = require('./pinned-blockstore.js');\n\nvar mortice = require('mortice');\n\nvar gc = require('./gc.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar migrator__namespace = /*#__PURE__*/_interopNamespace(migrator);\n\nvar bytes__default = /*#__PURE__*/_interopDefaultLegacy(bytes);\n\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\n\nvar mortice__default = /*#__PURE__*/_interopDefaultLegacy(mortice);\n\nconst log = debug__default[\"default\"]('ipfs:repo');\nconst noLimit = Number.MAX_SAFE_INTEGER;\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';\n\nclass Repo {\n  constructor(path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path');\n    }\n\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader');\n    }\n\n    this.options = merge__default[\"default\"](defaultOptions, options);\n    this.closed = true;\n    this.path = path;\n    this.root = backends.root;\n    this.datastore = backends.datastore;\n    this.keys = backends.keys;\n    const blockstore = backends.blocks;\n    const pinstore = backends.pins;\n    this.pins = new pinManager.PinManager({\n      pinstore,\n      blockstore,\n      loadCodec\n    });\n    const pinnedBlockstore$1 = pinnedBlockstore.createPinnedBlockstore(this.pins, blockstore);\n    this.blocks = idstore.createIdStore(pinnedBlockstore$1);\n    this.version = version.version(this.root);\n    this.config = config.config(this.root);\n    this.spec = spec.spec(this.root);\n    this.apiAddr = apiAddr.apiAddr(this.root);\n    this.gcLock = mortice__default[\"default\"](path, {\n      singleProcess: this.options.repoOwner !== false\n    });\n    this.gc = gc.gc({\n      gcLock: this.gcLock,\n      pins: this.pins,\n      blockstore: this.blocks,\n      root: this.root,\n      loadCodec\n    });\n  }\n\n  async init(config) {\n    log('initializing at: %s', this.path);\n    await this._openRoot();\n    await this.config.replace(buildConfig(config));\n    await this.spec.set(buildDatastoreSpec(config));\n    await this.version.set(constants.repoVersion);\n  }\n\n  async isInitialized() {\n    if (!this.closed) {\n      return true;\n    }\n\n    try {\n      await this._openRoot();\n      await this._checkInitialized();\n      await this.root.close();\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  async open() {\n    if (!this.closed) {\n      throw errCode__default[\"default\"](new Error('repo is already open'), errors.ERR_REPO_ALREADY_OPEN);\n    }\n\n    log('opening at: %s', this.path);\n\n    try {\n      await this._openRoot();\n      await this._checkInitialized();\n      this._lockfile = await this._openLock();\n      log('acquired repo.lock');\n      const isCompatible = await this.version.check(constants.repoVersion);\n\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(constants.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          });\n        } else {\n          throw new errors.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');\n        }\n      }\n\n      log('creating datastore');\n      await this.datastore.open();\n      log('creating blocks');\n      await this.blocks.open();\n      log('creating keystore');\n      await this.keys.open();\n      log('creating pins');\n      await this.pins.pinstore.open();\n      this.closed = false;\n      log('all opened');\n    } catch (err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock();\n          this._lockfile = null;\n        } catch (err2) {\n          log('error removing lock', err2);\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  async _openRoot() {\n    try {\n      await this.root.open();\n    } catch (err) {\n      if (err.message !== 'Already open') {\n        throw err;\n      }\n    }\n  }\n\n  async _openLock() {\n    const lockfile = await this.options.repoLock.lock(this.path);\n\n    if (typeof lockfile.close !== 'function') {\n      throw errCode__default[\"default\"](new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');\n    }\n\n    return lockfile;\n  }\n\n  _closeLock() {\n    return this._lockfile && this._lockfile.close();\n  }\n\n  async _checkInitialized() {\n    log('init check');\n    let config;\n\n    try {\n      [config] = await Promise.all([this.config.exists(), this.spec.exists(), this.version.exists()]);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, {\n          path: this.path\n        });\n      }\n\n      throw err;\n    }\n\n    if (!config) {\n      throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, {\n        path: this.path\n      });\n    }\n  }\n\n  async close() {\n    if (this.closed) {\n      throw errCode__default[\"default\"](new Error('repo is already closed'), errors.ERR_REPO_ALREADY_CLOSED);\n    }\n\n    log('closing at: %s', this.path);\n\n    try {\n      await this.apiAddr.delete();\n    } catch (err) {\n      if (err.code !== errors.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err;\n      }\n    }\n\n    await Promise.all([this.root, this.blocks, this.keys, this.datastore, this.pins.pinstore].map(store => store && store.close()));\n    log('unlocking');\n    this.closed = true;\n    await this._closeLock();\n  }\n\n  exists() {\n    return this.version.exists();\n  }\n\n  async stat() {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([this._storageMaxStat(), this._blockStat(), this.version.get(), getSize(this.datastore), getSize(this.keys)]);\n      const size = blocks.size + datastore + keys;\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      };\n    }\n\n    throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, {\n      path: this.path\n    });\n  }\n\n  async _isAutoMigrationEnabled() {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate;\n    }\n\n    let autoMigrateConfig;\n\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY);\n    } catch (e) {\n      if (e.code === errors.NotFoundError.code) {\n        autoMigrateConfig = true;\n      } else {\n        throw e;\n      }\n    }\n\n    return autoMigrateConfig;\n  }\n\n  async _migrate(toVersion, backends) {\n    const currentRepoVersion = await this.version.get();\n\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${toVersion}`);\n      return migrator__namespace.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    } else {\n      log(`migrating to version ${toVersion}`);\n      return migrator__namespace.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    }\n  }\n\n  async _storageMaxStat() {\n    try {\n      const max = await this.config.get('Datastore.StorageMax');\n      return BigInt(bytes__default[\"default\"](max));\n    } catch (err) {\n      return BigInt(noLimit);\n    }\n  }\n\n  async _blockStat() {\n    let count = BigInt(0);\n    let size = BigInt(0);\n\n    if (this.blocks) {\n      for await (const {\n        key,\n        value\n      } of this.blocks.query({})) {\n        count += BigInt(1);\n        size += BigInt(value.byteLength);\n        size += BigInt(key.bytes.byteLength);\n      }\n    }\n\n    return {\n      count,\n      size\n    };\n  }\n\n}\n\nasync function getSize(datastore) {\n  let sum = BigInt(0);\n\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength);\n    sum += BigInt(block.key.uint8Array().byteLength);\n  }\n\n  return sum;\n}\n\nfunction createRepo(path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options);\n}\n\nfunction buildConfig(_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get__default[\"default\"](_config, 'datastore'));\n  return _config;\n}\n\nfunction buildDatastoreSpec(_config) {\n  const spec = { ...defaultDatastore.Spec,\n    ..._get__default[\"default\"](_config, 'Datastore.Spec')\n  };\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map(mounting => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  };\n}\n\nexports.createRepo = createRepo;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo/cjs/src/index.js"],"names":["Object","defineProperty","exports","value","_get","require","debug","errCode","migrator","bytes","merge","constants","version","config","spec","apiAddr","idstore","defaultOptions","defaultDatastore","errors","pinManager","pinnedBlockstore","mortice","gc","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","_get__default","debug__default","errCode__default","migrator__namespace","bytes__default","merge__default","mortice__default","log","noLimit","Number","MAX_SAFE_INTEGER","AUTO_MIGRATE_CONFIG_KEY","Repo","constructor","path","loadCodec","backends","options","Error","closed","root","datastore","blockstore","blocks","pinstore","pins","PinManager","pinnedBlockstore$1","createPinnedBlockstore","createIdStore","gcLock","singleProcess","repoOwner","init","_openRoot","replace","buildConfig","set","buildDatastoreSpec","repoVersion","isInitialized","_checkInitialized","close","err","open","ERR_REPO_ALREADY_OPEN","_lockfile","_openLock","isCompatible","check","_isAutoMigrationEnabled","_migrate","InvalidRepoVersionError","_closeLock","err2","message","lockfile","repoLock","lock","Promise","all","exists","code","ERR_REPO_NOT_INITIALIZED","ERR_REPO_ALREADY_CLOSED","delete","startsWith","map","store","stat","storageMax","_storageMaxStat","_blockStat","getSize","size","repoPath","numObjects","count","repoSize","autoMigrate","undefined","autoMigrateConfig","NotFoundError","toVersion","currentRepoVersion","revert","ignoreLock","onProgress","onMigrationProgress","migrate","max","BigInt","key","query","byteLength","sum","block","uint8Array","createRepo","_config","Datastore","assign","Spec","type","mounts","mounting","mountpoint","child","shardFunc"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,sBAAD,CAAtB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,eAAD,CAAnB;;AACA,IAAIM,SAAS,GAAGN,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIQ,MAAM,GAAGR,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIS,IAAI,GAAGT,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIU,OAAO,GAAGV,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIW,OAAO,GAAGX,OAAO,CAAC,cAAD,CAArB;;AACA,IAAIY,cAAc,GAAGZ,OAAO,CAAC,sBAAD,CAA5B;;AACA,IAAIa,gBAAgB,GAAGb,OAAO,CAAC,wBAAD,CAA9B;;AACA,IAAIc,MAAM,GAAGd,OAAO,CAAC,aAAD,CAApB;;AACA,IAAIe,UAAU,GAAGf,OAAO,CAAC,kBAAD,CAAxB;;AACA,IAAIgB,gBAAgB,GAAGhB,OAAO,CAAC,wBAAD,CAA9B;;AACA,IAAIiB,OAAO,GAAGjB,OAAO,CAAC,SAAD,CAArB;;AACA,IAAIkB,EAAE,GAAGlB,OAAO,CAAC,SAAD,CAAhB;;AAEA,SAASmB,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,SAASC,iBAAT,CAA2BD,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACE,UAAX,EAAuB,OAAOF,CAAP;AACvB,MAAIG,CAAC,GAAG5B,MAAM,CAAC6B,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIJ,CAAJ,EAAO;AACLzB,IAAAA,MAAM,CAAC8B,IAAP,CAAYL,CAAZ,EAAeM,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGjC,MAAM,CAACkC,wBAAP,CAAgCT,CAAhC,EAAmCO,CAAnC,CAAR;AACAhC,QAAAA,MAAM,CAACC,cAAP,CAAsB2B,CAAtB,EAAyBI,CAAzB,EAA4BC,CAAC,CAACE,GAAF,GAAQF,CAAR,GAAY;AACtCG,UAAAA,UAAU,EAAE,IAD0B;AAEtCD,UAAAA,GAAG,EAAE,YAAY;AAAE,mBAAOV,CAAC,CAACO,CAAD,CAAR;AAAc;AAFK,SAAxC;AAID;AACF,KARD;AASD;;AACDJ,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeH,CAAf;AACA,SAAOzB,MAAM,CAACqC,MAAP,CAAcT,CAAd,CAAP;AACD;;AAED,IAAIU,aAAa,GAAG,aAAad,qBAAqB,CAACpB,IAAD,CAAtD;;AACA,IAAImC,cAAc,GAAG,aAAaf,qBAAqB,CAAClB,KAAD,CAAvD;;AACA,IAAIkC,gBAAgB,GAAG,aAAahB,qBAAqB,CAACjB,OAAD,CAAzD;;AACA,IAAIkC,mBAAmB,GAAG,aAAaf,iBAAiB,CAAClB,QAAD,CAAxD;;AACA,IAAIkC,cAAc,GAAG,aAAalB,qBAAqB,CAACf,KAAD,CAAvD;;AACA,IAAIkC,cAAc,GAAG,aAAanB,qBAAqB,CAACd,KAAD,CAAvD;;AACA,IAAIkC,gBAAgB,GAAG,aAAapB,qBAAqB,CAACF,OAAD,CAAzD;;AAEA,MAAMuB,GAAG,GAAGN,cAAc,CAAC,SAAD,CAAd,CAA0B,WAA1B,CAAZ;AACA,MAAMO,OAAO,GAAGC,MAAM,CAACC,gBAAvB;AACA,MAAMC,uBAAuB,GAAG,iBAAhC;;AACA,MAAMC,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,EAA4BC,OAA5B,EAAqC;AAC9C,QAAI,OAAOH,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAM,IAAII,KAAJ,CAAU,mBAAV,CAAN;AACD;;AACD,QAAI,OAAOH,SAAP,KAAqB,UAAzB,EAAqC;AACnC,YAAM,IAAIG,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,SAAKD,OAAL,GAAeZ,cAAc,CAAC,SAAD,CAAd,CAA0B1B,cAA1B,EAA0CsC,OAA1C,CAAf;AACA,SAAKE,MAAL,GAAc,IAAd;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKM,IAAL,GAAYJ,QAAQ,CAACI,IAArB;AACA,SAAKC,SAAL,GAAiBL,QAAQ,CAACK,SAA1B;AACA,SAAK7B,IAAL,GAAYwB,QAAQ,CAACxB,IAArB;AACA,UAAM8B,UAAU,GAAGN,QAAQ,CAACO,MAA5B;AACA,UAAMC,QAAQ,GAAGR,QAAQ,CAACS,IAA1B;AACA,SAAKA,IAAL,GAAY,IAAI3C,UAAU,CAAC4C,UAAf,CAA0B;AACpCF,MAAAA,QADoC;AAEpCF,MAAAA,UAFoC;AAGpCP,MAAAA;AAHoC,KAA1B,CAAZ;AAKA,UAAMY,kBAAkB,GAAG5C,gBAAgB,CAAC6C,sBAAjB,CAAwC,KAAKH,IAA7C,EAAmDH,UAAnD,CAA3B;AACA,SAAKC,MAAL,GAAc7C,OAAO,CAACmD,aAAR,CAAsBF,kBAAtB,CAAd;AACA,SAAKrD,OAAL,GAAeA,OAAO,CAACA,OAAR,CAAgB,KAAK8C,IAArB,CAAf;AACA,SAAK7C,MAAL,GAAcA,MAAM,CAACA,MAAP,CAAc,KAAK6C,IAAnB,CAAd;AACA,SAAK5C,IAAL,GAAYA,IAAI,CAACA,IAAL,CAAU,KAAK4C,IAAf,CAAZ;AACA,SAAK3C,OAAL,GAAeA,OAAO,CAACA,OAAR,CAAgB,KAAK2C,IAArB,CAAf;AACA,SAAKU,MAAL,GAAcxB,gBAAgB,CAAC,SAAD,CAAhB,CAA4BQ,IAA5B,EAAkC;AAAEiB,MAAAA,aAAa,EAAE,KAAKd,OAAL,CAAae,SAAb,KAA2B;AAA5C,KAAlC,CAAd;AACA,SAAK/C,EAAL,GAAUA,EAAE,CAACA,EAAH,CAAM;AACd6C,MAAAA,MAAM,EAAE,KAAKA,MADC;AAEdL,MAAAA,IAAI,EAAE,KAAKA,IAFG;AAGdH,MAAAA,UAAU,EAAE,KAAKC,MAHH;AAIdH,MAAAA,IAAI,EAAE,KAAKA,IAJG;AAKdL,MAAAA;AALc,KAAN,CAAV;AAOD;;AACS,QAAJkB,IAAI,CAAC1D,MAAD,EAAS;AACjBgC,IAAAA,GAAG,CAAC,qBAAD,EAAwB,KAAKO,IAA7B,CAAH;AACA,UAAM,KAAKoB,SAAL,EAAN;AACA,UAAM,KAAK3D,MAAL,CAAY4D,OAAZ,CAAoBC,WAAW,CAAC7D,MAAD,CAA/B,CAAN;AACA,UAAM,KAAKC,IAAL,CAAU6D,GAAV,CAAcC,kBAAkB,CAAC/D,MAAD,CAAhC,CAAN;AACA,UAAM,KAAKD,OAAL,CAAa+D,GAAb,CAAiBhE,SAAS,CAACkE,WAA3B,CAAN;AACD;;AACkB,QAAbC,aAAa,GAAG;AACpB,QAAI,CAAC,KAAKrB,MAAV,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,QAAI;AACF,YAAM,KAAKe,SAAL,EAAN;AACA,YAAM,KAAKO,iBAAL,EAAN;AACA,YAAM,KAAKrB,IAAL,CAAUsB,KAAV,EAAN;AACA,aAAO,IAAP;AACD,KALD,CAKE,OAAOC,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF;;AACS,QAAJC,IAAI,GAAG;AACX,QAAI,CAAC,KAAKzB,MAAV,EAAkB;AAChB,YAAMjB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,sBAAV,CAA5B,EAA+DrC,MAAM,CAACgE,qBAAtE,CAAN;AACD;;AACDtC,IAAAA,GAAG,CAAC,gBAAD,EAAmB,KAAKO,IAAxB,CAAH;;AACA,QAAI;AACF,YAAM,KAAKoB,SAAL,EAAN;AACA,YAAM,KAAKO,iBAAL,EAAN;AACA,WAAKK,SAAL,GAAiB,MAAM,KAAKC,SAAL,EAAvB;AACAxC,MAAAA,GAAG,CAAC,oBAAD,CAAH;AACA,YAAMyC,YAAY,GAAG,MAAM,KAAK1E,OAAL,CAAa2E,KAAb,CAAmB5E,SAAS,CAACkE,WAA7B,CAA3B;;AACA,UAAI,CAACS,YAAL,EAAmB;AACjB,YAAI,MAAM,KAAKE,uBAAL,EAAV,EAA0C;AACxC,gBAAM,KAAKC,QAAL,CAAc9E,SAAS,CAACkE,WAAxB,EAAqC;AACzCnB,YAAAA,IAAI,EAAE,KAAKA,IAD8B;AAEzCC,YAAAA,SAAS,EAAE,KAAKA,SAFyB;AAGzCI,YAAAA,IAAI,EAAE,KAAKA,IAAL,CAAUD,QAHyB;AAIzCD,YAAAA,MAAM,EAAE,KAAKE,IAAL,CAAUH,UAJuB;AAKzC9B,YAAAA,IAAI,EAAE,KAAKA;AAL8B,WAArC,CAAN;AAOD,SARD,MAQO;AACL,gBAAM,IAAIX,MAAM,CAACuE,uBAAX,CAAmC,8FAAnC,CAAN;AACD;AACF;;AACD7C,MAAAA,GAAG,CAAC,oBAAD,CAAH;AACA,YAAM,KAAKc,SAAL,CAAeuB,IAAf,EAAN;AACArC,MAAAA,GAAG,CAAC,iBAAD,CAAH;AACA,YAAM,KAAKgB,MAAL,CAAYqB,IAAZ,EAAN;AACArC,MAAAA,GAAG,CAAC,mBAAD,CAAH;AACA,YAAM,KAAKf,IAAL,CAAUoD,IAAV,EAAN;AACArC,MAAAA,GAAG,CAAC,eAAD,CAAH;AACA,YAAM,KAAKkB,IAAL,CAAUD,QAAV,CAAmBoB,IAAnB,EAAN;AACA,WAAKzB,MAAL,GAAc,KAAd;AACAZ,MAAAA,GAAG,CAAC,YAAD,CAAH;AACD,KA7BD,CA6BE,OAAOoC,GAAP,EAAY;AACZ,UAAI,KAAKG,SAAT,EAAoB;AAClB,YAAI;AACF,gBAAM,KAAKO,UAAL,EAAN;AACA,eAAKP,SAAL,GAAiB,IAAjB;AACD,SAHD,CAGE,OAAOQ,IAAP,EAAa;AACb/C,UAAAA,GAAG,CAAC,qBAAD,EAAwB+C,IAAxB,CAAH;AACD;AACF;;AACD,YAAMX,GAAN;AACD;AACF;;AACc,QAATT,SAAS,GAAG;AAChB,QAAI;AACF,YAAM,KAAKd,IAAL,CAAUwB,IAAV,EAAN;AACD,KAFD,CAEE,OAAOD,GAAP,EAAY;AACZ,UAAIA,GAAG,CAACY,OAAJ,KAAgB,cAApB,EAAoC;AAClC,cAAMZ,GAAN;AACD;AACF;AACF;;AACc,QAATI,SAAS,GAAG;AAChB,UAAMS,QAAQ,GAAG,MAAM,KAAKvC,OAAL,CAAawC,QAAb,CAAsBC,IAAtB,CAA2B,KAAK5C,IAAhC,CAAvB;;AACA,QAAI,OAAO0C,QAAQ,CAACd,KAAhB,KAA0B,UAA9B,EAA0C;AACxC,YAAMxC,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,gCAAV,CAA5B,EAAyE,uBAAzE,CAAN;AACD;;AACD,WAAOsC,QAAP;AACD;;AACDH,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKP,SAAL,IAAkB,KAAKA,SAAL,CAAeJ,KAAf,EAAzB;AACD;;AACsB,QAAjBD,iBAAiB,GAAG;AACxBlC,IAAAA,GAAG,CAAC,YAAD,CAAH;AACA,QAAIhC,MAAJ;;AACA,QAAI;AACF,OAACA,MAAD,IAAW,MAAMoF,OAAO,CAACC,GAAR,CAAY,CAC3B,KAAKrF,MAAL,CAAYsF,MAAZ,EAD2B,EAE3B,KAAKrF,IAAL,CAAUqF,MAAV,EAF2B,EAG3B,KAAKvF,OAAL,CAAauF,MAAb,EAH2B,CAAZ,CAAjB;AAKD,KAND,CAME,OAAOlB,GAAP,EAAY;AACZ,UAAIA,GAAG,CAACmB,IAAJ,KAAa,eAAjB,EAAkC;AAChC,cAAM5D,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,6BAAV,CAA5B,EAAsErC,MAAM,CAACkF,wBAA7E,EAAuG;AAAEjD,UAAAA,IAAI,EAAE,KAAKA;AAAb,SAAvG,CAAN;AACD;;AACD,YAAM6B,GAAN;AACD;;AACD,QAAI,CAACpE,MAAL,EAAa;AACX,YAAM2B,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,6BAAV,CAA5B,EAAsErC,MAAM,CAACkF,wBAA7E,EAAuG;AAAEjD,QAAAA,IAAI,EAAE,KAAKA;AAAb,OAAvG,CAAN;AACD;AACF;;AACU,QAAL4B,KAAK,GAAG;AACZ,QAAI,KAAKvB,MAAT,EAAiB;AACf,YAAMjB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,wBAAV,CAA5B,EAAiErC,MAAM,CAACmF,uBAAxE,CAAN;AACD;;AACDzD,IAAAA,GAAG,CAAC,gBAAD,EAAmB,KAAKO,IAAxB,CAAH;;AACA,QAAI;AACF,YAAM,KAAKrC,OAAL,CAAawF,MAAb,EAAN;AACD,KAFD,CAEE,OAAOtB,GAAP,EAAY;AACZ,UAAIA,GAAG,CAACmB,IAAJ,KAAajF,MAAM,CAACkF,wBAApB,IAAgD,CAACpB,GAAG,CAACY,OAAJ,CAAYW,UAAZ,CAAuB,QAAvB,CAArD,EAAuF;AACrF,cAAMvB,GAAN;AACD;AACF;;AACD,UAAMgB,OAAO,CAACC,GAAR,CAAY,CAChB,KAAKxC,IADW,EAEhB,KAAKG,MAFW,EAGhB,KAAK/B,IAHW,EAIhB,KAAK6B,SAJW,EAKhB,KAAKI,IAAL,CAAUD,QALM,EAMhB2C,GANgB,CAMZC,KAAK,IAAIA,KAAK,IAAIA,KAAK,CAAC1B,KAAN,EANN,CAAZ,CAAN;AAOAnC,IAAAA,GAAG,CAAC,WAAD,CAAH;AACA,SAAKY,MAAL,GAAc,IAAd;AACA,UAAM,KAAKkC,UAAL,EAAN;AACD;;AACDQ,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKvF,OAAL,CAAauF,MAAb,EAAP;AACD;;AACS,QAAJQ,IAAI,GAAG;AACX,QAAI,KAAKhD,SAAL,IAAkB,KAAK7B,IAA3B,EAAiC;AAC/B,YAAM,CAAC8E,UAAD,EAAa/C,MAAb,EAAqBjD,OAArB,EAA8B+C,SAA9B,EAAyC7B,IAAzC,IAAiD,MAAMmE,OAAO,CAACC,GAAR,CAAY,CACvE,KAAKW,eAAL,EADuE,EAEvE,KAAKC,UAAL,EAFuE,EAGvE,KAAKlG,OAAL,CAAauB,GAAb,EAHuE,EAIvE4E,OAAO,CAAC,KAAKpD,SAAN,CAJgE,EAKvEoD,OAAO,CAAC,KAAKjF,IAAN,CALgE,CAAZ,CAA7D;AAOA,YAAMkF,IAAI,GAAGnD,MAAM,CAACmD,IAAP,GAAcrD,SAAd,GAA0B7B,IAAvC;AACA,aAAO;AACLmF,QAAAA,QAAQ,EAAE,KAAK7D,IADV;AAELwD,QAAAA,UAFK;AAGLhG,QAAAA,OAAO,EAAEA,OAHJ;AAILsG,QAAAA,UAAU,EAAErD,MAAM,CAACsD,KAJd;AAKLC,QAAAA,QAAQ,EAAEJ;AALL,OAAP;AAOD;;AACD,UAAMxE,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIgB,KAAJ,CAAU,6BAAV,CAA5B,EAAsErC,MAAM,CAACkF,wBAA7E,EAAuG;AAAEjD,MAAAA,IAAI,EAAE,KAAKA;AAAb,KAAvG,CAAN;AACD;;AAC4B,QAAvBoC,uBAAuB,GAAG;AAC9B,QAAI,KAAKjC,OAAL,CAAa8D,WAAb,KAA6BC,SAAjC,EAA4C;AAC1C,aAAO,KAAK/D,OAAL,CAAa8D,WAApB;AACD;;AACD,QAAIE,iBAAJ;;AACA,QAAI;AACFA,MAAAA,iBAAiB,GAAG,MAAM,KAAK1G,MAAL,CAAYsB,GAAZ,CAAgBc,uBAAhB,CAA1B;AACD,KAFD,CAEE,OAAOxB,CAAP,EAAU;AACV,UAAIA,CAAC,CAAC2E,IAAF,KAAWjF,MAAM,CAACqG,aAAP,CAAqBpB,IAApC,EAA0C;AACxCmB,QAAAA,iBAAiB,GAAG,IAApB;AACD,OAFD,MAEO;AACL,cAAM9F,CAAN;AACD;AACF;;AACD,WAAO8F,iBAAP;AACD;;AACa,QAAR9B,QAAQ,CAACgC,SAAD,EAAYnE,QAAZ,EAAsB;AAClC,UAAMoE,kBAAkB,GAAG,MAAM,KAAK9G,OAAL,CAAauB,GAAb,EAAjC;;AACA,QAAIuF,kBAAkB,GAAGD,SAAzB,EAAoC;AAClC5E,MAAAA,GAAG,CAAE,wBAAwB4E,SAAW,EAArC,CAAH;AACA,aAAOhF,mBAAmB,CAACkF,MAApB,CAA2B,KAAKvE,IAAhC,EAAsCE,QAAtC,EAAgD,KAAKC,OAArD,EAA8DkE,SAA9D,EAAyE;AAC9EG,QAAAA,UAAU,EAAE,IADkE;AAE9EC,QAAAA,UAAU,EAAE,KAAKtE,OAAL,CAAauE;AAFqD,OAAzE,CAAP;AAID,KAND,MAMO;AACLjF,MAAAA,GAAG,CAAE,wBAAwB4E,SAAW,EAArC,CAAH;AACA,aAAOhF,mBAAmB,CAACsF,OAApB,CAA4B,KAAK3E,IAAjC,EAAuCE,QAAvC,EAAiD,KAAKC,OAAtD,EAA+DkE,SAA/D,EAA0E;AAC/EG,QAAAA,UAAU,EAAE,IADmE;AAE/EC,QAAAA,UAAU,EAAE,KAAKtE,OAAL,CAAauE;AAFsD,OAA1E,CAAP;AAID;AACF;;AACoB,QAAfjB,eAAe,GAAG;AACtB,QAAI;AACF,YAAMmB,GAAG,GAAG,MAAM,KAAKnH,MAAL,CAAYsB,GAAZ,CAAgB,sBAAhB,CAAlB;AACA,aAAO8F,MAAM,CAACvF,cAAc,CAAC,SAAD,CAAd,CAA0BsF,GAA1B,CAAD,CAAb;AACD,KAHD,CAGE,OAAO/C,GAAP,EAAY;AACZ,aAAOgD,MAAM,CAACnF,OAAD,CAAb;AACD;AACF;;AACe,QAAVgE,UAAU,GAAG;AACjB,QAAIK,KAAK,GAAGc,MAAM,CAAC,CAAD,CAAlB;AACA,QAAIjB,IAAI,GAAGiB,MAAM,CAAC,CAAD,CAAjB;;AACA,QAAI,KAAKpE,MAAT,EAAiB;AACf,iBAAW,MAAM;AAACqE,QAAAA,GAAD;AAAM/H,QAAAA;AAAN,OAAjB,IAAiC,KAAK0D,MAAL,CAAYsE,KAAZ,CAAkB,EAAlB,CAAjC,EAAwD;AACtDhB,QAAAA,KAAK,IAAIc,MAAM,CAAC,CAAD,CAAf;AACAjB,QAAAA,IAAI,IAAIiB,MAAM,CAAC9H,KAAK,CAACiI,UAAP,CAAd;AACApB,QAAAA,IAAI,IAAIiB,MAAM,CAACC,GAAG,CAACzH,KAAJ,CAAU2H,UAAX,CAAd;AACD;AACF;;AACD,WAAO;AACLjB,MAAAA,KADK;AAELH,MAAAA;AAFK,KAAP;AAID;;AAhPQ;;AAkPX,eAAeD,OAAf,CAAuBpD,SAAvB,EAAkC;AAChC,MAAI0E,GAAG,GAAGJ,MAAM,CAAC,CAAD,CAAhB;;AACA,aAAW,MAAMK,KAAjB,IAA0B3E,SAAS,CAACwE,KAAV,CAAgB,EAAhB,CAA1B,EAA+C;AAC7CE,IAAAA,GAAG,IAAIJ,MAAM,CAACK,KAAK,CAACnI,KAAN,CAAYiI,UAAb,CAAb;AACAC,IAAAA,GAAG,IAAIJ,MAAM,CAACK,KAAK,CAACJ,GAAN,CAAUK,UAAV,GAAuBH,UAAxB,CAAb;AACD;;AACD,SAAOC,GAAP;AACD;;AACD,SAASG,UAAT,CAAoBpF,IAApB,EAA0BC,SAA1B,EAAqCC,QAArC,EAA+CC,OAA/C,EAAwD;AACtD,SAAO,IAAIL,IAAJ,CAASE,IAAT,EAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,OAApC,CAAP;AACD;;AACD,SAASmB,WAAT,CAAqB+D,OAArB,EAA8B;AAC5BA,EAAAA,OAAO,CAACC,SAAR,GAAoB1I,MAAM,CAAC2I,MAAP,CAAc,EAAd,EAAkBzH,gBAAlB,EAAoCoB,aAAa,CAAC,SAAD,CAAb,CAAyBmG,OAAzB,EAAkC,WAAlC,CAApC,CAApB;AACA,SAAOA,OAAP;AACD;;AACD,SAAS7D,kBAAT,CAA4B6D,OAA5B,EAAqC;AACnC,QAAM3H,IAAI,GAAG,EACX,GAAGI,gBAAgB,CAAC0H,IADT;AAEX,OAAGtG,aAAa,CAAC,SAAD,CAAb,CAAyBmG,OAAzB,EAAkC,gBAAlC;AAFQ,GAAb;AAIA,SAAO;AACLI,IAAAA,IAAI,EAAE/H,IAAI,CAAC+H,IADN;AAELC,IAAAA,MAAM,EAAEhI,IAAI,CAACgI,MAAL,CAAYrC,GAAZ,CAAgBsC,QAAQ,KAAK;AACnCC,MAAAA,UAAU,EAAED,QAAQ,CAACC,UADc;AAEnCH,MAAAA,IAAI,EAAEE,QAAQ,CAACE,KAAT,CAAeJ,IAFc;AAGnCzF,MAAAA,IAAI,EAAE2F,QAAQ,CAACE,KAAT,CAAe7F,IAHc;AAInC8F,MAAAA,SAAS,EAAEH,QAAQ,CAACE,KAAT,CAAeC;AAJS,KAAL,CAAxB;AAFH,GAAP;AASD;;AAEDhJ,OAAO,CAACsI,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _get = require('just-safe-get');\nvar debug = require('debug');\nvar errCode = require('err-code');\nvar migrator = require('ipfs-repo-migrations');\nvar bytes = require('bytes');\nvar merge = require('merge-options');\nvar constants = require('./constants.js');\nvar version = require('./version.js');\nvar config = require('./config.js');\nvar spec = require('./spec.js');\nvar apiAddr = require('./api-addr.js');\nvar idstore = require('./idstore.js');\nvar defaultOptions = require('./default-options.js');\nvar defaultDatastore = require('./default-datastore.js');\nvar errors = require('./errors.js');\nvar pinManager = require('./pin-manager.js');\nvar pinnedBlockstore = require('./pinned-blockstore.js');\nvar mortice = require('mortice');\nvar gc = require('./gc.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar _get__default = /*#__PURE__*/_interopDefaultLegacy(_get);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar migrator__namespace = /*#__PURE__*/_interopNamespace(migrator);\nvar bytes__default = /*#__PURE__*/_interopDefaultLegacy(bytes);\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\nvar mortice__default = /*#__PURE__*/_interopDefaultLegacy(mortice);\n\nconst log = debug__default[\"default\"]('ipfs:repo');\nconst noLimit = Number.MAX_SAFE_INTEGER;\nconst AUTO_MIGRATE_CONFIG_KEY = 'repoAutoMigrate';\nclass Repo {\n  constructor(path, loadCodec, backends, options) {\n    if (typeof path !== 'string') {\n      throw new Error('missing repo path');\n    }\n    if (typeof loadCodec !== 'function') {\n      throw new Error('missing codec loader');\n    }\n    this.options = merge__default[\"default\"](defaultOptions, options);\n    this.closed = true;\n    this.path = path;\n    this.root = backends.root;\n    this.datastore = backends.datastore;\n    this.keys = backends.keys;\n    const blockstore = backends.blocks;\n    const pinstore = backends.pins;\n    this.pins = new pinManager.PinManager({\n      pinstore,\n      blockstore,\n      loadCodec\n    });\n    const pinnedBlockstore$1 = pinnedBlockstore.createPinnedBlockstore(this.pins, blockstore);\n    this.blocks = idstore.createIdStore(pinnedBlockstore$1);\n    this.version = version.version(this.root);\n    this.config = config.config(this.root);\n    this.spec = spec.spec(this.root);\n    this.apiAddr = apiAddr.apiAddr(this.root);\n    this.gcLock = mortice__default[\"default\"](path, { singleProcess: this.options.repoOwner !== false });\n    this.gc = gc.gc({\n      gcLock: this.gcLock,\n      pins: this.pins,\n      blockstore: this.blocks,\n      root: this.root,\n      loadCodec\n    });\n  }\n  async init(config) {\n    log('initializing at: %s', this.path);\n    await this._openRoot();\n    await this.config.replace(buildConfig(config));\n    await this.spec.set(buildDatastoreSpec(config));\n    await this.version.set(constants.repoVersion);\n  }\n  async isInitialized() {\n    if (!this.closed) {\n      return true;\n    }\n    try {\n      await this._openRoot();\n      await this._checkInitialized();\n      await this.root.close();\n      return true;\n    } catch (err) {\n      return false;\n    }\n  }\n  async open() {\n    if (!this.closed) {\n      throw errCode__default[\"default\"](new Error('repo is already open'), errors.ERR_REPO_ALREADY_OPEN);\n    }\n    log('opening at: %s', this.path);\n    try {\n      await this._openRoot();\n      await this._checkInitialized();\n      this._lockfile = await this._openLock();\n      log('acquired repo.lock');\n      const isCompatible = await this.version.check(constants.repoVersion);\n      if (!isCompatible) {\n        if (await this._isAutoMigrationEnabled()) {\n          await this._migrate(constants.repoVersion, {\n            root: this.root,\n            datastore: this.datastore,\n            pins: this.pins.pinstore,\n            blocks: this.pins.blockstore,\n            keys: this.keys\n          });\n        } else {\n          throw new errors.InvalidRepoVersionError('Incompatible repo versions. Automatic migrations disabled. Please migrate the repo manually.');\n        }\n      }\n      log('creating datastore');\n      await this.datastore.open();\n      log('creating blocks');\n      await this.blocks.open();\n      log('creating keystore');\n      await this.keys.open();\n      log('creating pins');\n      await this.pins.pinstore.open();\n      this.closed = false;\n      log('all opened');\n    } catch (err) {\n      if (this._lockfile) {\n        try {\n          await this._closeLock();\n          this._lockfile = null;\n        } catch (err2) {\n          log('error removing lock', err2);\n        }\n      }\n      throw err;\n    }\n  }\n  async _openRoot() {\n    try {\n      await this.root.open();\n    } catch (err) {\n      if (err.message !== 'Already open') {\n        throw err;\n      }\n    }\n  }\n  async _openLock() {\n    const lockfile = await this.options.repoLock.lock(this.path);\n    if (typeof lockfile.close !== 'function') {\n      throw errCode__default[\"default\"](new Error('Locks must have a close method'), 'ERR_NO_CLOSE_FUNCTION');\n    }\n    return lockfile;\n  }\n  _closeLock() {\n    return this._lockfile && this._lockfile.close();\n  }\n  async _checkInitialized() {\n    log('init check');\n    let config;\n    try {\n      [config] = await Promise.all([\n        this.config.exists(),\n        this.spec.exists(),\n        this.version.exists()\n      ]);\n    } catch (err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, { path: this.path });\n      }\n      throw err;\n    }\n    if (!config) {\n      throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, { path: this.path });\n    }\n  }\n  async close() {\n    if (this.closed) {\n      throw errCode__default[\"default\"](new Error('repo is already closed'), errors.ERR_REPO_ALREADY_CLOSED);\n    }\n    log('closing at: %s', this.path);\n    try {\n      await this.apiAddr.delete();\n    } catch (err) {\n      if (err.code !== errors.ERR_REPO_NOT_INITIALIZED && !err.message.startsWith('ENOENT')) {\n        throw err;\n      }\n    }\n    await Promise.all([\n      this.root,\n      this.blocks,\n      this.keys,\n      this.datastore,\n      this.pins.pinstore\n    ].map(store => store && store.close()));\n    log('unlocking');\n    this.closed = true;\n    await this._closeLock();\n  }\n  exists() {\n    return this.version.exists();\n  }\n  async stat() {\n    if (this.datastore && this.keys) {\n      const [storageMax, blocks, version, datastore, keys] = await Promise.all([\n        this._storageMaxStat(),\n        this._blockStat(),\n        this.version.get(),\n        getSize(this.datastore),\n        getSize(this.keys)\n      ]);\n      const size = blocks.size + datastore + keys;\n      return {\n        repoPath: this.path,\n        storageMax,\n        version: version,\n        numObjects: blocks.count,\n        repoSize: size\n      };\n    }\n    throw errCode__default[\"default\"](new Error('repo is not initialized yet'), errors.ERR_REPO_NOT_INITIALIZED, { path: this.path });\n  }\n  async _isAutoMigrationEnabled() {\n    if (this.options.autoMigrate !== undefined) {\n      return this.options.autoMigrate;\n    }\n    let autoMigrateConfig;\n    try {\n      autoMigrateConfig = await this.config.get(AUTO_MIGRATE_CONFIG_KEY);\n    } catch (e) {\n      if (e.code === errors.NotFoundError.code) {\n        autoMigrateConfig = true;\n      } else {\n        throw e;\n      }\n    }\n    return autoMigrateConfig;\n  }\n  async _migrate(toVersion, backends) {\n    const currentRepoVersion = await this.version.get();\n    if (currentRepoVersion > toVersion) {\n      log(`reverting to version ${ toVersion }`);\n      return migrator__namespace.revert(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    } else {\n      log(`migrating to version ${ toVersion }`);\n      return migrator__namespace.migrate(this.path, backends, this.options, toVersion, {\n        ignoreLock: true,\n        onProgress: this.options.onMigrationProgress\n      });\n    }\n  }\n  async _storageMaxStat() {\n    try {\n      const max = await this.config.get('Datastore.StorageMax');\n      return BigInt(bytes__default[\"default\"](max));\n    } catch (err) {\n      return BigInt(noLimit);\n    }\n  }\n  async _blockStat() {\n    let count = BigInt(0);\n    let size = BigInt(0);\n    if (this.blocks) {\n      for await (const {key, value} of this.blocks.query({})) {\n        count += BigInt(1);\n        size += BigInt(value.byteLength);\n        size += BigInt(key.bytes.byteLength);\n      }\n    }\n    return {\n      count,\n      size\n    };\n  }\n}\nasync function getSize(datastore) {\n  let sum = BigInt(0);\n  for await (const block of datastore.query({})) {\n    sum += BigInt(block.value.byteLength);\n    sum += BigInt(block.key.uint8Array().byteLength);\n  }\n  return sum;\n}\nfunction createRepo(path, loadCodec, backends, options) {\n  return new Repo(path, loadCodec, backends, options);\n}\nfunction buildConfig(_config) {\n  _config.Datastore = Object.assign({}, defaultDatastore, _get__default[\"default\"](_config, 'datastore'));\n  return _config;\n}\nfunction buildDatastoreSpec(_config) {\n  const spec = {\n    ...defaultDatastore.Spec,\n    ..._get__default[\"default\"](_config, 'Datastore.Spec')\n  };\n  return {\n    type: spec.type,\n    mounts: spec.mounts.map(mounting => ({\n      mountpoint: mounting.mountpoint,\n      type: mounting.child.type,\n      path: mounting.child.path,\n      shardFunc: mounting.child.shardFunc\n    }))\n  };\n}\n\nexports.createRepo = createRepo;\n"]},"metadata":{},"sourceType":"script"}