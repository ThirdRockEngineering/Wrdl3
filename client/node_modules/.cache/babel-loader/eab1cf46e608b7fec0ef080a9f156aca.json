{"ast":null,"code":"'use strict';\n\nconst {\n  default: nativeFetch,\n  Headers\n} = require('native-fetch');\n/**\n * Build fetch resource for request.\n *\n * @param {object} properties\n * @param {string} properties.serverResolver\n * @param {string} properties.hostname\n * @param {string} properties.recordType\n * @returns {string}\n */\n\n\nfunction buildResource(_ref) {\n  let {\n    serverResolver,\n    hostname,\n    recordType\n  } = _ref;\n  return `${serverResolver}?name=${hostname}&type=${recordType}`;\n}\n/**\n * Use fetch to find the record.\n *\n * @param {object} resource\n * @returns {Promise}\n */\n\n\nfunction fetch(resource) {\n  return nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    })\n  });\n}\n/**\n * Creates cache key composed by recordType and hostname.\n *\n * @param {string} hostname\n * @param {string} recordType\n * @returns {string}\n */\n\n\nfunction getCacheKey(hostname, recordType) {\n  return `${recordType}_${hostname}`;\n}\n\nmodule.exports = {\n  buildResource,\n  fetch,\n  getCacheKey\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/dns-over-http-resolver/src/utils.js"],"names":["default","nativeFetch","Headers","require","buildResource","serverResolver","hostname","recordType","fetch","resource","headers","accept","getCacheKey","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA,OAAO,EAAEC,WAAX;AAAwBC,EAAAA;AAAxB,IAAoCC,OAAO,CAAC,cAAD,CAAjD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,OAAkE;AAAA,MAA1C;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAA0C;AAChE,SAAQ,GAAEF,cAAe,SAAQC,QAAS,SAAQC,UAAW,EAA7D;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,KAAT,CAAgBC,QAAhB,EAA0B;AACxB,SAAOR,WAAW,CAACQ,QAAD,EAAW;AAC3BC,IAAAA,OAAO,EAAE,IAAIR,OAAJ,CAAY;AACnBS,MAAAA,MAAM,EAAE;AADW,KAAZ;AADkB,GAAX,CAAlB;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAsBN,QAAtB,EAAgCC,UAAhC,EAA4C;AAC1C,SAAQ,GAAEA,UAAW,IAAGD,QAAS,EAAjC;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,aADe;AAEfI,EAAAA,KAFe;AAGfI,EAAAA;AAHe,CAAjB","sourcesContent":["'use strict'\n\nconst { default: nativeFetch, Headers } = require('native-fetch')\n\n/**\n * Build fetch resource for request.\n *\n * @param {object} properties\n * @param {string} properties.serverResolver\n * @param {string} properties.hostname\n * @param {string} properties.recordType\n * @returns {string}\n */\nfunction buildResource ({ serverResolver, hostname, recordType }) {\n  return `${serverResolver}?name=${hostname}&type=${recordType}`\n}\n\n/**\n * Use fetch to find the record.\n *\n * @param {object} resource\n * @returns {Promise}\n */\nfunction fetch (resource) {\n  return nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    })\n  })\n}\n\n/**\n * Creates cache key composed by recordType and hostname.\n *\n * @param {string} hostname\n * @param {string} recordType\n * @returns {string}\n */\nfunction getCacheKey (hostname, recordType) {\n  return `${recordType}_${hostname}`\n}\n\nmodule.exports = {\n  buildResource,\n  fetch,\n  getCacheKey\n}\n"]},"metadata":{},"sourceType":"script"}