{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errors = require('../errors.js');\n\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:repo:lock:memory');\nconst lockFile = 'repo.lock';\nconst LOCKS = {};\n\nasync function lock(dir) {\n  const file = dir + '/' + lockFile;\n  log('locking %s', file);\n\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${file}`);\n  }\n\n  LOCKS[file] = true;\n  const closer = {\n    async close() {\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n    }\n\n  };\n  return closer;\n}\n\nasync function locked(dir) {\n  const file = dir + '/' + lockFile;\n  log(`checking lock: ${file}`);\n  return Boolean(LOCKS[file]);\n}\n\nconst MemoryLock = {\n  lock,\n  locked\n};\nexports.MemoryLock = MemoryLock;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo/cjs/src/locks/memory.js"],"names":["Object","defineProperty","exports","value","errors","require","debug","_interopDefaultLegacy","e","debug__default","log","lockFile","LOCKS","lock","dir","file","LockExistsError","closer","close","locked","Boolean","MemoryLock"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,cAAD,CAApB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASE,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,cAAc,GAAG,aAAaF,qBAAqB,CAACD,KAAD,CAAvD;;AAEA,MAAMI,GAAG,GAAGD,cAAc,CAAC,SAAD,CAAd,CAA0B,uBAA1B,CAAZ;AACA,MAAME,QAAQ,GAAG,WAAjB;AACA,MAAMC,KAAK,GAAG,EAAd;;AACA,eAAeC,IAAf,CAAoBC,GAApB,EAAyB;AACvB,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYH,QAAzB;AACAD,EAAAA,GAAG,CAAC,YAAD,EAAeK,IAAf,CAAH;;AACA,MAAIH,KAAK,CAACG,IAAD,CAAL,KAAgB,IAApB,EAA0B;AACxB,UAAM,IAAIX,MAAM,CAACY,eAAX,CAA4B,qCAAqCD,IAAM,EAAvE,CAAN;AACD;;AACDH,EAAAA,KAAK,CAACG,IAAD,CAAL,GAAc,IAAd;AACA,QAAME,MAAM,GAAG;AACb,UAAMC,KAAN,GAAc;AACZ,UAAIN,KAAK,CAACG,IAAD,CAAT,EAAiB;AACf,eAAOH,KAAK,CAACG,IAAD,CAAZ;AACD;AACF;;AALY,GAAf;AAOA,SAAOE,MAAP;AACD;;AACD,eAAeE,MAAf,CAAsBL,GAAtB,EAA2B;AACzB,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYH,QAAzB;AACAD,EAAAA,GAAG,CAAE,kBAAkBK,IAAM,EAA1B,CAAH;AACA,SAAOK,OAAO,CAACR,KAAK,CAACG,IAAD,CAAN,CAAd;AACD;;AACD,MAAMM,UAAU,GAAG;AACjBR,EAAAA,IADiB;AAEjBM,EAAAA;AAFiB,CAAnB;AAKAjB,OAAO,CAACmB,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errors = require('../errors.js');\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:repo:lock:memory');\nconst lockFile = 'repo.lock';\nconst LOCKS = {};\nasync function lock(dir) {\n  const file = dir + '/' + lockFile;\n  log('locking %s', file);\n  if (LOCKS[file] === true) {\n    throw new errors.LockExistsError(`Lock already being held for file: ${ file }`);\n  }\n  LOCKS[file] = true;\n  const closer = {\n    async close() {\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n    }\n  };\n  return closer;\n}\nasync function locked(dir) {\n  const file = dir + '/' + lockFile;\n  log(`checking lock: ${ file }`);\n  return Boolean(LOCKS[file]);\n}\nconst MemoryLock = {\n  lock,\n  locked\n};\n\nexports.MemoryLock = MemoryLock;\n"]},"metadata":{},"sourceType":"script"}