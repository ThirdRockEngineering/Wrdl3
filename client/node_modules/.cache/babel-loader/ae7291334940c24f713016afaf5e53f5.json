{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar debug = require('debug');\n\nvar addLink = require('./add-link.js');\n\nvar dagPB = require('@ipld/dag-pb');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:update-tree');\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n\nasync function updateTree(context, trail, options) {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = dagPB.decode(block);\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      };\n      continue;\n    }\n\n    const result = await addLink.addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    });\n    child = {\n      cid: result.cid,\n      name,\n      size: result.size\n    };\n  }\n\n  const {\n    cid\n  } = child;\n  log(`Final CID ${cid}`);\n  return cid;\n}\n\nexports.updateTree = updateTree;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/files/utils/update-tree.js"],"names":["Object","defineProperty","exports","value","debug","require","addLink","dagPB","_interopDefaultLegacy","e","debug__default","log","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","assign","slice","reverse","index","child","block","repo","blocks","getMany","map","node","cid","decode","name","size","length","result","parent","flush","hashAlg","cidVersion"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,eAAD,CAArB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,cAAD,CAAnB;;AAEA,SAASG,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,cAAc,GAAG,aAAaF,qBAAqB,CAACJ,KAAD,CAAvD;;AAEA,MAAMO,GAAG,GAAGD,cAAc,CAAC,SAAD,CAAd,CAA0B,4BAA1B,CAAZ;AACA,MAAME,cAAc,GAAG;AAAEC,EAAAA,mBAAmB,EAAE;AAAvB,CAAvB;;AACA,eAAeC,UAAf,CAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,OAA1C,EAAmD;AACjDA,EAAAA,OAAO,GAAGjB,MAAM,CAACkB,MAAP,CAAc,EAAd,EAAkBN,cAAlB,EAAkCK,OAAlC,CAAV;AACAN,EAAAA,GAAG,CAAC,OAAD,EAAUK,KAAV,CAAH;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,GAAcC,OAAd,EAAR;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AACA,aAAW,MAAMC,KAAjB,IAA0BR,OAAO,CAACS,IAAR,CAAaC,MAAb,CAAoBC,OAApB,CAA4BV,KAAK,CAACW,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAA5B,CAA1B,EAAoF;AAClF,UAAMD,IAAI,GAAGrB,KAAK,CAACuB,MAAN,CAAaP,KAAb,CAAb;AACA,UAAMM,GAAG,GAAGb,KAAK,CAACK,KAAD,CAAL,CAAaQ,GAAzB;AACA,UAAME,IAAI,GAAGf,KAAK,CAACK,KAAD,CAAL,CAAaU,IAA1B;AACAV,IAAAA,KAAK;;AACL,QAAI,CAACC,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG;AACNO,QAAAA,GADM;AAENE,QAAAA,IAFM;AAGNC,QAAAA,IAAI,EAAET,KAAK,CAACU;AAHN,OAAR;AAKA;AACD;;AACD,UAAMC,MAAM,GAAG,MAAM5B,OAAO,CAACA,OAAR,CAAgBS,OAAhB,EAAyB;AAC5CoB,MAAAA,MAAM,EAAEP,IADoC;AAE5CG,MAAAA,IAAI,EAAET,KAAK,CAACS,IAFgC;AAG5CF,MAAAA,GAAG,EAAEP,KAAK,CAACO,GAHiC;AAI5CG,MAAAA,IAAI,EAAEV,KAAK,CAACU,IAJgC;AAK5CI,MAAAA,KAAK,EAAEnB,OAAO,CAACmB,KAL6B;AAM5CvB,MAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBANe;AAO5CwB,MAAAA,OAAO,EAAEpB,OAAO,CAACoB,OAP2B;AAQ5CC,MAAAA,UAAU,EAAErB,OAAO,CAACqB;AARwB,KAAzB,CAArB;AAUAhB,IAAAA,KAAK,GAAG;AACNO,MAAAA,GAAG,EAAEK,MAAM,CAACL,GADN;AAENE,MAAAA,IAFM;AAGNC,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAHP,KAAR;AAKD;;AACD,QAAM;AAACH,IAAAA;AAAD,MAAQP,KAAd;AACAX,EAAAA,GAAG,CAAE,aAAakB,GAAK,EAApB,CAAH;AACA,SAAOA,GAAP;AACD;;AAED3B,OAAO,CAACY,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar debug = require('debug');\nvar addLink = require('./add-link.js');\nvar dagPB = require('@ipld/dag-pb');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:update-tree');\nconst defaultOptions = { shardSplitThreshold: 1000 };\nasync function updateTree(context, trail, options) {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = dagPB.decode(block);\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      };\n      continue;\n    }\n    const result = await addLink.addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    });\n    child = {\n      cid: result.cid,\n      name,\n      size: result.size\n    };\n  }\n  const {cid} = child;\n  log(`Final CID ${ cid }`);\n  return cid;\n}\n\nexports.updateTree = updateTree;\n"]},"metadata":{},"sourceType":"script"}