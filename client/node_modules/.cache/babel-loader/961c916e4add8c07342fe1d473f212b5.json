{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Noise = void 0;\n\nconst x25519 = __importStar(require(\"@stablelib/x25519\"));\n\nconst it_pb_rpc_1 = __importDefault(require(\"it-pb-rpc\"));\n\nconst duplex_1 = __importDefault(require(\"it-pair/duplex\"));\n\nconst it_buffer_1 = __importDefault(require(\"it-buffer\"));\n\nconst it_pipe_1 = __importDefault(require(\"it-pipe\"));\n\nconst it_length_prefixed_1 = require(\"it-length-prefixed\");\n\nconst handshake_xx_1 = require(\"./handshake-xx\");\n\nconst handshake_ik_1 = require(\"./handshake-ik\");\n\nconst handshake_xx_fallback_1 = require(\"./handshake-xx-fallback\");\n\nconst utils_1 = require(\"./utils\");\n\nconst encoder_1 = require(\"./encoder\");\n\nconst crypto_1 = require(\"./crypto\");\n\nconst keycache_1 = require(\"./keycache\");\n\nconst logger_1 = require(\"./logger\");\n\nconst constants_1 = require(\"./constants\");\n\nclass Noise {\n  /**\n   *\n   * @param {bytes} staticNoiseKey - x25519 private key, reuse for faster handshakes\n   * @param {bytes} earlyData\n   */\n  constructor(staticNoiseKey, earlyData) {\n    this.protocol = '/noise';\n    this.prologue = new Uint8Array(0);\n    this.earlyData = earlyData !== null && earlyData !== void 0 ? earlyData : new Uint8Array(0); // disabled until properly specked\n\n    this.useNoisePipes = false;\n\n    if (staticNoiseKey) {\n      // accepts x25519 private key of length 32\n      const keyPair = x25519.generateKeyPairFromSeed(staticNoiseKey);\n      this.staticKeys = {\n        privateKey: keyPair.secretKey,\n        publicKey: keyPair.publicKey\n      };\n    } else {\n      this.staticKeys = (0, utils_1.generateKeypair)();\n    }\n  }\n  /**\n   * Encrypt outgoing data to the remote party (handshake as initiator)\n   *\n   * @param {PeerId} localPeer - PeerId of the receiving peer\n   * @param {any} connection - streaming iterable duplex that will be encrypted\n   * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n   * @returns {Promise<SecureOutbound>}\n   */\n\n\n  async secureOutbound(localPeer, connection, remotePeer) {\n    const wrappedConnection = (0, it_pb_rpc_1.default)(connection, {\n      lengthEncoder: encoder_1.uint16BEEncode,\n      lengthDecoder: encoder_1.uint16BEDecode,\n      maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES\n    });\n    const handshake = await this.performHandshake({\n      connection: wrappedConnection,\n      isInitiator: true,\n      localPeer,\n      remotePeer\n    });\n    const conn = await this.createSecureConnection(wrappedConnection, handshake);\n    return {\n      conn,\n      remoteEarlyData: handshake.remoteEarlyData,\n      remotePeer: handshake.remotePeer\n    };\n  }\n  /**\n   * Decrypt incoming data (handshake as responder).\n   *\n   * @param {PeerId} localPeer - PeerId of the receiving peer.\n   * @param {any} connection - streaming iterable duplex that will be encryption.\n   * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n   * @returns {Promise<SecureOutbound>}\n   */\n\n\n  async secureInbound(localPeer, connection, remotePeer) {\n    const wrappedConnection = (0, it_pb_rpc_1.default)(connection, {\n      lengthEncoder: encoder_1.uint16BEEncode,\n      lengthDecoder: encoder_1.uint16BEDecode,\n      maxDataLength: constants_1.NOISE_MSG_MAX_LENGTH_BYTES\n    });\n    const handshake = await this.performHandshake({\n      connection: wrappedConnection,\n      isInitiator: false,\n      localPeer,\n      remotePeer\n    });\n    const conn = await this.createSecureConnection(wrappedConnection, handshake);\n    return {\n      conn,\n      remoteEarlyData: handshake.remoteEarlyData,\n      remotePeer: handshake.remotePeer\n    };\n  }\n  /**\n   * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.\n   * If noise pipes disabled or remote peer static key is unknown, use XX.\n   *\n   * @param {HandshakeParams} params\n   */\n\n\n  async performHandshake(params) {\n    var _a;\n\n    const payload = await (0, utils_1.getPayload)(params.localPeer, this.staticKeys.publicKey, this.earlyData);\n    let tryIK = this.useNoisePipes;\n\n    if (params.isInitiator && keycache_1.KeyCache.load(params.remotePeer) === null) {\n      // if we are initiator and remote static key is unknown, don't try IK\n      tryIK = false;\n    } // Try IK if acting as responder or initiator that has remote's static key.\n\n\n    if (tryIK) {\n      // Try IK first\n      const {\n        remotePeer,\n        connection,\n        isInitiator\n      } = params;\n      const ikHandshake = new handshake_ik_1.IKHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, // safe to cast as we did checks\n      (_a = keycache_1.KeyCache.load(params.remotePeer)) !== null && _a !== void 0 ? _a : new Uint8Array(32), remotePeer);\n\n      try {\n        return await this.performIKHandshake(ikHandshake);\n      } catch (e) {\n        // IK failed, go to XX fallback\n        let ephemeralKeys;\n\n        if (params.isInitiator) {\n          ephemeralKeys = ikHandshake.getLocalEphemeralKeys();\n        }\n\n        return await this.performXXFallbackHandshake(params, payload, e.initialMsg, ephemeralKeys);\n      }\n    } else {\n      // run XX handshake\n      return await this.performXXHandshake(params, payload);\n    }\n  }\n\n  async performXXFallbackHandshake(params, payload, initialMsg, ephemeralKeys) {\n    const {\n      isInitiator,\n      remotePeer,\n      connection\n    } = params;\n    const handshake = new handshake_xx_fallback_1.XXFallbackHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, initialMsg, remotePeer, ephemeralKeys);\n\n    try {\n      await handshake.propose();\n      await handshake.exchange();\n      await handshake.finish();\n    } catch (e) {\n      (0, logger_1.logger)(e);\n      const err = e;\n      throw new Error(`Error occurred during XX Fallback handshake: ${err.message}`);\n    }\n\n    return handshake;\n  }\n\n  async performXXHandshake(params, payload) {\n    const {\n      isInitiator,\n      remotePeer,\n      connection\n    } = params;\n    const handshake = new handshake_xx_1.XXHandshake(isInitiator, payload, this.prologue, this.staticKeys, connection, remotePeer);\n\n    try {\n      await handshake.propose();\n      await handshake.exchange();\n      await handshake.finish();\n\n      if (this.useNoisePipes && handshake.remotePeer) {\n        keycache_1.KeyCache.store(handshake.remotePeer, handshake.getRemoteStaticKey());\n      }\n    } catch (e) {\n      const err = e;\n      throw new Error(`Error occurred during XX handshake: ${err.message}`);\n    }\n\n    return handshake;\n  }\n\n  async performIKHandshake(handshake) {\n    await handshake.stage0();\n    await handshake.stage1();\n    return handshake;\n  }\n\n  async createSecureConnection(connection, handshake) {\n    // Create encryption box/unbox wrapper\n    const [secure, user] = (0, duplex_1.default)();\n    const network = connection.unwrap();\n    await (0, it_pipe_1.default)(secure, // write to wrapper\n    it_buffer_1.default, // ensure any type of data is converted to buffer\n    (0, crypto_1.encryptStream)(handshake), // data is encrypted\n    (0, it_length_prefixed_1.encode)({\n      lengthEncoder: encoder_1.uint16BEEncode\n    }), // prefix with message length\n    network, // send to the remote peer\n    (0, it_length_prefixed_1.decode)({\n      lengthDecoder: encoder_1.uint16BEDecode\n    }), // read message length prefix\n    it_buffer_1.default, // ensure any type of data is converted to buffer\n    (0, crypto_1.decryptStream)(handshake), // decrypt the incoming data\n    secure // pipe to the wrapper\n    );\n    return user;\n  }\n\n}\n\nexports.Noise = Noise;","map":{"version":3,"mappings":"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","names":["Noise","constructor","staticNoiseKey","earlyData","Uint8Array","useNoisePipes","keyPair","x25519","generateKeyPairFromSeed","staticKeys","privateKey","secretKey","publicKey","secureOutbound","localPeer","connection","remotePeer","wrappedConnection","lengthEncoder","encoder_1","lengthDecoder","maxDataLength","constants_1","handshake","performHandshake","isInitiator","conn","createSecureConnection","remoteEarlyData","secureInbound","params","payload","tryIK","keycache_1","load","ikHandshake","handshake_ik_1","prologue","_a","performIKHandshake","e","ephemeralKeys","getLocalEphemeralKeys","performXXFallbackHandshake","initialMsg","performXXHandshake","handshake_xx_fallback_1","propose","exchange","finish","err","Error","message","handshake_xx_1","store","getRemoteStaticKey","stage0","stage1","secure","user","network","unwrap","it_buffer_1","exports"],"sourceRoot":"","sources":["../../src/noise.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}