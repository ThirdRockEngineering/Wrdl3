{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar events = require('events');\n\nvar stat = require('./stat.js');\n\nvar trackedMap = require('libp2p/src/metrics/tracked-map.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar trackedMap__default = /*#__PURE__*/_interopDefaultLegacy(trackedMap);\n\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals: [60 * 1000, 5 * 60 * 1000, 15 * 60 * 1000]\n};\n\nclass Stats extends events.EventEmitter {\n  constructor(libp2p) {\n    let initialCounters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    let _options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOptions;\n\n    super();\n    const options = Object.assign({}, defaultOptions, _options);\n\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n\n    this._initialCounters = initialCounters;\n    this._options = options;\n    this._enabled = this._options.enabled;\n    this._global = new stat.Stat(initialCounters, options);\n\n    this._global.on('update', stats => this.emit('update', stats));\n\n    this._peers = trackedMap__default[\"default\"]({\n      system: 'ipfs',\n      component: 'bitswap',\n      metric: 'stats-peers',\n      metrics: libp2p.metrics\n    });\n  }\n\n  enable() {\n    this._enabled = true;\n    this._options.enabled = true;\n\n    this._global.enable();\n  }\n\n  disable() {\n    this._enabled = false;\n    this._options.enabled = false;\n\n    this._global.disable();\n  }\n\n  stop() {\n    this._enabled = false;\n\n    this._global.stop();\n\n    for (const peerStat of this._peers) {\n      peerStat[1].stop();\n    }\n  }\n\n  get snapshot() {\n    return this._global.snapshot;\n  }\n\n  get movingAverages() {\n    return this._global.movingAverages;\n  }\n\n  forPeer(peerId) {\n    const peerIdStr = typeof peerId !== 'string' && peerId.toB58String ? peerId.toB58String() : `${peerId}`;\n    return this._peers.get(peerIdStr);\n  }\n\n  push(peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc);\n\n      if (peer) {\n        let peerStats = this._peers.get(peer);\n\n        if (!peerStats) {\n          peerStats = new stat.Stat(this._initialCounters, this._options);\n\n          this._peers.set(peer, peerStats);\n        }\n\n        peerStats.push(counter, inc);\n      }\n    }\n  }\n\n  disconnected(peer) {\n    const peerId = peer.toB58String();\n\n    const peerStats = this._peers.get(peerId);\n\n    if (peerStats) {\n      peerStats.stop();\n\n      this._peers.delete(peerId);\n    }\n  }\n\n}\n\nexports.Stats = Stats;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-bitswap/cjs/src/stats/index.js"],"names":["Object","defineProperty","exports","value","events","require","stat","trackedMap","_interopDefaultLegacy","e","trackedMap__default","defaultOptions","enabled","computeThrottleTimeout","computeThrottleMaxQueueSize","movingAverageIntervals","Stats","EventEmitter","constructor","libp2p","initialCounters","_options","options","assign","Error","_initialCounters","_enabled","_global","Stat","on","stats","emit","_peers","system","component","metric","metrics","enable","disable","stop","peerStat","snapshot","movingAverages","forPeer","peerId","peerIdStr","toB58String","get","push","peer","counter","inc","peerStats","set","disconnected","delete"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar events = require('events');\nvar stat = require('./stat.js');\nvar trackedMap = require('libp2p/src/metrics/tracked-map.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar trackedMap__default = /*#__PURE__*/_interopDefaultLegacy(trackedMap);\n\nconst defaultOptions = {\n  enabled: false,\n  computeThrottleTimeout: 1000,\n  computeThrottleMaxQueueSize: 1000,\n  movingAverageIntervals: [\n    60 * 1000,\n    5 * 60 * 1000,\n    15 * 60 * 1000\n  ]\n};\nclass Stats extends events.EventEmitter {\n  constructor(libp2p, initialCounters = [], _options = defaultOptions) {\n    super();\n    const options = Object.assign({}, defaultOptions, _options);\n    if (typeof options.computeThrottleTimeout !== 'number') {\n      throw new Error('need computeThrottleTimeout');\n    }\n    if (typeof options.computeThrottleMaxQueueSize !== 'number') {\n      throw new Error('need computeThrottleMaxQueueSize');\n    }\n    this._initialCounters = initialCounters;\n    this._options = options;\n    this._enabled = this._options.enabled;\n    this._global = new stat.Stat(initialCounters, options);\n    this._global.on('update', stats => this.emit('update', stats));\n    this._peers = trackedMap__default[\"default\"]({\n      system: 'ipfs',\n      component: 'bitswap',\n      metric: 'stats-peers',\n      metrics: libp2p.metrics\n    });\n  }\n  enable() {\n    this._enabled = true;\n    this._options.enabled = true;\n    this._global.enable();\n  }\n  disable() {\n    this._enabled = false;\n    this._options.enabled = false;\n    this._global.disable();\n  }\n  stop() {\n    this._enabled = false;\n    this._global.stop();\n    for (const peerStat of this._peers) {\n      peerStat[1].stop();\n    }\n  }\n  get snapshot() {\n    return this._global.snapshot;\n  }\n  get movingAverages() {\n    return this._global.movingAverages;\n  }\n  forPeer(peerId) {\n    const peerIdStr = typeof peerId !== 'string' && peerId.toB58String ? peerId.toB58String() : `${ peerId }`;\n    return this._peers.get(peerIdStr);\n  }\n  push(peer, counter, inc) {\n    if (this._enabled) {\n      this._global.push(counter, inc);\n      if (peer) {\n        let peerStats = this._peers.get(peer);\n        if (!peerStats) {\n          peerStats = new stat.Stat(this._initialCounters, this._options);\n          this._peers.set(peer, peerStats);\n        }\n        peerStats.push(counter, inc);\n      }\n    }\n  }\n  disconnected(peer) {\n    const peerId = peer.toB58String();\n    const peerStats = this._peers.get(peerId);\n    if (peerStats) {\n      peerStats.stop();\n      this._peers.delete(peerId);\n    }\n  }\n}\n\nexports.Stats = Stats;\n"]},"metadata":{},"sourceType":"script"}