{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar events = require('events');\n\nvar toString = require('uint8arrays/to-string');\n\nvar constants = require('./constants.js');\n\nvar index = require('./utils/index.js');\n\nconst unwantEvent = cid => `unwant:${toString.toString(cid.multihash.bytes, 'base64')}`;\n\nconst blockEvent = cid => `block:${toString.toString(cid.multihash.bytes, 'base64')}`;\n\nclass Notifications extends events.EventEmitter {\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(constants.maxListeners);\n    this._log = index.logger(peerId, 'notif');\n  }\n\n  hasBlock(cid, block) {\n    const event = blockEvent(cid);\n\n    this._log(event);\n\n    this.emit(event, block);\n  }\n\n  wantBlock(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n\n    this._log(`wantBlock:${cid}`);\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${cid} unwanted`));\n      };\n\n      const onBlock = data => {\n        this.removeListener(unwantEvt, onUnwant);\n        resolve(data);\n      };\n\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${cid} aborted`));\n        });\n      }\n    });\n  }\n\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n\n    this._log(event);\n\n    this.emit(event);\n  }\n\n}\n\nexports.Notifications = Notifications;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-bitswap/cjs/src/notifications.js"],"names":["Object","defineProperty","exports","value","events","require","toString","constants","index","unwantEvent","cid","multihash","bytes","blockEvent","Notifications","EventEmitter","constructor","peerId","setMaxListeners","maxListeners","_log","logger","hasBlock","block","event","emit","wantBlock","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","unwantBlock"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar events = require('events');\nvar toString = require('uint8arrays/to-string');\nvar constants = require('./constants.js');\nvar index = require('./utils/index.js');\n\nconst unwantEvent = cid => `unwant:${ toString.toString(cid.multihash.bytes, 'base64') }`;\nconst blockEvent = cid => `block:${ toString.toString(cid.multihash.bytes, 'base64') }`;\nclass Notifications extends events.EventEmitter {\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(constants.maxListeners);\n    this._log = index.logger(peerId, 'notif');\n  }\n  hasBlock(cid, block) {\n    const event = blockEvent(cid);\n    this._log(event);\n    this.emit(event, block);\n  }\n  wantBlock(cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n    this._log(`wantBlock:${ cid }`);\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${ cid } unwanted`));\n      };\n      const onBlock = data => {\n        this.removeListener(unwantEvt, onUnwant);\n        resolve(data);\n      };\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${ cid } aborted`));\n        });\n      }\n    });\n  }\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n    this._log(event);\n    this.emit(event);\n  }\n}\n\nexports.Notifications = Notifications;\n"]},"metadata":{},"sourceType":"script"}