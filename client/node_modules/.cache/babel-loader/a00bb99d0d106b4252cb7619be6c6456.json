{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar base = require('./base.js');\n\nvar key = require('interface-datastore/key');\n\nvar errors = require('./errors.js');\n\nclass MemoryDatastore extends base.BaseDatastore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n\n  async put(key, val) {\n    this.data[key.toString()] = val;\n  }\n\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists) throw errors.notFoundError();\n    return this.data[key.toString()];\n  }\n\n  async has(key) {\n    return this.data[key.toString()] !== undefined;\n  }\n\n  async delete(key) {\n    delete this.data[key.toString()];\n  }\n\n  async *_all() {\n    yield* Object.entries(this.data).map(_ref => {\n      let [key$1, value] = _ref;\n      return {\n        key: new key.Key(key$1),\n        value\n      };\n    });\n  }\n\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(_ref2 => {\n      let [key$1] = _ref2;\n      return new key.Key(key$1);\n    });\n  }\n\n}\n\nexports.MemoryDatastore = MemoryDatastore;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/datastore-core/cjs/src/memory.js"],"names":["Object","defineProperty","exports","value","base","require","key","errors","MemoryDatastore","BaseDatastore","constructor","data","open","Promise","resolve","close","put","val","toString","get","exists","has","notFoundError","undefined","delete","_all","entries","map","key$1","Key","_allKeys"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,WAAD,CAAlB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,yBAAD,CAAjB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,aAAD,CAApB;;AAEA,MAAMG,eAAN,SAA8BJ,IAAI,CAACK,aAAnC,CAAiD;AAC/CC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AACDC,EAAAA,IAAI,GAAG;AACL,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AACDC,EAAAA,KAAK,GAAG;AACN,WAAOF,OAAO,CAACC,OAAR,EAAP;AACD;;AACQ,QAAHE,GAAG,CAACV,GAAD,EAAMW,GAAN,EAAW;AAClB,SAAKN,IAAL,CAAUL,GAAG,CAACY,QAAJ,EAAV,IAA4BD,GAA5B;AACD;;AACQ,QAAHE,GAAG,CAACb,GAAD,EAAM;AACb,UAAMc,MAAM,GAAG,MAAM,KAAKC,GAAL,CAASf,GAAT,CAArB;AACA,QAAI,CAACc,MAAL,EACE,MAAMb,MAAM,CAACe,aAAP,EAAN;AACF,WAAO,KAAKX,IAAL,CAAUL,GAAG,CAACY,QAAJ,EAAV,CAAP;AACD;;AACQ,QAAHG,GAAG,CAACf,GAAD,EAAM;AACb,WAAO,KAAKK,IAAL,CAAUL,GAAG,CAACY,QAAJ,EAAV,MAA8BK,SAArC;AACD;;AACW,QAANC,MAAM,CAAClB,GAAD,EAAM;AAChB,WAAO,KAAKK,IAAL,CAAUL,GAAG,CAACY,QAAJ,EAAV,CAAP;AACD;;AACU,SAAJO,IAAI,GAAG;AACZ,WAAOzB,MAAM,CAAC0B,OAAP,CAAe,KAAKf,IAApB,EAA0BgB,GAA1B,CAA8B;AAAA,UAAC,CAACC,KAAD,EAAQzB,KAAR,CAAD;AAAA,aAAqB;AACxDG,QAAAA,GAAG,EAAE,IAAIA,GAAG,CAACuB,GAAR,CAAYD,KAAZ,CADmD;AAExDzB,QAAAA;AAFwD,OAArB;AAAA,KAA9B,CAAP;AAID;;AACc,SAAR2B,QAAQ,GAAG;AAChB,WAAO9B,MAAM,CAAC0B,OAAP,CAAe,KAAKf,IAApB,EAA0BgB,GAA1B,CAA8B;AAAA,UAAC,CAACC,KAAD,CAAD;AAAA,aAAa,IAAItB,GAAG,CAACuB,GAAR,CAAYD,KAAZ,CAAb;AAAA,KAA9B,CAAP;AACD;;AAlC8C;;AAqCjD1B,OAAO,CAACM,eAAR,GAA0BA,eAA1B","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\nvar key = require('interface-datastore/key');\nvar errors = require('./errors.js');\n\nclass MemoryDatastore extends base.BaseDatastore {\n  constructor() {\n    super();\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n  async put(key, val) {\n    this.data[key.toString()] = val;\n  }\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists)\n      throw errors.notFoundError();\n    return this.data[key.toString()];\n  }\n  async has(key) {\n    return this.data[key.toString()] !== undefined;\n  }\n  async delete(key) {\n    delete this.data[key.toString()];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key$1, value]) => ({\n      key: new key.Key(key$1),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key$1]) => new key.Key(key$1));\n  }\n}\n\nexports.MemoryDatastore = MemoryDatastore;\n"]},"metadata":{},"sourceType":"script"}