{"ast":null,"code":"'use strict';\n\nconst pushable = require('it-pushable');\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\n\n\nconst merge = async function* () {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  const output = pushable();\n  setTimeout(async () => {\n    try {\n      await Promise.all(sources.map(async source => {\n        for await (const item of source) {\n          output.push(item);\n        }\n      }));\n      output.end();\n    } catch (\n    /** @type {any} */\n    err) {\n      output.end(err);\n    }\n  }, 0);\n  yield* output;\n};\n\nmodule.exports = merge;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/it-merge/index.js"],"names":["pushable","require","merge","sources","output","setTimeout","Promise","all","map","source","item","push","end","err","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,KAAK,GAAG,mBAA8B;AAAA,oCAATC,OAAS;AAATA,IAAAA,OAAS;AAAA;;AAC1C,QAAMC,MAAM,GAAGJ,QAAQ,EAAvB;AAEAK,EAAAA,UAAU,CAAC,YAAY;AACrB,QAAI;AACF,YAAMC,OAAO,CAACC,GAAR,CACJJ,OAAO,CAACK,GAAR,CAAY,MAAOC,MAAP,IAAkB;AAC5B,mBAAW,MAAMC,IAAjB,IAAyBD,MAAzB,EAAiC;AAC/BL,UAAAA,MAAM,CAACO,IAAP,CAAYD,IAAZ;AACD;AACF,OAJD,CADI,CAAN;AAQAN,MAAAA,MAAM,CAACQ,GAAP;AACD,KAVD,CAUE;AAAO;AAAmBC,IAAAA,GAA1B,EAA+B;AAC/BT,MAAAA,MAAM,CAACQ,GAAP,CAAWC,GAAX;AACD;AACF,GAdS,EAcP,CAdO,CAAV;AAgBA,SAAQT,MAAR;AACD,CApBD;;AAsBAU,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["'use strict'\n\nconst pushable = require('it-pushable')\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n *\n * @template T\n * @param {...AsyncIterable<T>|Iterable<T>} sources\n * @returns {AsyncIterable<T>}\n */\nconst merge = async function * (...sources) {\n  const output = pushable()\n\n  setTimeout(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (/** @type {any} */ err) {\n      output.end(err)\n    }\n  }, 0)\n\n  yield * output\n}\n\nmodule.exports = merge\n"]},"metadata":{},"sourceType":"script"}