{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPeers(_ref) {\n  let {\n    network\n  } = _ref;\n\n  async function peers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n    const peers = [];\n\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        };\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = [];\n        }\n\n        peers.push(peer);\n      }\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption.withTimeoutOption(peers);\n}\n\nexports.createPeers = createPeers;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/swarm/peers.js"],"names":["Object","defineProperty","exports","value","withTimeoutOption","require","createPeers","network","peers","options","libp2p","use","peerId","connections","connection","peer","addr","remoteAddr","verbose","direction","stat","muxer","multiplexer","latency","streams","push"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASC,WAAT,OAAgC;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;;AAC9B,iBAAeC,KAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAM;AAACC,MAAAA;AAAD,QAAW,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAvB;AACA,UAAMD,KAAK,GAAG,EAAd;;AACA,SAAK,MAAM,CAACI,MAAD,EAASC,WAAT,CAAX,IAAoCH,MAAM,CAACG,WAA3C,EAAwD;AACtD,WAAK,MAAMC,UAAX,IAAyBD,WAAzB,EAAsC;AACpC,cAAME,IAAI,GAAG;AACXC,UAAAA,IAAI,EAAEF,UAAU,CAACG,UADN;AAEXF,UAAAA,IAAI,EAAEH;AAFK,SAAb;;AAIA,YAAIH,OAAO,CAACS,OAAR,IAAmBT,OAAO,CAACU,SAA/B,EAA0C;AACxCJ,UAAAA,IAAI,CAACI,SAAL,GAAiBL,UAAU,CAACM,IAAX,CAAgBD,SAAjC;AACD;;AACD,YAAIV,OAAO,CAACS,OAAZ,EAAqB;AACnBH,UAAAA,IAAI,CAACM,KAAL,GAAaP,UAAU,CAACM,IAAX,CAAgBE,WAA7B;AACAP,UAAAA,IAAI,CAACQ,OAAL,GAAe,KAAf;AACAR,UAAAA,IAAI,CAACS,OAAL,GAAe,EAAf;AACD;;AACDhB,QAAAA,KAAK,CAACiB,IAAN,CAAWV,IAAX;AACD;AACF;;AACD,WAAOP,KAAP;AACD;;AACD,SAAOJ,iBAAiB,CAACA,iBAAlB,CAAoCI,KAApC,CAAP;AACD;;AAEDN,OAAO,CAACI,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPeers({network}) {\n  async function peers(options = {}) {\n    const {libp2p} = await network.use(options);\n    const peers = [];\n    for (const [peerId, connections] of libp2p.connections) {\n      for (const connection of connections) {\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        };\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = [];\n        }\n        peers.push(peer);\n      }\n    }\n    return peers;\n  }\n  return withTimeoutOption.withTimeoutOption(peers);\n}\n\nexports.createPeers = createPeers;\n"]},"metadata":{},"sourceType":"script"}