{"ast":null,"code":"'use strict';\n\nvar mergeOptions = require('merge-options');\n\nvar sha2 = require('multiformats/hashes/sha2');\n\nvar murmur3 = require('@multiformats/murmur3');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar mergeOptions__default = /*#__PURE__*/_interopDefaultLegacy(mergeOptions);\n\nasync function hamtHashFn(buf) {\n  return (await murmur3.murmur3128.encode(buf)).slice(0, 8).reverse();\n}\n\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha2.sha256,\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763652,\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 34,\n  hamtBucketBits: 8\n};\n\nvar defaultOptions$1 = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const defaults = mergeOptions__default['default'].bind({\n    ignoreUndefined: true\n  });\n  return defaults(defaultOptions, options);\n};\n\nmodule.exports = defaultOptions$1;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-unixfs-importer/cjs/src/options.js"],"names":["mergeOptions","require","sha2","murmur3","_interopDefaultLegacy","e","mergeOptions__default","hamtHashFn","buf","murmur3128","encode","slice","reverse","defaultOptions","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","hasher","sha256","leafType","cidVersion","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","recursive","hidden","timeout","undefined","hamtHashCode","hamtBucketBits","defaultOptions$1","options","defaults","bind","ignoreUndefined","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,0BAAD,CAAlB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAArB;;AAEA,SAASG,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,qBAAqB,GAAG,aAAaF,qBAAqB,CAACJ,YAAD,CAA9D;;AAEA,eAAeO,UAAf,CAA0BC,GAA1B,EAA+B;AAC7B,SAAO,CAAC,MAAML,OAAO,CAACM,UAAR,CAAmBC,MAAnB,CAA0BF,GAA1B,CAAP,EAAuCG,KAAvC,CAA6C,CAA7C,EAAgD,CAAhD,EAAmDC,OAAnD,EAAP;AACD;;AACD,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,OADY;AAErBC,EAAAA,QAAQ,EAAE,UAFW;AAGrBC,EAAAA,SAAS,EAAE,KAHU;AAIrBC,EAAAA,QAAQ,EAAE,KAJW;AAKrBC,EAAAA,sBAAsB,EAAE,IALH;AAMrBC,EAAAA,MAAM,EAAEjB,IAAI,CAACkB,MANQ;AAOrBC,EAAAA,QAAQ,EAAE,MAPW;AAQrBC,EAAAA,UAAU,EAAE,CARS;AASrBC,EAAAA,QAAQ,EAAE,MAAM,MAAM,CACrB,CAVoB;AAWrBC,EAAAA,mBAAmB,EAAE,IAXA;AAYrBC,EAAAA,qBAAqB,EAAE,EAZF;AAarBC,EAAAA,qBAAqB,EAAE,EAbF;AAcrBC,EAAAA,YAAY,EAAE,MAdO;AAerBC,EAAAA,YAAY,EAAE,MAfO;AAgBrBC,EAAAA,YAAY,EAAE,MAhBO;AAiBrBC,EAAAA,MAAM,EAAE,EAjBa;AAkBrBC,EAAAA,UAAU,EAAE,iBAlBS;AAmBrBC,EAAAA,kBAAkB,EAAE,GAnBC;AAoBrBC,EAAAA,WAAW,EAAE,CApBQ;AAqBrBC,EAAAA,iBAAiB,EAAE,KArBE;AAsBrBC,EAAAA,SAAS,EAAE,KAtBU;AAuBrBC,EAAAA,MAAM,EAAE,KAvBa;AAwBrBC,EAAAA,OAAO,EAAEC,SAxBY;AAyBrB/B,EAAAA,UAzBqB;AA0BrBgC,EAAAA,YAAY,EAAE,EA1BO;AA2BrBC,EAAAA,cAAc,EAAE;AA3BK,CAAvB;;AA6BA,IAAIC,gBAAgB,GAAG,YAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AACvC,QAAMC,QAAQ,GAAGrC,qBAAqB,CAAC,SAAD,CAArB,CAAiCsC,IAAjC,CAAsC;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAtC,CAAjB;AACA,SAAOF,QAAQ,CAAC9B,cAAD,EAAiB6B,OAAjB,CAAf;AACD,CAHD;;AAKAI,MAAM,CAACC,OAAP,GAAiBN,gBAAjB","sourcesContent":["'use strict';\n\nvar mergeOptions = require('merge-options');\nvar sha2 = require('multiformats/hashes/sha2');\nvar murmur3 = require('@multiformats/murmur3');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar mergeOptions__default = /*#__PURE__*/_interopDefaultLegacy(mergeOptions);\n\nasync function hamtHashFn(buf) {\n  return (await murmur3.murmur3128.encode(buf)).slice(0, 8).reverse();\n}\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha2.sha256,\n  leafType: 'file',\n  cidVersion: 0,\n  progress: () => () => {\n  },\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763652,\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 34,\n  hamtBucketBits: 8\n};\nvar defaultOptions$1 = (options = {}) => {\n  const defaults = mergeOptions__default['default'].bind({ ignoreUndefined: true });\n  return defaults(defaultOptions, options);\n};\n\nmodule.exports = defaultOptions$1;\n"]},"metadata":{},"sourceType":"script"}