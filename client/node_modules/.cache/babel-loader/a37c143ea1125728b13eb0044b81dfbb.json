{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar ipfsRepo = require('ipfs-repo');\n\nvar datastoreLevel = require('datastore-level');\n\nvar blockstoreDatastoreAdapter = require('blockstore-datastore-adapter');\n\nvar memory = require('ipfs-repo/locks/memory');\n\nfunction createRepo(print, codecs, options) {\n  const repoPath = options.path || 'ipfs';\n  return ipfsRepo.createRepo(repoPath, codeOrName => codecs.getCodec(codeOrName), {\n    root: new datastoreLevel.LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new blockstoreDatastoreAdapter.BlockstoreDatastoreAdapter(new datastoreLevel.LevelDatastore(`${repoPath}/blocks`, {\n      prefix: '',\n      version: 2\n    })),\n    datastore: new datastoreLevel.LevelDatastore(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new datastoreLevel.LevelDatastore(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new datastoreLevel.LevelDatastore(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: memory.MemoryLock\n  });\n}\n\nexports.createRepo = createRepo;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core-config/cjs/src/repo.browser.js"],"names":["Object","defineProperty","exports","value","ipfsRepo","require","datastoreLevel","blockstoreDatastoreAdapter","memory","createRepo","print","codecs","options","repoPath","path","codeOrName","getCodec","root","LevelDatastore","prefix","version","blocks","BlockstoreDatastoreAdapter","datastore","keys","pins","autoMigrate","onMigrationProgress","repoLock","MemoryLock"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAIE,0BAA0B,GAAGF,OAAO,CAAC,8BAAD,CAAxC;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,wBAAD,CAApB;;AAEA,SAASI,UAAT,CAAoBC,KAApB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4C;AAC1C,QAAMC,QAAQ,GAAGD,OAAO,CAACE,IAAR,IAAgB,MAAjC;AACA,SAAOV,QAAQ,CAACK,UAAT,CAAoBI,QAApB,EAA8BE,UAAU,IAAIJ,MAAM,CAACK,QAAP,CAAgBD,UAAhB,CAA5C,EAAyE;AAC9EE,IAAAA,IAAI,EAAE,IAAIX,cAAc,CAACY,cAAnB,CAAkCL,QAAlC,EAA4C;AAChDM,MAAAA,MAAM,EAAE,EADwC;AAEhDC,MAAAA,OAAO,EAAE;AAFuC,KAA5C,CADwE;AAK9EC,IAAAA,MAAM,EAAE,IAAId,0BAA0B,CAACe,0BAA/B,CAA0D,IAAIhB,cAAc,CAACY,cAAnB,CAAmC,GAAGL,QAAU,SAAhD,EAA0D;AAC1HM,MAAAA,MAAM,EAAE,EADkH;AAE1HC,MAAAA,OAAO,EAAE;AAFiH,KAA1D,CAA1D,CALsE;AAS9EG,IAAAA,SAAS,EAAE,IAAIjB,cAAc,CAACY,cAAnB,CAAmC,GAAGL,QAAU,YAAhD,EAA6D;AACtEM,MAAAA,MAAM,EAAE,EAD8D;AAEtEC,MAAAA,OAAO,EAAE;AAF6D,KAA7D,CATmE;AAa9EI,IAAAA,IAAI,EAAE,IAAIlB,cAAc,CAACY,cAAnB,CAAmC,GAAGL,QAAU,OAAhD,EAAwD;AAC5DM,MAAAA,MAAM,EAAE,EADoD;AAE5DC,MAAAA,OAAO,EAAE;AAFmD,KAAxD,CAbwE;AAiB9EK,IAAAA,IAAI,EAAE,IAAInB,cAAc,CAACY,cAAnB,CAAmC,GAAGL,QAAU,OAAhD,EAAwD;AAC5DM,MAAAA,MAAM,EAAE,EADoD;AAE5DC,MAAAA,OAAO,EAAE;AAFmD,KAAxD;AAjBwE,GAAzE,EAqBJ;AACDM,IAAAA,WAAW,EAAEd,OAAO,CAACc,WADpB;AAEDC,IAAAA,mBAAmB,EAAEf,OAAO,CAACe,mBAAR,IAA+BjB,KAFnD;AAGDkB,IAAAA,QAAQ,EAAEpB,MAAM,CAACqB;AAHhB,GArBI,CAAP;AA0BD;;AAED3B,OAAO,CAACO,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ipfsRepo = require('ipfs-repo');\nvar datastoreLevel = require('datastore-level');\nvar blockstoreDatastoreAdapter = require('blockstore-datastore-adapter');\nvar memory = require('ipfs-repo/locks/memory');\n\nfunction createRepo(print, codecs, options) {\n  const repoPath = options.path || 'ipfs';\n  return ipfsRepo.createRepo(repoPath, codeOrName => codecs.getCodec(codeOrName), {\n    root: new datastoreLevel.LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new blockstoreDatastoreAdapter.BlockstoreDatastoreAdapter(new datastoreLevel.LevelDatastore(`${ repoPath }/blocks`, {\n      prefix: '',\n      version: 2\n    })),\n    datastore: new datastoreLevel.LevelDatastore(`${ repoPath }/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new datastoreLevel.LevelDatastore(`${ repoPath }/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new datastoreLevel.LevelDatastore(`${ repoPath }/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: memory.MemoryLock\n  });\n}\n\nexports.createRepo = createRepo;\n"]},"metadata":{},"sourceType":"script"}