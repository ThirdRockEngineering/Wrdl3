{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar multiaddr = require('multiaddr');\n\nfunction createClear(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  async function clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const config = await repo.config.getAll(options);\n    const removed = config.Bootstrap || [];\n    config.Bootstrap = [];\n    await repo.config.replace(config);\n    return {\n      Peers: removed.map(ma => new multiaddr.Multiaddr(ma))\n    };\n  }\n\n  return withTimeoutOption.withTimeoutOption(clear);\n}\n\nexports.createClear = createClear;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/bootstrap/clear.js"],"names":["Object","defineProperty","exports","value","withTimeoutOption","require","multiaddr","createClear","repo","clear","options","config","getAll","removed","Bootstrap","replace","Peers","map","ma","Multiaddr"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,qCAAD,CAA/B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASE,WAAT,OAA6B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;;AAC3B,iBAAeC,KAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,MAAM,GAAG,MAAMH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;AACA,UAAMG,OAAO,GAAGF,MAAM,CAACG,SAAP,IAAoB,EAApC;AACAH,IAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;AACA,UAAMN,IAAI,CAACG,MAAL,CAAYI,OAAZ,CAAoBJ,MAApB,CAAN;AACA,WAAO;AAAEK,MAAAA,KAAK,EAAEH,OAAO,CAACI,GAAR,CAAYC,EAAE,IAAI,IAAIZ,SAAS,CAACa,SAAd,CAAwBD,EAAxB,CAAlB;AAAT,KAAP;AACD;;AACD,SAAOd,iBAAiB,CAACA,iBAAlB,CAAoCK,KAApC,CAAP;AACD;;AAEDP,OAAO,CAACK,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar multiaddr = require('multiaddr');\n\nfunction createClear({repo}) {\n  async function clear(options = {}) {\n    const config = await repo.config.getAll(options);\n    const removed = config.Bootstrap || [];\n    config.Bootstrap = [];\n    await repo.config.replace(config);\n    return { Peers: removed.map(ma => new multiaddr.Multiaddr(ma)) };\n  }\n  return withTimeoutOption.withTimeoutOption(clear);\n}\n\nexports.createClear = createClear;\n"]},"metadata":{},"sourceType":"script"}