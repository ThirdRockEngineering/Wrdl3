{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('../../src/utils.js');\n\nvar fromString = require('uint8arrays/from-string');\n\nvar toString = require('uint8arrays/to-string');\n\nasync function keysToBinary(name, store) {\n  let onProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  const db = utils.findLevelJs(store);\n\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`);\n    return;\n  }\n\n  onProgress(`Upgrading ${name}`);\n\n  const upgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: fromString.fromString(key),\n      value: value\n    }];\n  };\n\n  await withEach(db, upgrade);\n}\n\nasync function keysToStrings(name, store) {\n  let onProgress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  const db = utils.findLevelJs(store);\n\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`);\n    return;\n  }\n\n  onProgress(`Downgrading ${name}`);\n\n  const downgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: toString.toString(key),\n      value: value\n    }];\n  };\n\n  await withEach(db, downgrade);\n}\n\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n\n  return store;\n}\n\nasync function process(backends, onProgress, fn) {\n  const datastores = Object.entries(backends).map(_ref => {\n    let [key, backend] = _ref;\n    return {\n      key,\n      backend: unwrap(backend)\n    };\n  }).filter(_ref2 => {\n    let {\n      key,\n      backend\n    } = _ref2;\n    return backend.constructor.name === 'LevelDatastore';\n  }).map(_ref3 => {\n    let {\n      key,\n      backend\n    } = _ref3;\n    return {\n      name: key,\n      store: backend\n    };\n  });\n  onProgress(0, `Migrating ${datastores.length} dbs`);\n  let migrated = 0;\n\n  const progress = message => {\n    onProgress(Math.round(migrated / datastores.length * 100), message);\n  };\n\n  for (const {\n    name,\n    store\n  } of datastores) {\n    await store.open();\n\n    try {\n      await fn(name, store, progress);\n    } finally {\n      migrated++;\n      await store.close();\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`);\n}\n\nconst migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keysToStrings);\n  }\n};\n\nfunction withEach(db, fn) {\n  function batch(operations, next) {\n    const store = db.store('readwrite');\n    const transaction = store.transaction;\n    let index = 0;\n    let error;\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));\n\n    transaction.oncomplete = () => next();\n\n    function loop() {\n      const op = operations[index++];\n      const key = op.key;\n      let req;\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch (err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n\n    loop();\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator();\n\n    const id = data => data;\n\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n\n    function next() {\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          const handleEnd = err2 => {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n\n            resolve();\n          };\n\n          it.end(handleEnd);\n          return;\n        }\n\n        batch(fn(key, value), next);\n      };\n\n      it.next(handleNext);\n    }\n  });\n}\n\nexports.migration = migration;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo-migrations/cjs/migrations/migration-10/index.js"],"names":["Object","defineProperty","exports","value","utils","require","fromString","toString","keysToBinary","name","store","onProgress","db","findLevelJs","upgrade","key","type","withEach","keysToStrings","downgrade","unwrap","child","process","backends","fn","datastores","entries","map","backend","filter","constructor","length","migrated","progress","message","Math","round","open","close","migration","version","description","migrate","revert","batch","operations","next","transaction","index","error","onabort","Error","oncomplete","loop","op","req","delete","put","err","abort","onsuccess","Promise","resolve","reject","it","iterator","id","data","_deserializeKey","_deserializeValue","handleNext","undefined","handleEnd","err2","end"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('../../src/utils.js');\nvar fromString = require('uint8arrays/from-string');\nvar toString = require('uint8arrays/to-string');\n\nasync function keysToBinary(name, store, onProgress = () => {\n}) {\n  const db = utils.findLevelJs(store);\n  if (!db) {\n    onProgress(`${ name } did not need an upgrade`);\n    return;\n  }\n  onProgress(`Upgrading ${ name }`);\n  const upgrade = (key, value) => {\n    return [\n      {\n        type: 'del',\n        key: key\n      },\n      {\n        type: 'put',\n        key: fromString.fromString(key),\n        value: value\n      }\n    ];\n  };\n  await withEach(db, upgrade);\n}\nasync function keysToStrings(name, store, onProgress = () => {\n}) {\n  const db = utils.findLevelJs(store);\n  if (!db) {\n    onProgress(`${ name } did not need a downgrade`);\n    return;\n  }\n  onProgress(`Downgrading ${ name }`);\n  const downgrade = (key, value) => {\n    return [\n      {\n        type: 'del',\n        key: key\n      },\n      {\n        type: 'put',\n        key: toString.toString(key),\n        value: value\n      }\n    ];\n  };\n  await withEach(db, downgrade);\n}\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n  return store;\n}\nasync function process(backends, onProgress, fn) {\n  const datastores = Object.entries(backends).map(([key, backend]) => ({\n    key,\n    backend: unwrap(backend)\n  })).filter(({key, backend}) => backend.constructor.name === 'LevelDatastore').map(({key, backend}) => ({\n    name: key,\n    store: backend\n  }));\n  onProgress(0, `Migrating ${ datastores.length } dbs`);\n  let migrated = 0;\n  const progress = message => {\n    onProgress(Math.round(migrated / datastores.length * 100), message);\n  };\n  for (const {name, store} of datastores) {\n    await store.open();\n    try {\n      await fn(name, store, progress);\n    } finally {\n      migrated++;\n      await store.close();\n    }\n  }\n  onProgress(100, `Migrated ${ datastores.length } dbs`);\n}\nconst migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, keysToStrings);\n  }\n};\nfunction withEach(db, fn) {\n  function batch(operations, next) {\n    const store = db.store('readwrite');\n    const transaction = store.transaction;\n    let index = 0;\n    let error;\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));\n    transaction.oncomplete = () => next();\n    function loop() {\n      const op = operations[index++];\n      const key = op.key;\n      let req;\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch (err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n    loop();\n  }\n  return new Promise((resolve, reject) => {\n    const it = db.iterator();\n    const id = data => data;\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n    function next() {\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          const handleEnd = err2 => {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n            resolve();\n          };\n          it.end(handleEnd);\n          return;\n        }\n        batch(fn(key, value), next);\n      };\n      it.next(handleNext);\n    }\n  });\n}\n\nexports.migration = migration;\n"]},"metadata":{},"sourceType":"script"}