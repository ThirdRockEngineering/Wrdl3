{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar mergeOpts = require('merge-options');\n\nvar env_js = require('ipfs-utils/src/env.js');\n\nvar debug = require('debug');\n\nvar errCode = require('err-code');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar dagCBOR = require('@ipld/dag-cbor');\n\nvar dagJSON = require('@ipld/dag-json');\n\nvar dagJOSE = require('dag-jose');\n\nvar identity = require('multiformats/hashes/identity');\n\nvar basics = require('multiformats/basics');\n\nvar initAssets = require('ipfs-core-config/init-assets');\n\nvar errors = require('../errors.js');\n\nvar fromString = require('uint8arrays/from-string');\n\nvar start = require('./start.js');\n\nvar stop = require('./stop.js');\n\nvar dns = require('./dns.js');\n\nvar isOnline = require('./is-online.js');\n\nvar resolve = require('./resolve.js');\n\nvar index = require('./pin/index.js');\n\nvar ipns = require('./ipns.js');\n\nvar index$2 = require('./name/index.js');\n\nvar index$4 = require('./refs/index.js');\n\nvar local = require('./refs/local.js');\n\nvar index$6 = require('./bitswap/index.js');\n\nvar index$7 = require('./bootstrap/index.js');\n\nvar index$1 = require('./block/index.js');\n\nvar root = require('./root.js');\n\nvar version = require('./version.js');\n\nvar id = require('./id.js');\n\nvar index$8 = require('./config/index.js');\n\nvar index$3 = require('./dag/index.js');\n\nvar preload = require('../preload.js');\n\nvar mfsPreload = require('../mfs-preload.js');\n\nvar index$5 = require('./files/index.js');\n\nvar index$9 = require('./key/index.js');\n\nvar index$a = require('./object/index.js');\n\nvar index$b = require('./repo/index.js');\n\nvar index$c = require('./stats/index.js');\n\nvar storage = require('./storage.js');\n\nvar network = require('./network.js');\n\nvar service = require('../utils/service.js');\n\nvar index$d = require('./swarm/index.js');\n\nvar ping = require('./ping.js');\n\nvar dht = require('./dht.js');\n\nvar pubsub = require('./pubsub.js');\n\nvar multicodecs = require('ipfs-core-utils/multicodecs');\n\nvar multihashes = require('ipfs-core-utils/multihashes');\n\nvar multibases = require('ipfs-core-utils/multibases');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nvar dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);\n\nvar dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);\n\nvar dagJOSE__namespace = /*#__PURE__*/_interopNamespace(dagJOSE);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({\n  ignoreUndefined: true\n});\nconst log = Object.assign(debug__default[\"default\"]('ipfs'), {\n  error: debug__default[\"default\"]('ipfs:error')\n});\n\nclass IPFS {\n  constructor(_ref) {\n    let {\n      print,\n      storage,\n      codecs,\n      options\n    } = _ref;\n    const {\n      peerId,\n      repo,\n      keychain\n    } = storage;\n    const network$1 = service.Service.create(network.Network);\n    const preload$1 = preload.createPreloader(options.preload);\n    const dns$1 = dns.createDns();\n    const isOnline$1 = isOnline.createIsOnline({\n      network: network$1\n    });\n    const ipns$1 = new ipns.IPNSAPI(options);\n    const multihashHashers = Object.values(basics.hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new multihashes.Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    const multibaseCodecs = Object.values(basics.bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new multibases.Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new index.PinAPI({\n      repo,\n      codecs\n    });\n    const block = new index$1.BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload: preload$1,\n      repo\n    });\n    const name = new index$2.NameAPI({\n      dns: dns$1,\n      ipns: ipns$1,\n      repo,\n      codecs,\n      peerId,\n      isOnline: isOnline$1,\n      keychain,\n      options\n    });\n    const resolve$1 = resolve.createResolve({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new index$3.DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload: preload$1\n    });\n    const refs = Object.assign(index$4.createRefs({\n      repo,\n      codecs,\n      resolve: resolve$1,\n      preload: preload$1\n    }), {\n      local: local.createLocal({\n        repo: storage.repo\n      })\n    });\n    const {\n      add,\n      addAll,\n      cat,\n      get,\n      ls\n    } = new root.RootAPI({\n      preload: preload$1,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    });\n    const files = index$5.createFiles({\n      repo,\n      preload: preload$1,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload$1 = mfsPreload.createMfsPreloader({\n      files,\n      preload: preload$1,\n      options: options.preload\n    });\n    this.preload = preload$1;\n    this.name = name;\n    this.ipns = ipns$1;\n    this.pin = pin;\n    this.resolve = resolve$1;\n    this.block = block;\n    this.refs = refs;\n    this.start = start.createStart({\n      network: network$1,\n      peerId,\n      repo,\n      preload: preload$1,\n      ipns: ipns$1,\n      mfsPreload: mfsPreload$1,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    });\n    this.stop = stop.createStop({\n      network: network$1,\n      preload: preload$1,\n      mfsPreload: mfsPreload$1,\n      ipns: ipns$1,\n      repo\n    });\n    this.dht = dht.createDht({\n      network: network$1,\n      repo,\n      peerId\n    });\n    this.pubsub = pubsub.createPubsub({\n      network: network$1,\n      config: options.config\n    });\n    this.dns = dns$1;\n    this.isOnline = isOnline$1;\n    this.id = id.createId({\n      network: network$1,\n      peerId\n    });\n    this.version = version.createVersion({\n      repo\n    });\n    this.bitswap = new index$6.BitswapAPI({\n      network: network$1\n    });\n    this.bootstrap = new index$7.BootstrapAPI({\n      repo\n    });\n    this.config = index$8.createConfig({\n      repo\n    });\n    this.ping = ping.createPing({\n      network: network$1\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new index$9.KeyAPI({\n      keychain\n    });\n    this.object = new index$a.ObjectAPI({\n      preload: preload$1,\n      codecs,\n      repo\n    });\n    this.repo = new index$b.RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new index$c.StatsAPI({\n      repo,\n      network: network$1\n    });\n    this.swarm = new index$d.SwarmAPI({\n      network: network$1\n    });\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network$1.try();\n        return net ? net.libp2p : undefined;\n      }\n\n    });\n\n    const notImplemented = () => Promise.reject(errCode__default[\"default\"](new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n\n    const notImplementedIter = async function* () {\n      throw errCode__default[\"default\"](new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n    };\n\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n\n  async init() {\n    throw new errors.AlreadyInitializedError();\n  }\n\n}\n\nconst addEmptyDir = async ipfs => {\n  const buf = dagPB__namespace.encode({\n    Data: new ipfsUnixfs.UnixFS({\n      type: 'directory'\n    }).marshal(),\n    Links: []\n  });\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\n\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !env_js.isTest,\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n\nasync function create() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = mergeOptions(getDefaultOptions(), options);\n  const initOptions = options.init || {};\n  const id = {\n    name: identity.identity.name,\n    code: identity.identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const blockCodecs = Object.values(basics.codecs);\n  [dagPB__namespace, dagCBOR__namespace, dagJSON__namespace, dagJOSE__namespace, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs$1 = new multicodecs.Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const print = options.silent ? log : console.log;\n  log('creating repo');\n  const storage$1 = await storage.Storage.start(print, multicodecs$1, options);\n  log('getting repo config');\n  const config = await storage$1.repo.config.getAll();\n  const ipfs = new IPFS({\n    storage: storage$1,\n    print,\n    codecs: multicodecs$1,\n    options: { ...options,\n      config\n    }\n  });\n  log('starting preload');\n  await ipfs.preload.start();\n  log('starting storage');\n  ipfs.ipns.startOffline(storage$1);\n\n  if (storage$1.isNew && !initOptions.emptyRepo) {\n    const cid = await addEmptyDir(ipfs);\n    log('adding default assets');\n    await initAssets.initAssets({\n      addAll: ipfs.addAll,\n      print\n    });\n    log('initializing IPNS keyspace');\n    await ipfs.ipns.initializeKeyspace(storage$1.peerId.privKey, fromString.fromString(`/ipfs/${cid}`));\n  }\n\n  if (options.start !== false) {\n    log('starting node');\n    await ipfs.start();\n  }\n\n  return ipfs;\n}\n\nexports.create = create;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/index.js"],"names":["Object","defineProperty","exports","value","mergeOpts","require","env_js","debug","errCode","ipfsUnixfs","dagPB","dagCBOR","dagJSON","dagJOSE","identity","basics","initAssets","errors","fromString","start","stop","dns","isOnline","resolve","index","ipns","index$2","index$4","local","index$6","index$7","index$1","root","version","id","index$8","index$3","preload","mfsPreload","index$5","index$9","index$a","index$b","index$c","storage","network","service","index$d","ping","dht","pubsub","multicodecs","multihashes","multibases","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","mergeOpts__default","debug__default","errCode__default","dagPB__namespace","dagCBOR__namespace","dagJSON__namespace","dagJOSE__namespace","mergeOptions","bind","ignoreUndefined","log","assign","error","IPFS","constructor","print","codecs","options","peerId","repo","keychain","network$1","Service","Network","preload$1","createPreloader","dns$1","createDns","isOnline$1","createIsOnline","ipns$1","IPNSAPI","multihashHashers","values","hashes","ipld","hashers","hasher","push","Multihashes","loadHasher","multibaseCodecs","bases","base","Multibases","loadBase","pin","PinAPI","block","BlockAPI","name","NameAPI","resolve$1","createResolve","dag","DagAPI","refs","createRefs","createLocal","add","addAll","cat","ls","RootAPI","EXPERIMENTAL","files","createFiles","mfsPreload$1","createMfsPreloader","createStart","createStop","createDht","createPubsub","config","createId","createVersion","bitswap","BitswapAPI","bootstrap","BootstrapAPI","createConfig","createPing","key","KeyAPI","object","ObjectAPI","RepoAPI","stats","StatsAPI","swarm","SwarmAPI","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","init","AlreadyInitializedError","addEmptyDir","ipfs","buf","encode","Data","UnixFS","type","marshal","Links","cid","put","mhtype","format","getDefaultOptions","enabled","isTest","addresses","initOptions","code","decode","blockCodecs","concat","codec","multicodecs$1","Multicodecs","loadCodec","silent","console","storage$1","Storage","getAll","startOffline","isNew","emptyRepo","initializeKeyspace","privKey"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar mergeOpts = require('merge-options');\nvar env_js = require('ipfs-utils/src/env.js');\nvar debug = require('debug');\nvar errCode = require('err-code');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar dagPB = require('@ipld/dag-pb');\nvar dagCBOR = require('@ipld/dag-cbor');\nvar dagJSON = require('@ipld/dag-json');\nvar dagJOSE = require('dag-jose');\nvar identity = require('multiformats/hashes/identity');\nvar basics = require('multiformats/basics');\nvar initAssets = require('ipfs-core-config/init-assets');\nvar errors = require('../errors.js');\nvar fromString = require('uint8arrays/from-string');\nvar start = require('./start.js');\nvar stop = require('./stop.js');\nvar dns = require('./dns.js');\nvar isOnline = require('./is-online.js');\nvar resolve = require('./resolve.js');\nvar index = require('./pin/index.js');\nvar ipns = require('./ipns.js');\nvar index$2 = require('./name/index.js');\nvar index$4 = require('./refs/index.js');\nvar local = require('./refs/local.js');\nvar index$6 = require('./bitswap/index.js');\nvar index$7 = require('./bootstrap/index.js');\nvar index$1 = require('./block/index.js');\nvar root = require('./root.js');\nvar version = require('./version.js');\nvar id = require('./id.js');\nvar index$8 = require('./config/index.js');\nvar index$3 = require('./dag/index.js');\nvar preload = require('../preload.js');\nvar mfsPreload = require('../mfs-preload.js');\nvar index$5 = require('./files/index.js');\nvar index$9 = require('./key/index.js');\nvar index$a = require('./object/index.js');\nvar index$b = require('./repo/index.js');\nvar index$c = require('./stats/index.js');\nvar storage = require('./storage.js');\nvar network = require('./network.js');\nvar service = require('../utils/service.js');\nvar index$d = require('./swarm/index.js');\nvar ping = require('./ping.js');\nvar dht = require('./dht.js');\nvar pubsub = require('./pubsub.js');\nvar multicodecs = require('ipfs-core-utils/multicodecs');\nvar multihashes = require('ipfs-core-utils/multihashes');\nvar multibases = require('ipfs-core-utils/multibases');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\nvar dagCBOR__namespace = /*#__PURE__*/_interopNamespace(dagCBOR);\nvar dagJSON__namespace = /*#__PURE__*/_interopNamespace(dagJSON);\nvar dagJOSE__namespace = /*#__PURE__*/_interopNamespace(dagJOSE);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({ ignoreUndefined: true });\nconst log = Object.assign(debug__default[\"default\"]('ipfs'), { error: debug__default[\"default\"]('ipfs:error') });\nclass IPFS {\n  constructor({print, storage, codecs, options}) {\n    const {peerId, repo, keychain} = storage;\n    const network$1 = service.Service.create(network.Network);\n    const preload$1 = preload.createPreloader(options.preload);\n    const dns$1 = dns.createDns();\n    const isOnline$1 = isOnline.createIsOnline({ network: network$1 });\n    const ipns$1 = new ipns.IPNSAPI(options);\n    const multihashHashers = Object.values(basics.hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new multihashes.Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    const multibaseCodecs = Object.values(basics.bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new multibases.Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new index.PinAPI({\n      repo,\n      codecs\n    });\n    const block = new index$1.BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload: preload$1,\n      repo\n    });\n    const name = new index$2.NameAPI({\n      dns: dns$1,\n      ipns: ipns$1,\n      repo,\n      codecs,\n      peerId,\n      isOnline: isOnline$1,\n      keychain,\n      options\n    });\n    const resolve$1 = resolve.createResolve({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new index$3.DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload: preload$1\n    });\n    const refs = Object.assign(index$4.createRefs({\n      repo,\n      codecs,\n      resolve: resolve$1,\n      preload: preload$1\n    }), { local: local.createLocal({ repo: storage.repo }) });\n    const {add, addAll, cat, get, ls} = new root.RootAPI({\n      preload: preload$1,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    });\n    const files = index$5.createFiles({\n      repo,\n      preload: preload$1,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload$1 = mfsPreload.createMfsPreloader({\n      files,\n      preload: preload$1,\n      options: options.preload\n    });\n    this.preload = preload$1;\n    this.name = name;\n    this.ipns = ipns$1;\n    this.pin = pin;\n    this.resolve = resolve$1;\n    this.block = block;\n    this.refs = refs;\n    this.start = start.createStart({\n      network: network$1,\n      peerId,\n      repo,\n      preload: preload$1,\n      ipns: ipns$1,\n      mfsPreload: mfsPreload$1,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    });\n    this.stop = stop.createStop({\n      network: network$1,\n      preload: preload$1,\n      mfsPreload: mfsPreload$1,\n      ipns: ipns$1,\n      repo\n    });\n    this.dht = dht.createDht({\n      network: network$1,\n      repo,\n      peerId\n    });\n    this.pubsub = pubsub.createPubsub({\n      network: network$1,\n      config: options.config\n    });\n    this.dns = dns$1;\n    this.isOnline = isOnline$1;\n    this.id = id.createId({\n      network: network$1,\n      peerId\n    });\n    this.version = version.createVersion({ repo });\n    this.bitswap = new index$6.BitswapAPI({ network: network$1 });\n    this.bootstrap = new index$7.BootstrapAPI({ repo });\n    this.config = index$8.createConfig({ repo });\n    this.ping = ping.createPing({ network: network$1 });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new index$9.KeyAPI({ keychain });\n    this.object = new index$a.ObjectAPI({\n      preload: preload$1,\n      codecs,\n      repo\n    });\n    this.repo = new index$b.RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new index$c.StatsAPI({\n      repo,\n      network: network$1\n    });\n    this.swarm = new index$d.SwarmAPI({ network: network$1 });\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network$1.try();\n        return net ? net.libp2p : undefined;\n      }\n    });\n    const notImplemented = () => Promise.reject(errCode__default[\"default\"](new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n    const notImplementedIter = async function* () {\n      throw errCode__default[\"default\"](new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n    };\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n  async init() {\n    throw new errors.AlreadyInitializedError();\n  }\n}\nconst addEmptyDir = async ipfs => {\n  const buf = dagPB__namespace.encode({\n    Data: new ipfsUnixfs.UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  });\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !env_js.isTest,\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n});\nasync function create(options = {}) {\n  options = mergeOptions(getDefaultOptions(), options);\n  const initOptions = options.init || {};\n  const id = {\n    name: identity.identity.name,\n    code: identity.identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  const blockCodecs = Object.values(basics.codecs);\n  [\n    dagPB__namespace,\n    dagCBOR__namespace,\n    dagJSON__namespace,\n    dagJOSE__namespace,\n    id\n  ].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs$1 = new multicodecs.Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  const print = options.silent ? log : console.log;\n  log('creating repo');\n  const storage$1 = await storage.Storage.start(print, multicodecs$1, options);\n  log('getting repo config');\n  const config = await storage$1.repo.config.getAll();\n  const ipfs = new IPFS({\n    storage: storage$1,\n    print,\n    codecs: multicodecs$1,\n    options: {\n      ...options,\n      config\n    }\n  });\n  log('starting preload');\n  await ipfs.preload.start();\n  log('starting storage');\n  ipfs.ipns.startOffline(storage$1);\n  if (storage$1.isNew && !initOptions.emptyRepo) {\n    const cid = await addEmptyDir(ipfs);\n    log('adding default assets');\n    await initAssets.initAssets({\n      addAll: ipfs.addAll,\n      print\n    });\n    log('initializing IPNS keyspace');\n    await ipfs.ipns.initializeKeyspace(storage$1.peerId.privKey, fromString.fromString(`/ipfs/${ cid }`));\n  }\n  if (options.start !== false) {\n    log('starting node');\n    await ipfs.start();\n  }\n  return ipfs;\n}\n\nexports.create = create;\n"]},"metadata":{},"sourceType":"script"}