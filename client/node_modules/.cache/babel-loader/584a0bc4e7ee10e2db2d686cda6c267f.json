{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst {\n  sha256\n} = require('multiformats/hashes/sha2');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst {\n  base32\n} = require('multiformats/bases/base32');\n\nconst {\n  Key\n} = require('interface-datastore/key');\n\nconst {\n  Record\n} = require('libp2p-record');\n\nconst PeerId = require('peer-id');\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  concat: uint8ArrayConcat\n} = require('uint8arrays/concat');\n\nconst isPrivateIp = require('private-ip'); // const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\n\n\nconst PK_PREFIX = uint8ArrayFromString('/pk/');\n/**\n * @param {import('./types').PeerData} peer\n */\n\nfunction removePrivateAddresses(_ref) {\n  let {\n    id,\n    multiaddrs\n  } = _ref;\n  return {\n    id,\n    multiaddrs: multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples();\n\n      if (type !== 4 && type !== 6) {\n        return false;\n      } // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18\n\n\n      return !isPrivateIp(addr);\n    })\n  };\n}\n/**\n * @param {import('./types').PeerData} peer\n */\n\n\nfunction removePublicAddresses(_ref2) {\n  let {\n    id,\n    multiaddrs\n  } = _ref2;\n  return {\n    id,\n    multiaddrs: multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples();\n\n      if (type !== 4 && type !== 6) {\n        return false;\n      } // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18\n\n\n      return isPrivateIp(addr);\n    })\n  };\n}\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\n\n\nconst convertBuffer = async buf => {\n  return (await sha256.digest(buf)).digest;\n};\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\n\n\nconst convertPeerId = async peer => {\n  return (await sha256.digest(peer.id)).digest;\n};\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\n\n\nconst bufferToKey = buf => {\n  return new Key('/' + uint8ArrayToString(buf, 'base32'), false);\n};\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\n\n\nconst keyForPublicKey = peer => {\n  return uint8ArrayConcat([PK_PREFIX, peer.id]);\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nconst isPublicKeyKey = key => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/';\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nconst isIPNSKey = key => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/ipns/';\n};\n/**\n * @param {Uint8Array} key\n */\n\n\nconst fromPublicKeyKey = key => {\n  return new PeerId(key.slice(4));\n};\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\n\n\nconst createPutRecord = (key, value) => {\n  const timeReceived = new Date();\n  const rec = new Record(key, value, timeReceived);\n  return rec.serialize();\n};\n/**\n * Creates a logger for the given subsystem\n *\n * @param {string} name\n */\n\n\nconst logger = name => {\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = v => {\n    return base58btc.baseEncode(v);\n  }; // Add a formatter for converting to a base58 string\n\n\n  debug.formatters.t = v => {\n    return base32.baseEncode(v);\n  }; // Add a formatter for stringifying peer ids\n\n\n  debug.formatters.p = p => {\n    return p.toB58String();\n  };\n\n  const logger = Object.assign(debug(name), {\n    error: debug(`${name}:error`)\n  });\n  return logger;\n};\n\nmodule.exports = {\n  removePrivateAddresses,\n  removePublicAddresses,\n  convertBuffer,\n  convertPeerId,\n  bufferToKey,\n  keyForPublicKey,\n  isPublicKeyKey,\n  isIPNSKey,\n  fromPublicKeyKey,\n  createPutRecord,\n  logger\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/utils.js"],"names":["debug","require","sha256","base58btc","base32","Key","Record","PeerId","fromString","uint8ArrayFromString","toString","uint8ArrayToString","concat","uint8ArrayConcat","isPrivateIp","PK_PREFIX","removePrivateAddresses","id","multiaddrs","filter","multiaddr","type","addr","stringTuples","removePublicAddresses","convertBuffer","buf","digest","convertPeerId","peer","bufferToKey","keyForPublicKey","isPublicKeyKey","key","slice","isIPNSKey","fromPublicKeyKey","createPutRecord","value","timeReceived","Date","rec","serialize","logger","name","formatters","b","v","baseEncode","t","p","toB58String","Object","assign","error","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst { sha256 } = require('multiformats/hashes/sha2')\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst { Key } = require('interface-datastore/key')\nconst { Record } = require('libp2p-record')\nconst PeerId = require('peer-id')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst isPrivateIp = require('private-ip')\n\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = uint8ArrayFromString('/pk/')\n\n/**\n * @param {import('./types').PeerData} peer\n */\nfunction removePrivateAddresses ({ id, multiaddrs }) {\n  return {\n    id,\n    multiaddrs: multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples()\n\n      if (type !== 4 && type !== 6) {\n        return false\n      }\n\n      // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18\n      return !isPrivateIp(addr)\n    })\n  }\n}\n\n/**\n * @param {import('./types').PeerData} peer\n */\nfunction removePublicAddresses ({ id, multiaddrs }) {\n  return {\n    id,\n    multiaddrs: multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples()\n\n      if (type !== 4 && type !== 6) {\n        return false\n      }\n\n      // @ts-expect-error types are wrong https://github.com/frenchbread/private-ip/issues/18\n      return isPrivateIp(addr)\n    })\n  }\n}\n\n/**\n * Creates a DHT ID by hashing a given Uint8Array.\n *\n * @param {Uint8Array} buf\n * @returns {Promise<Uint8Array>}\n */\nconst convertBuffer = async (buf) => {\n  return (await sha256.digest(buf)).digest\n}\n\n/**\n * Creates a DHT ID by hashing a Peer ID\n *\n * @param {PeerId} peer\n * @returns {Promise<Uint8Array>}\n */\nconst convertPeerId = async (peer) => {\n  return (await sha256.digest(peer.id)).digest\n}\n\n/**\n * Convert a Uint8Array to their SHA2-256 hash.\n *\n * @param {Uint8Array} buf\n * @returns {Key}\n */\nconst bufferToKey = (buf) => {\n  return new Key('/' + uint8ArrayToString(buf, 'base32'), false)\n}\n\n/**\n * Generate the key for a public key.\n *\n * @param {PeerId} peer\n * @returns {Uint8Array}\n */\nconst keyForPublicKey = (peer) => {\n  return uint8ArrayConcat([\n    PK_PREFIX,\n    peer.id\n  ])\n}\n\n/**\n * @param {Uint8Array} key\n */\nconst isPublicKeyKey = (key) => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/pk/'\n}\n\n/**\n * @param {Uint8Array} key\n */\nconst isIPNSKey = (key) => {\n  return uint8ArrayToString(key.slice(0, 4)) === '/ipns/'\n}\n\n/**\n * @param {Uint8Array} key\n */\nconst fromPublicKeyKey = (key) => {\n  return new PeerId(key.slice(4))\n}\n\n/**\n * Create a new put record, encodes and signs it if enabled.\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} value\n * @returns {Uint8Array}\n */\nconst createPutRecord = (key, value) => {\n  const timeReceived = new Date()\n  const rec = new Record(key, value, timeReceived)\n\n  return rec.serialize()\n}\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {string} name\n */\nconst logger = (name) => {\n  // Add a formatter for converting to a base58 string\n  debug.formatters.b = (v) => {\n    return base58btc.baseEncode(v)\n  }\n\n  // Add a formatter for converting to a base58 string\n  debug.formatters.t = (v) => {\n    return base32.baseEncode(v)\n  }\n\n  // Add a formatter for stringifying peer ids\n  debug.formatters.p = (p) => {\n    return p.toB58String()\n  }\n\n  const logger = Object.assign(debug(name), {\n    error: debug(`${name}:error`)\n  })\n\n  return logger\n}\n\nmodule.exports = {\n  removePrivateAddresses,\n  removePublicAddresses,\n  convertBuffer,\n  convertPeerId,\n  bufferToKey,\n  keyForPublicKey,\n  isPublicKeyKey,\n  isIPNSKey,\n  fromPublicKeyKey,\n  createPutRecord,\n  logger\n}\n"]},"metadata":{},"sourceType":"script"}