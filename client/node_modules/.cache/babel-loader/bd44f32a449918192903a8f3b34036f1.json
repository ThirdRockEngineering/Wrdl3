{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar map = require('it-map');\n\nvar errCode = require('err-code');\n\nvar pinTypes = require('./pin-types.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nfunction createPinnedBlockstore(pins, store) {\n  return {\n    open() {\n      return store.open();\n    },\n\n    close() {\n      return store.close();\n    },\n\n    query(query, options) {\n      return store.query(query, options);\n    },\n\n    queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n\n    async get(cid, options) {\n      return store.get(cid, options);\n    },\n\n    async *getMany(cids, options) {\n      yield* store.getMany(cids, options);\n    },\n\n    async put(cid, buf, options) {\n      await store.put(cid, buf, options);\n    },\n\n    async *putMany(pairs, options) {\n      yield* store.putMany(pairs, options);\n    },\n\n    has(cid, options) {\n      return store.has(cid, options);\n    },\n\n    async delete(cid, options) {\n      await ensureNotPinned(cid, pins);\n      return store.delete(cid, options);\n    },\n\n    deleteMany(cids, options) {\n      return store.deleteMany(map__default[\"default\"](cids, async cid => {\n        await ensureNotPinned(cid, pins);\n        return cid;\n      }), options);\n    },\n\n    batch() {\n      return store.batch();\n    }\n\n  };\n}\n\nasync function ensureNotPinned(cid, pins) {\n  const {\n    pinned,\n    reason\n  } = await pins.isPinnedWithType(cid, pinTypes.PinTypes.all);\n\n  if (pinned) {\n    throw errCode__default[\"default\"](new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED');\n  }\n}\n\nexports.createPinnedBlockstore = createPinnedBlockstore;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo/cjs/src/pinned-blockstore.js"],"names":["Object","defineProperty","exports","value","map","require","errCode","pinTypes","_interopDefaultLegacy","e","map__default","errCode__default","createPinnedBlockstore","pins","store","open","close","query","options","queryKeys","get","cid","getMany","cids","put","buf","putMany","pairs","has","delete","ensureNotPinned","deleteMany","batch","pinned","reason","isPinnedWithType","PinTypes","all","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar map = require('it-map');\nvar errCode = require('err-code');\nvar pinTypes = require('./pin-types.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nfunction createPinnedBlockstore(pins, store) {\n  return {\n    open() {\n      return store.open();\n    },\n    close() {\n      return store.close();\n    },\n    query(query, options) {\n      return store.query(query, options);\n    },\n    queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n    async get(cid, options) {\n      return store.get(cid, options);\n    },\n    async *getMany(cids, options) {\n      yield* store.getMany(cids, options);\n    },\n    async put(cid, buf, options) {\n      await store.put(cid, buf, options);\n    },\n    async *putMany(pairs, options) {\n      yield* store.putMany(pairs, options);\n    },\n    has(cid, options) {\n      return store.has(cid, options);\n    },\n    async delete(cid, options) {\n      await ensureNotPinned(cid, pins);\n      return store.delete(cid, options);\n    },\n    deleteMany(cids, options) {\n      return store.deleteMany(map__default[\"default\"](cids, async cid => {\n        await ensureNotPinned(cid, pins);\n        return cid;\n      }), options);\n    },\n    batch() {\n      return store.batch();\n    }\n  };\n}\nasync function ensureNotPinned(cid, pins) {\n  const {pinned, reason} = await pins.isPinnedWithType(cid, pinTypes.PinTypes.all);\n  if (pinned) {\n    throw errCode__default[\"default\"](new Error(`pinned: ${ reason }`), 'ERR_BLOCK_PINNED');\n  }\n}\n\nexports.createPinnedBlockstore = createPinnedBlockstore;\n"]},"metadata":{},"sourceType":"script"}