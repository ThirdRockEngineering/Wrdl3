{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createAddrs(_ref) {\n  let {\n    network\n  } = _ref;\n\n  async function addrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const peers = [];\n    const {\n      libp2p\n    } = await network.use(options);\n\n    for await (const peer of libp2p.peerStore.getPeers()) {\n      peers.push({\n        id: peer.id.toB58String(),\n        addrs: peer.addresses.map(mi => mi.multiaddr)\n      });\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption.withTimeoutOption(addrs);\n}\n\nexports.createAddrs = createAddrs;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/swarm/addrs.js"],"names":["Object","defineProperty","exports","value","withTimeoutOption","require","createAddrs","network","addrs","options","peers","libp2p","use","peer","peerStore","getPeers","push","id","toB58String","addresses","map","mi","multiaddr"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASC,WAAT,OAAgC;AAAA,MAAX;AAACC,IAAAA;AAAD,GAAW;;AAC9B,iBAAeC,KAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,KAAK,GAAG,EAAd;AACA,UAAM;AAACC,MAAAA;AAAD,QAAW,MAAMJ,OAAO,CAACK,GAAR,CAAYH,OAAZ,CAAvB;;AACA,eAAW,MAAMI,IAAjB,IAAyBF,MAAM,CAACG,SAAP,CAAiBC,QAAjB,EAAzB,EAAsD;AACpDL,MAAAA,KAAK,CAACM,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAEJ,IAAI,CAACI,EAAL,CAAQC,WAAR,EADK;AAETV,QAAAA,KAAK,EAAEK,IAAI,CAACM,SAAL,CAAeC,GAAf,CAAmBC,EAAE,IAAIA,EAAE,CAACC,SAA5B;AAFE,OAAX;AAID;;AACD,WAAOZ,KAAP;AACD;;AACD,SAAON,iBAAiB,CAACA,iBAAlB,CAAoCI,KAApC,CAAP;AACD;;AAEDN,OAAO,CAACI,WAAR,GAAsBA,WAAtB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createAddrs({network}) {\n  async function addrs(options = {}) {\n    const peers = [];\n    const {libp2p} = await network.use(options);\n    for await (const peer of libp2p.peerStore.getPeers()) {\n      peers.push({\n        id: peer.id.toB58String(),\n        addrs: peer.addresses.map(mi => mi.multiaddr)\n      });\n    }\n    return peers;\n  }\n  return withTimeoutOption.withTimeoutOption(addrs);\n}\n\nexports.createAddrs = createAddrs;\n"]},"metadata":{},"sourceType":"script"}