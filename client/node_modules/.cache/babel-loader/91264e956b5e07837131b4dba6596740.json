{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar block = require('multiformats/block');\n\nvar writer = require('@ipld/car/writer');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar debug = require('debug');\n\nvar raw = require('multiformats/codecs/raw');\n\nvar json = require('multiformats/codecs/json');\n\nvar traversal = require('multiformats/traversal');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\n\nvar json__namespace = /*#__PURE__*/_interopNamespace(json);\n\nconst log = debug__default[\"default\"]('ipfs:components:dag:import');\nconst NO_LINKS_CODECS = [raw__namespace.code, json__namespace.code];\n\nfunction createExport(_ref) {\n  let {\n    repo,\n    preload,\n    codecs\n  } = _ref;\n\n  async function* dagExport(root) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.preload !== false) {\n      preload(root);\n    }\n\n    const cid$1 = cid.CID.asCID(root);\n\n    if (!cid$1) {\n      throw new Error(`Unexpected error converting CID type: ${root}`);\n    }\n\n    log(`Exporting ${cid$1} as car`);\n    const {\n      writer: writer$1,\n      out\n    } = await writer.CarWriter.create([cid$1]);\n    let err = null;\n\n    (async () => {\n      try {\n        const load = makeLoader(repo, writer$1, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs);\n        await traversal.walk({\n          cid: cid$1,\n          load\n        });\n      } catch (e) {\n        err = e;\n      } finally {\n        writer$1.close();\n      }\n    })();\n\n    for await (const chunk of out) {\n      if (err) {\n        break;\n      }\n\n      yield chunk;\n    }\n\n    if (err) {\n      throw err;\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(dagExport);\n}\n\nfunction makeLoader(repo, writer, options, codecs) {\n  return async cid => {\n    const codec = await codecs.getCodec(cid.code);\n\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`);\n    }\n\n    const bytes = await repo.blocks.get(cid, options);\n    log(`Adding block ${cid} to car`);\n    await writer.put({\n      cid,\n      bytes\n    });\n\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null;\n    }\n\n    return block.createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n  };\n}\n\nexports.createExport = createExport;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/dag/export.js"],"names":["Object","defineProperty","exports","value","cid","require","block","writer","withTimeoutOption","debug","raw","json","traversal","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","debug__default","raw__namespace","json__namespace","log","NO_LINKS_CODECS","code","createExport","repo","preload","codecs","dagExport","root","options","cid$1","CID","asCID","Error","writer$1","out","CarWriter","err","load","makeLoader","signal","timeout","walk","close","chunk","codec","getCodec","toString","bytes","blocks","put","includes","createUnsafe"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar block = require('multiformats/block');\nvar writer = require('@ipld/car/writer');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar debug = require('debug');\nvar raw = require('multiformats/codecs/raw');\nvar json = require('multiformats/codecs/json');\nvar traversal = require('multiformats/traversal');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\nvar json__namespace = /*#__PURE__*/_interopNamespace(json);\n\nconst log = debug__default[\"default\"]('ipfs:components:dag:import');\nconst NO_LINKS_CODECS = [\n  raw__namespace.code,\n  json__namespace.code\n];\nfunction createExport({repo, preload, codecs}) {\n  async function* dagExport(root, options = {}) {\n    if (options.preload !== false) {\n      preload(root);\n    }\n    const cid$1 = cid.CID.asCID(root);\n    if (!cid$1) {\n      throw new Error(`Unexpected error converting CID type: ${ root }`);\n    }\n    log(`Exporting ${ cid$1 } as car`);\n    const {writer: writer$1, out} = await writer.CarWriter.create([cid$1]);\n    let err = null;\n    (async () => {\n      try {\n        const load = makeLoader(repo, writer$1, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs);\n        await traversal.walk({\n          cid: cid$1,\n          load\n        });\n      } catch (e) {\n        err = e;\n      } finally {\n        writer$1.close();\n      }\n    })();\n    for await (const chunk of out) {\n      if (err) {\n        break;\n      }\n      yield chunk;\n    }\n    if (err) {\n      throw err;\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(dagExport);\n}\nfunction makeLoader(repo, writer, options, codecs) {\n  return async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${ cid.code.toString(16) } to form complete DAG`);\n    }\n    const bytes = await repo.blocks.get(cid, options);\n    log(`Adding block ${ cid } to car`);\n    await writer.put({\n      cid,\n      bytes\n    });\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null;\n    }\n    return block.createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n  };\n}\n\nexports.createExport = createExport;\n"]},"metadata":{},"sourceType":"script"}