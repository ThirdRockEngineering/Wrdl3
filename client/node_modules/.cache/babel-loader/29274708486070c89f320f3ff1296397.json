{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:auto-relay'), {\n  error: debug('libp2p:auto-relay:err')\n});\n\nconst {\n  fromString: uint8ArrayFromString\n} = require('uint8arrays/from-string');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  Multiaddr\n} = require('multiaddr');\n\nconst all = require('it-all');\n\nconst {\n  relay: multicodec\n} = require('./multicodec');\n\nconst {\n  canHop\n} = require('./circuit/hop');\n\nconst {\n  namespaceToCid\n} = require('./utils');\n\nconst {\n  CIRCUIT_PROTO_CODE,\n  HOP_METADATA_KEY,\n  HOP_METADATA_VALUE,\n  RELAY_RENDEZVOUS_NS\n} = require('./constants');\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('../peer-store/types').Address} Address\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} AutoRelayProperties\n * @property {import('../')} libp2p\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 1] - maximum number of relays to listen.\n * @property {(error: Error, msg?: string) => {}} [onError]\n */\n\n\nclass AutoRelay {\n  /**\n   * Creates an instance of AutoRelay.\n   *\n   * @class\n   * @param {AutoRelayProperties & AutoRelayOptions} props\n   */\n  constructor(_ref) {\n    let {\n      libp2p,\n      maxListeners = 1,\n      onError\n    } = _ref;\n    this._libp2p = libp2p;\n    this._peerId = libp2p.peerId;\n    this._peerStore = libp2p.peerStore;\n    this._connectionManager = libp2p.connectionManager;\n    this._transportManager = libp2p.transportManager;\n    this._addressSorter = libp2p.dialer.addressSorter;\n    this.maxListeners = maxListeners;\n    /**\n     * @type {Set<string>}\n     */\n\n    this._listenRelays = new Set();\n    this._onProtocolChange = this._onProtocolChange.bind(this);\n    this._onPeerDisconnected = this._onPeerDisconnected.bind(this);\n\n    this._peerStore.on('change:protocols', this._onProtocolChange);\n\n    this._connectionManager.on('peer:disconnect', this._onPeerDisconnected);\n    /**\n     * @param {Error} error\n     * @param {string} [msg]\n     */\n\n\n    this._onError = (error, msg) => {\n      log.error(msg || error);\n      onError && onError(error, msg);\n    };\n  }\n  /**\n   * Check if a peer supports the relay protocol.\n   * If the protocol is not supported, check if it was supported before and remove it as a listen relay.\n   * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if\n   * inside the threshold.\n   *\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {string[]} props.protocols\n   * @returns {Promise<void>}\n   */\n\n\n  async _onProtocolChange(_ref2) {\n    let {\n      peerId,\n      protocols\n    } = _ref2;\n    const id = peerId.toB58String(); // Check if it has the protocol\n\n    const hasProtocol = protocols.find(protocol => protocol === multicodec); // If no protocol, check if we were keeping the peer before as a listenRelay\n\n    if (!hasProtocol && this._listenRelays.has(id)) {\n      await this._removeListenRelay(id);\n      return;\n    } else if (!hasProtocol || this._listenRelays.has(id)) {\n      return;\n    } // If protocol, check if can hop, store info in the metadataBook and listen on it\n\n\n    try {\n      const connection = this._connectionManager.get(peerId);\n\n      if (!connection) {\n        return;\n      } // Do not hop on a relayed connection\n\n\n      if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {\n        log(`relayed connection to ${id} will not be used to hop on`);\n        return;\n      }\n\n      const supportsHop = await canHop({\n        connection\n      });\n\n      if (supportsHop) {\n        await this._peerStore.metadataBook.setValue(peerId, HOP_METADATA_KEY, uint8ArrayFromString(HOP_METADATA_VALUE));\n        await this._addListenRelay(connection, id);\n      }\n    } catch (\n    /** @type {any} */\n    err) {\n      this._onError(err);\n    }\n  }\n  /**\n   * Peer disconnects.\n   *\n   * @param {Connection} connection - connection to the peer\n   */\n\n\n  _onPeerDisconnected(connection) {\n    const peerId = connection.remotePeer;\n    const id = peerId.toB58String(); // Not listening on this relay\n\n    if (!this._listenRelays.has(id)) {\n      return;\n    }\n\n    this._removeListenRelay(id).catch(err => {\n      log.error(err);\n    });\n  }\n  /**\n   * Attempt to listen on the given relay connection.\n   *\n   * @private\n   * @param {Connection} connection - connection to the peer\n   * @param {string} id - peer identifier string\n   * @returns {Promise<void>}\n   */\n\n\n  async _addListenRelay(connection, id) {\n    try {\n      // Check if already listening on enough relays\n      if (this._listenRelays.size >= this.maxListeners) {\n        return;\n      } // Get peer known addresses and sort them per public addresses first\n\n\n      const remoteAddrs = await this._peerStore.addressBook.getMultiaddrsForPeer(connection.remotePeer, this._addressSorter); // Attempt to listen on relay\n\n      const result = await Promise.all(remoteAddrs.map(async addr => {\n        try {\n          // Announce multiaddrs will update on listen success by TransportManager event being triggered\n          await this._transportManager.listen([new Multiaddr(`${addr.toString()}/p2p-circuit`)]);\n          return true;\n        } catch (\n        /** @type {any} */\n        err) {\n          this._onError(err);\n        }\n\n        return false;\n      }));\n\n      if (result.includes(true)) {\n        this._listenRelays.add(id);\n      }\n    } catch (\n    /** @type {any} */\n    err) {\n      this._onError(err);\n\n      this._listenRelays.delete(id);\n    }\n  }\n  /**\n   * Remove listen relay.\n   *\n   * @private\n   * @param {string} id - peer identifier string.\n   */\n\n\n  async _removeListenRelay(id) {\n    if (this._listenRelays.delete(id)) {\n      // TODO: this should be responsibility of the connMgr\n      await this._listenOnAvailableHopRelays([id]);\n    }\n  }\n  /**\n   * Try to listen on available hop relay connections.\n   * The following order will happen while we do not have enough relays.\n   * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.\n   * 2. Dial and try to listen on the peers we know that support hop but are not connected.\n   * 3. Search the network.\n   *\n   * @param {string[]} [peersToIgnore]\n   */\n\n\n  async _listenOnAvailableHopRelays() {\n    let peersToIgnore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n    // TODO: The peer redial issue on disconnect should be handled by connection gating\n    // Check if already listening on enough relays\n    if (this._listenRelays.size >= this.maxListeners) {\n      return;\n    }\n\n    const knownHopsToDial = [];\n    const peers = await all(this._peerStore.getPeers()); // Check if we have known hop peers to use and attempt to listen on the already connected\n\n    for await (const {\n      id,\n      metadata\n    } of peers) {\n      const idStr = id.toB58String(); // Continue to next if listening on this or peer to ignore\n\n      if (this._listenRelays.has(idStr)) {\n        continue;\n      }\n\n      if (peersToIgnore.includes(idStr)) {\n        continue;\n      }\n\n      const supportsHop = metadata.get(HOP_METADATA_KEY); // Continue to next if it does not support Hop\n\n      if (!supportsHop || uint8ArrayToString(supportsHop) !== HOP_METADATA_VALUE) {\n        continue;\n      }\n\n      const connection = this._connectionManager.get(id); // If not connected, store for possible later use.\n\n\n      if (!connection) {\n        knownHopsToDial.push(id);\n        continue;\n      }\n\n      await this._addListenRelay(connection, idStr); // Check if already listening on enough relays\n\n      if (this._listenRelays.size >= this.maxListeners) {\n        return;\n      }\n    } // Try to listen on known peers that are not connected\n\n\n    for (const peerId of knownHopsToDial) {\n      await this._tryToListenOnRelay(peerId); // Check if already listening on enough relays\n\n      if (this._listenRelays.size >= this.maxListeners) {\n        return;\n      }\n    } // Try to find relays to hop on the network\n\n\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n\n      for await (const provider of this._libp2p.contentRouting.findProviders(cid)) {\n        if (!provider.multiaddrs.length) {\n          continue;\n        }\n\n        const peerId = provider.id;\n        await this._peerStore.addressBook.add(peerId, provider.multiaddrs);\n        await this._tryToListenOnRelay(peerId); // Check if already listening on enough relays\n\n        if (this._listenRelays.size >= this.maxListeners) {\n          return;\n        }\n      }\n    } catch (\n    /** @type {any} */\n    err) {\n      this._onError(err);\n    }\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  async _tryToListenOnRelay(peerId) {\n    try {\n      const connection = await this._libp2p.dial(peerId);\n      await this._addListenRelay(connection, peerId.toB58String());\n    } catch (\n    /** @type {any} */\n    err) {\n      this._onError(err, `could not connect and listen on known hop relay ${peerId.toB58String()}`);\n    }\n  }\n\n}\n\nmodule.exports = AutoRelay;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p/src/circuit/auto-relay.js"],"names":["debug","require","log","Object","assign","error","fromString","uint8ArrayFromString","toString","uint8ArrayToString","Multiaddr","all","relay","multicodec","canHop","namespaceToCid","CIRCUIT_PROTO_CODE","HOP_METADATA_KEY","HOP_METADATA_VALUE","RELAY_RENDEZVOUS_NS","AutoRelay","constructor","libp2p","maxListeners","onError","_libp2p","_peerId","peerId","_peerStore","peerStore","_connectionManager","connectionManager","_transportManager","transportManager","_addressSorter","dialer","addressSorter","_listenRelays","Set","_onProtocolChange","bind","_onPeerDisconnected","on","_onError","msg","protocols","id","toB58String","hasProtocol","find","protocol","has","_removeListenRelay","connection","get","remoteAddr","protoCodes","includes","supportsHop","metadataBook","setValue","_addListenRelay","err","remotePeer","catch","size","remoteAddrs","addressBook","getMultiaddrsForPeer","result","Promise","map","addr","listen","add","delete","_listenOnAvailableHopRelays","peersToIgnore","knownHopsToDial","peers","getPeers","metadata","idStr","push","_tryToListenOnRelay","cid","provider","contentRouting","findProviders","multiaddrs","length","dial","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst log = Object.assign(debug('libp2p:auto-relay'), {\n  error: debug('libp2p:auto-relay:err')\n})\n\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { Multiaddr } = require('multiaddr')\nconst all = require('it-all')\n\nconst { relay: multicodec } = require('./multicodec')\nconst { canHop } = require('./circuit/hop')\nconst { namespaceToCid } = require('./utils')\nconst {\n  CIRCUIT_PROTO_CODE,\n  HOP_METADATA_KEY,\n  HOP_METADATA_VALUE,\n  RELAY_RENDEZVOUS_NS\n} = require('./constants')\n\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('../peer-store/types').Address} Address\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} AutoRelayProperties\n * @property {import('../')} libp2p\n *\n * @typedef {Object} AutoRelayOptions\n * @property {number} [maxListeners = 1] - maximum number of relays to listen.\n * @property {(error: Error, msg?: string) => {}} [onError]\n */\n\nclass AutoRelay {\n  /**\n   * Creates an instance of AutoRelay.\n   *\n   * @class\n   * @param {AutoRelayProperties & AutoRelayOptions} props\n   */\n  constructor ({ libp2p, maxListeners = 1, onError }) {\n    this._libp2p = libp2p\n    this._peerId = libp2p.peerId\n    this._peerStore = libp2p.peerStore\n    this._connectionManager = libp2p.connectionManager\n    this._transportManager = libp2p.transportManager\n    this._addressSorter = libp2p.dialer.addressSorter\n\n    this.maxListeners = maxListeners\n\n    /**\n     * @type {Set<string>}\n     */\n    this._listenRelays = new Set()\n\n    this._onProtocolChange = this._onProtocolChange.bind(this)\n    this._onPeerDisconnected = this._onPeerDisconnected.bind(this)\n\n    this._peerStore.on('change:protocols', this._onProtocolChange)\n    this._connectionManager.on('peer:disconnect', this._onPeerDisconnected)\n\n    /**\n     * @param {Error} error\n     * @param {string} [msg]\n     */\n    this._onError = (error, msg) => {\n      log.error(msg || error)\n      onError && onError(error, msg)\n    }\n  }\n\n  /**\n   * Check if a peer supports the relay protocol.\n   * If the protocol is not supported, check if it was supported before and remove it as a listen relay.\n   * If the protocol is supported, check if the peer supports **HOP** and add it as a listener if\n   * inside the threshold.\n   *\n   * @param {Object} props\n   * @param {PeerId} props.peerId\n   * @param {string[]} props.protocols\n   * @returns {Promise<void>}\n   */\n  async _onProtocolChange ({ peerId, protocols }) {\n    const id = peerId.toB58String()\n\n    // Check if it has the protocol\n    const hasProtocol = protocols.find(protocol => protocol === multicodec)\n\n    // If no protocol, check if we were keeping the peer before as a listenRelay\n    if (!hasProtocol && this._listenRelays.has(id)) {\n      await this._removeListenRelay(id)\n      return\n    } else if (!hasProtocol || this._listenRelays.has(id)) {\n      return\n    }\n\n    // If protocol, check if can hop, store info in the metadataBook and listen on it\n    try {\n      const connection = this._connectionManager.get(peerId)\n      if (!connection) {\n        return\n      }\n\n      // Do not hop on a relayed connection\n      if (connection.remoteAddr.protoCodes().includes(CIRCUIT_PROTO_CODE)) {\n        log(`relayed connection to ${id} will not be used to hop on`)\n        return\n      }\n\n      const supportsHop = await canHop({ connection })\n\n      if (supportsHop) {\n        await this._peerStore.metadataBook.setValue(peerId, HOP_METADATA_KEY, uint8ArrayFromString(HOP_METADATA_VALUE))\n        await this._addListenRelay(connection, id)\n      }\n    } catch (/** @type {any} */ err) {\n      this._onError(err)\n    }\n  }\n\n  /**\n   * Peer disconnects.\n   *\n   * @param {Connection} connection - connection to the peer\n   */\n  _onPeerDisconnected (connection) {\n    const peerId = connection.remotePeer\n    const id = peerId.toB58String()\n\n    // Not listening on this relay\n    if (!this._listenRelays.has(id)) {\n      return\n    }\n\n    this._removeListenRelay(id).catch(err => {\n      log.error(err)\n    })\n  }\n\n  /**\n   * Attempt to listen on the given relay connection.\n   *\n   * @private\n   * @param {Connection} connection - connection to the peer\n   * @param {string} id - peer identifier string\n   * @returns {Promise<void>}\n   */\n  async _addListenRelay (connection, id) {\n    try {\n      // Check if already listening on enough relays\n      if (this._listenRelays.size >= this.maxListeners) {\n        return\n      }\n\n      // Get peer known addresses and sort them per public addresses first\n      const remoteAddrs = await this._peerStore.addressBook.getMultiaddrsForPeer(\n        connection.remotePeer, this._addressSorter\n      )\n\n      // Attempt to listen on relay\n      const result = await Promise.all(\n        remoteAddrs.map(async addr => {\n          try {\n            // Announce multiaddrs will update on listen success by TransportManager event being triggered\n            await this._transportManager.listen([new Multiaddr(`${addr.toString()}/p2p-circuit`)])\n            return true\n          } catch (/** @type {any} */ err) {\n            this._onError(err)\n          }\n\n          return false\n        })\n      )\n\n      if (result.includes(true)) {\n        this._listenRelays.add(id)\n      }\n    } catch (/** @type {any} */ err) {\n      this._onError(err)\n      this._listenRelays.delete(id)\n    }\n  }\n\n  /**\n   * Remove listen relay.\n   *\n   * @private\n   * @param {string} id - peer identifier string.\n   */\n  async _removeListenRelay (id) {\n    if (this._listenRelays.delete(id)) {\n      // TODO: this should be responsibility of the connMgr\n      await this._listenOnAvailableHopRelays([id])\n    }\n  }\n\n  /**\n   * Try to listen on available hop relay connections.\n   * The following order will happen while we do not have enough relays.\n   * 1. Check the metadata store for known relays, try to listen on the ones we are already connected.\n   * 2. Dial and try to listen on the peers we know that support hop but are not connected.\n   * 3. Search the network.\n   *\n   * @param {string[]} [peersToIgnore]\n   */\n  async _listenOnAvailableHopRelays (peersToIgnore = []) {\n    // TODO: The peer redial issue on disconnect should be handled by connection gating\n    // Check if already listening on enough relays\n    if (this._listenRelays.size >= this.maxListeners) {\n      return\n    }\n\n    const knownHopsToDial = []\n    const peers = await all(this._peerStore.getPeers())\n\n    // Check if we have known hop peers to use and attempt to listen on the already connected\n    for await (const { id, metadata } of peers) {\n      const idStr = id.toB58String()\n\n      // Continue to next if listening on this or peer to ignore\n      if (this._listenRelays.has(idStr)) {\n        continue\n      }\n\n      if (peersToIgnore.includes(idStr)) {\n        continue\n      }\n\n      const supportsHop = metadata.get(HOP_METADATA_KEY)\n\n      // Continue to next if it does not support Hop\n      if (!supportsHop || uint8ArrayToString(supportsHop) !== HOP_METADATA_VALUE) {\n        continue\n      }\n\n      const connection = this._connectionManager.get(id)\n\n      // If not connected, store for possible later use.\n      if (!connection) {\n        knownHopsToDial.push(id)\n        continue\n      }\n\n      await this._addListenRelay(connection, idStr)\n\n      // Check if already listening on enough relays\n      if (this._listenRelays.size >= this.maxListeners) {\n        return\n      }\n    }\n\n    // Try to listen on known peers that are not connected\n    for (const peerId of knownHopsToDial) {\n      await this._tryToListenOnRelay(peerId)\n\n      // Check if already listening on enough relays\n      if (this._listenRelays.size >= this.maxListeners) {\n        return\n      }\n    }\n\n    // Try to find relays to hop on the network\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS)\n      for await (const provider of this._libp2p.contentRouting.findProviders(cid)) {\n        if (!provider.multiaddrs.length) {\n          continue\n        }\n\n        const peerId = provider.id\n        await this._peerStore.addressBook.add(peerId, provider.multiaddrs)\n\n        await this._tryToListenOnRelay(peerId)\n\n        // Check if already listening on enough relays\n        if (this._listenRelays.size >= this.maxListeners) {\n          return\n        }\n      }\n    } catch (/** @type {any} */ err) {\n      this._onError(err)\n    }\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  async _tryToListenOnRelay (peerId) {\n    try {\n      const connection = await this._libp2p.dial(peerId)\n      await this._addListenRelay(connection, peerId.toB58String())\n    } catch (/** @type {any} */ err) {\n      this._onError(err, `could not connect and listen on known hop relay ${peerId.toB58String()}`)\n    }\n  }\n}\n\nmodule.exports = AutoRelay\n"]},"metadata":{},"sourceType":"script"}