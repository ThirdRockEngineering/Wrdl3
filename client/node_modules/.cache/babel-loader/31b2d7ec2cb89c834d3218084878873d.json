{"ast":null,"code":"'use strict';\n\nconst drain = require('it-drain');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * Wrapper class to convert events into returned values\n *\n * @implements {ContentRoutingModule}\n */\n\n\nclass DHTContentRouting {\n  /**\n   * @param {import('libp2p-kad-dht').DHT} dht\n   */\n  constructor(dht) {\n    this._dht = dht;\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  async provide(cid) {\n    await drain(this._dht.provide(cid));\n  }\n  /**\n   * @param {CID} cid\n   * @param {*} options\n   */\n\n\n  async *findProviders(cid, options) {\n    for await (const event of this._dht.findProviders(cid, options)) {\n      if (event.name === 'PROVIDER') {\n        yield* event.providers;\n      }\n    }\n  }\n\n}\n\nmodule.exports = {\n  DHTContentRouting\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p/src/dht/dht-content-routing.js"],"names":["drain","require","DHTContentRouting","constructor","dht","_dht","provide","cid","findProviders","options","event","name","providers","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,iBAAN,CAAwB;AACtB;AACF;AACA;AACEC,EAAAA,WAAW,CAAEC,GAAF,EAAO;AAChB,SAAKC,IAAL,GAAYD,GAAZ;AACD;AAED;AACF;AACA;;;AACe,QAAPE,OAAO,CAAEC,GAAF,EAAO;AAClB,UAAMP,KAAK,CAAC,KAAKK,IAAL,CAAUC,OAAV,CAAkBC,GAAlB,CAAD,CAAX;AACD;AAED;AACF;AACA;AACA;;;AACuB,SAAbC,aAAa,CAAED,GAAF,EAAOE,OAAP,EAAgB;AACnC,eAAW,MAAMC,KAAjB,IAA0B,KAAKL,IAAL,CAAUG,aAAV,CAAwBD,GAAxB,EAA6BE,OAA7B,CAA1B,EAAiE;AAC/D,UAAIC,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,eAAQD,KAAK,CAACE,SAAd;AACD;AACF;AACF;;AAzBqB;;AA4BxBC,MAAM,CAACC,OAAP,GAAiB;AAAEZ,EAAAA;AAAF,CAAjB","sourcesContent":["'use strict'\n\nconst drain = require('it-drain')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('libp2p-interfaces/src/content-routing/types').ContentRouting} ContentRoutingModule\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * Wrapper class to convert events into returned values\n *\n * @implements {ContentRoutingModule}\n */\nclass DHTContentRouting {\n  /**\n   * @param {import('libp2p-kad-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async provide (cid) {\n    await drain(this._dht.provide(cid))\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {*} options\n   */\n  async * findProviders (cid, options) {\n    for await (const event of this._dht.findProviders(cid, options)) {\n      if (event.name === 'PROVIDER') {\n        yield * event.providers\n      }\n    }\n  }\n}\n\nmodule.exports = { DHTContentRouting }\n"]},"metadata":{},"sourceType":"script"}