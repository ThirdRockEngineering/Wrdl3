{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar errCode = require('err-code');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst IPFS_PREFIX = '/ipfs/';\n\nfunction toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = cid.CID.decode(string);\n    } catch (err) {\n      throw errCode__default[\"default\"](err, 'ERR_INVALID_CID');\n    }\n  }\n\n  let cid$1 = cid.CID.asCID(string);\n\n  if (cid$1) {\n    return {\n      cid: cid$1,\n      path: undefined\n    };\n  }\n\n  string = string.toString();\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n\n  const parts = string.split('/');\n  let path;\n\n  try {\n    cid$1 = cid.CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode__default[\"default\"](err, 'ERR_INVALID_CID');\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`;\n  }\n\n  return {\n    cid: cid$1,\n    path\n  };\n}\n\nexports.toCidAndPath = toCidAndPath;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core-utils/cjs/src/to-cid-and-path.js"],"names":["Object","defineProperty","exports","value","cid","require","errCode","_interopDefaultLegacy","e","errCode__default","IPFS_PREFIX","toCidAndPath","string","Uint8Array","CID","decode","err","cid$1","asCID","path","undefined","toString","startsWith","substring","length","parts","split","parse","shift","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAArB;;AAEA,SAASE,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,gBAAgB,GAAG,aAAaF,qBAAqB,CAACD,OAAD,CAAzD;;AAEA,MAAMI,WAAW,GAAG,QAApB;;AACA,SAASC,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIA,MAAM,YAAYC,UAAtB,EAAkC;AAChC,QAAI;AACFD,MAAAA,MAAM,GAAGR,GAAG,CAACU,GAAJ,CAAQC,MAAR,CAAeH,MAAf,CAAT;AACD,KAFD,CAEE,OAAOI,GAAP,EAAY;AACZ,YAAMP,gBAAgB,CAAC,SAAD,CAAhB,CAA4BO,GAA5B,EAAiC,iBAAjC,CAAN;AACD;AACF;;AACD,MAAIC,KAAK,GAAGb,GAAG,CAACU,GAAJ,CAAQI,KAAR,CAAcN,MAAd,CAAZ;;AACA,MAAIK,KAAJ,EAAW;AACT,WAAO;AACLb,MAAAA,GAAG,EAAEa,KADA;AAELE,MAAAA,IAAI,EAAEC;AAFD,KAAP;AAID;;AACDR,EAAAA,MAAM,GAAGA,MAAM,CAACS,QAAP,EAAT;;AACA,MAAIT,MAAM,CAACU,UAAP,CAAkBZ,WAAlB,CAAJ,EAAoC;AAClCE,IAAAA,MAAM,GAAGA,MAAM,CAACW,SAAP,CAAiBb,WAAW,CAACc,MAA7B,CAAT;AACD;;AACD,QAAMC,KAAK,GAAGb,MAAM,CAACc,KAAP,CAAa,GAAb,CAAd;AACA,MAAIP,IAAJ;;AACA,MAAI;AACFF,IAAAA,KAAK,GAAGb,GAAG,CAACU,GAAJ,CAAQa,KAAR,CAAcF,KAAK,CAACG,KAAN,MAAiB,EAA/B,CAAR;AACD,GAFD,CAEE,OAAOZ,GAAP,EAAY;AACZ,UAAMP,gBAAgB,CAAC,SAAD,CAAhB,CAA4BO,GAA5B,EAAiC,iBAAjC,CAAN;AACD;;AACD,MAAIS,KAAK,CAACD,MAAV,EAAkB;AAChBL,IAAAA,IAAI,GAAI,IAAIM,KAAK,CAACI,IAAN,CAAW,GAAX,CAAiB,EAA7B;AACD;;AACD,SAAO;AACLzB,IAAAA,GAAG,EAAEa,KADA;AAELE,IAAAA;AAFK,GAAP;AAID;;AAEDjB,OAAO,CAACS,YAAR,GAAuBA,YAAvB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar errCode = require('err-code');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst IPFS_PREFIX = '/ipfs/';\nfunction toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = cid.CID.decode(string);\n    } catch (err) {\n      throw errCode__default[\"default\"](err, 'ERR_INVALID_CID');\n    }\n  }\n  let cid$1 = cid.CID.asCID(string);\n  if (cid$1) {\n    return {\n      cid: cid$1,\n      path: undefined\n    };\n  }\n  string = string.toString();\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n  const parts = string.split('/');\n  let path;\n  try {\n    cid$1 = cid.CID.parse(parts.shift() || '');\n  } catch (err) {\n    throw errCode__default[\"default\"](err, 'ERR_INVALID_CID');\n  }\n  if (parts.length) {\n    path = `/${ parts.join('/') }`;\n  }\n  return {\n    cid: cid$1,\n    path\n  };\n}\n\nexports.toCidAndPath = toCidAndPath;\n"]},"metadata":{},"sourceType":"script"}