{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar toUri = require('multiaddr-to-uri');\n\nvar debug = require('debug');\n\nvar shuffle = require('array-shuffle');\n\nvar preload = require('ipfs-core-config/preload');\n\nvar hashlru = require('hashlru');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar toUri__default = /*#__PURE__*/_interopDefaultLegacy(toUri);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar shuffle__default = /*#__PURE__*/_interopDefaultLegacy(shuffle);\n\nvar hashlru__default = /*#__PURE__*/_interopDefaultLegacy(hashlru);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:preload'), {\n  error: debug__default[\"default\"]('ipfs:preload:error')\n});\n\nfunction createPreloader() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n  options.cache = options.cache || 1000;\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n\n    const api = () => {};\n\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    });\n  }\n\n  let stopped = true;\n  let requests = [];\n  const apiUris = options.addresses.map(toUri__default[\"default\"]);\n  const cache = hashlru__default[\"default\"](options.cache);\n\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`);\n      }\n\n      const path = cid.toString();\n\n      if (cache.has(path)) {\n        return;\n      }\n\n      cache.set(path, true);\n      const fallbackApiUris = shuffle__default[\"default\"](apiUris);\n      let success = false;\n      const now = Date.now();\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`);\n        let controller;\n\n        try {\n          controller = new AbortController();\n          requests = requests.concat(controller);\n          await preload.preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, {\n            signal: controller.signal\n          });\n          success = true;\n        } catch (err) {\n          if (err.type !== 'aborted') log.error(err);\n        } finally {\n          requests = requests.filter(r => r !== controller);\n        }\n\n        if (success) break;\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`);\n    } catch (err) {\n      log.error(err);\n    }\n  };\n\n  api.start = () => {\n    stopped = false;\n  };\n\n  api.stop = () => {\n    stopped = true;\n    log(`aborting ${requests.length} pending preload request(s)`);\n    requests.forEach(r => r.abort());\n    requests = [];\n  };\n\n  return api;\n}\n\nexports.createPreloader = createPreloader;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/preload.js"],"names":["Object","defineProperty","exports","value","toUri","require","debug","shuffle","preload","hashlru","_interopDefaultLegacy","e","toUri__default","debug__default","shuffle__default","hashlru__default","log","assign","error","createPreloader","options","enabled","Boolean","addresses","cache","length","api","start","stop","stopped","requests","apiUris","map","cid","Error","path","toString","has","set","fallbackApiUris","success","now","Date","uri","controller","AbortController","concat","encodeURIComponent","signal","err","type","filter","r","forEach","abort"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar toUri = require('multiaddr-to-uri');\nvar debug = require('debug');\nvar shuffle = require('array-shuffle');\nvar preload = require('ipfs-core-config/preload');\nvar hashlru = require('hashlru');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar toUri__default = /*#__PURE__*/_interopDefaultLegacy(toUri);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar shuffle__default = /*#__PURE__*/_interopDefaultLegacy(shuffle);\nvar hashlru__default = /*#__PURE__*/_interopDefaultLegacy(hashlru);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:preload'), { error: debug__default[\"default\"]('ipfs:preload:error') });\nfunction createPreloader(options = {}) {\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n  options.cache = options.cache || 1000;\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n    const api = () => {\n    };\n    return Object.assign(api, {\n      start: () => {\n      },\n      stop: () => {\n      }\n    });\n  }\n  let stopped = true;\n  let requests = [];\n  const apiUris = options.addresses.map(toUri__default[\"default\"]);\n  const cache = hashlru__default[\"default\"](options.cache);\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${ cid } but preloader is not started`);\n      }\n      const path = cid.toString();\n      if (cache.has(path)) {\n        return;\n      }\n      cache.set(path, true);\n      const fallbackApiUris = shuffle__default[\"default\"](apiUris);\n      let success = false;\n      const now = Date.now();\n      for (const uri of fallbackApiUris) {\n        if (stopped)\n          throw new Error(`preload aborted for ${ path }`);\n        let controller;\n        try {\n          controller = new AbortController();\n          requests = requests.concat(controller);\n          await preload.preload(`${ uri }/api/v0/refs?r=true&arg=${ encodeURIComponent(path) }`, { signal: controller.signal });\n          success = true;\n        } catch (err) {\n          if (err.type !== 'aborted')\n            log.error(err);\n        } finally {\n          requests = requests.filter(r => r !== controller);\n        }\n        if (success)\n          break;\n      }\n      log(`${ success ? '' : 'un' }successfully preloaded ${ path } in ${ Date.now() - now }ms`);\n    } catch (err) {\n      log.error(err);\n    }\n  };\n  api.start = () => {\n    stopped = false;\n  };\n  api.stop = () => {\n    stopped = true;\n    log(`aborting ${ requests.length } pending preload request(s)`);\n    requests.forEach(r => r.abort());\n    requests = [];\n  };\n  return api;\n}\n\nexports.createPreloader = createPreloader;\n"]},"metadata":{},"sourceType":"script"}