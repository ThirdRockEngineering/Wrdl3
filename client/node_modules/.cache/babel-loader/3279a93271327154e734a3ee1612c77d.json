{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar interfaceDatastore = require('interface-datastore');\n\nvar datastoreCore = require('datastore-core');\n\nvar utils = require('./utils.js');\n\nvar equals = require('uint8arrays/equals');\n\nvar errcode = require('err-code');\n\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('datastore-pubsub:publisher'), {\n  error: debug__default[\"default\"]('datastore-pubsub:publisher:error')\n});\n\nclass PubsubDatastore extends datastoreCore.BaseDatastore {\n  constructor(pubsub, datastore, peerId, validator, subscriptionKeyFn) {\n    super();\n\n    if (!validator) {\n      throw errcode__default[\"default\"](new TypeError('missing validator'), 'ERR_INVALID_PARAMETERS');\n    }\n\n    if (typeof validator.validate !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('missing validate function'), 'ERR_INVALID_PARAMETERS');\n    }\n\n    if (typeof validator.select !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('missing select function'), 'ERR_INVALID_PARAMETERS');\n    }\n\n    if (subscriptionKeyFn && typeof subscriptionKeyFn !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('invalid subscriptionKeyFn received'), 'ERR_INVALID_PARAMETERS');\n    }\n\n    this._pubsub = pubsub;\n    this._datastore = datastore;\n    this._peerId = peerId;\n    this._validator = validator;\n    this._handleSubscriptionKeyFn = subscriptionKeyFn;\n    this._onMessage = this._onMessage.bind(this);\n  }\n\n  async put(key, val) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');\n    }\n\n    if (!(val instanceof Uint8Array)) {\n      const errMsg = 'received value is not a Uint8Array';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_VALUE_RECEIVED');\n    }\n\n    const stringifiedTopic = utils.keyToTopic(key);\n    log(`publish value for topic ${stringifiedTopic}`);\n    await this._pubsub.publish(stringifiedTopic, val);\n  }\n\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');\n    }\n\n    const stringifiedTopic = utils.keyToTopic(key);\n    const subscriptions = await this._pubsub.getTopics();\n\n    if (subscriptions && Array.isArray(subscriptions) && subscriptions.indexOf(stringifiedTopic) > -1) {\n      return this._getLocal(key);\n    }\n\n    try {\n      this._pubsub.on(stringifiedTopic, this._onMessage);\n\n      await this._pubsub.subscribe(stringifiedTopic);\n    } catch (err) {\n      const errMsg = `cannot subscribe topic ${stringifiedTopic}`;\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_SUBSCRIBING_TOPIC');\n    }\n\n    log(`subscribed values for key ${stringifiedTopic}`);\n    return this._getLocal(key);\n  }\n\n  unsubscribe(key) {\n    const stringifiedTopic = utils.keyToTopic(key);\n\n    this._pubsub.removeListener(stringifiedTopic, this._onMessage);\n\n    return this._pubsub.unsubscribe(stringifiedTopic);\n  }\n\n  async _getLocal(key) {\n    const routingKey = new interfaceDatastore.Key('/' + utils.encodeBase32(key), false);\n    let dsVal;\n\n    try {\n      dsVal = await this._datastore.get(routingKey);\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        const errMsg = `unexpected error getting the ipns record for ${routingKey.toString()}`;\n        log.error(errMsg);\n        throw errcode__default[\"default\"](new Error(errMsg), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');\n      }\n\n      const errMsg = `local record requested was not found for ${routingKey.toString()}`;\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_NOT_FOUND');\n    }\n\n    if (!(dsVal instanceof Uint8Array)) {\n      const errMsg = 'found record that we couldn\\'t convert to a value';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_RECORD_RECEIVED');\n    }\n\n    return dsVal;\n  }\n\n  async _onMessage(msg) {\n    const {\n      data,\n      from,\n      topicIDs\n    } = msg;\n    let key;\n\n    try {\n      key = utils.topicToKey(topicIDs[0]);\n    } catch (err) {\n      log.error(err);\n      return;\n    }\n\n    log(`message received for topic ${topicIDs[0]}`);\n\n    if (from === this._peerId.toB58String()) {\n      log('message discarded as it is from the same peer');\n      return;\n    }\n\n    if (this._handleSubscriptionKeyFn) {\n      let res;\n\n      try {\n        res = await this._handleSubscriptionKeyFn(key);\n      } catch (err) {\n        log.error('message discarded by the subscriptionKeyFn');\n        return;\n      }\n\n      key = res;\n    }\n\n    try {\n      await this._storeIfSubscriptionIsBetter(key, data);\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  async _storeIfSubscriptionIsBetter(key, data) {\n    let isBetter = false;\n\n    try {\n      isBetter = await this._isBetter(key, data);\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_VALID_RECORD') {\n        throw err;\n      }\n    }\n\n    if (isBetter) {\n      await this._storeRecord(key, data);\n    }\n  }\n\n  async _validateRecord(value, peerId) {\n    return this._validator.validate(value, peerId);\n  }\n\n  async _selectRecord(key, records) {\n    const res = await this._validator.select(key, records);\n    return res === 0;\n  }\n\n  async _isBetter(key, val) {\n    try {\n      await this._validateRecord(val, key);\n    } catch (err) {\n      const errMsg = 'record received through pubsub is not valid';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_NOT_VALID_RECORD');\n    }\n\n    const dsKey = new interfaceDatastore.Key(key);\n    let currentRecord;\n\n    try {\n      currentRecord = await this._getLocal(dsKey.uint8Array());\n    } catch (err) {\n      return true;\n    }\n\n    if (equals.equals(currentRecord, val)) {\n      return false;\n    }\n\n    return this._selectRecord(key, [currentRecord, val]);\n  }\n\n  async _storeRecord(key, data) {\n    const routingKey = new interfaceDatastore.Key('/' + utils.encodeBase32(key), false);\n    await this._datastore.put(routingKey, data);\n    log(`record for ${utils.keyToTopic(key)} was stored in the datastore`);\n  }\n\n}\n\nexports.PubsubDatastore = PubsubDatastore;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/datastore-pubsub/cjs/src/index.js"],"names":["Object","defineProperty","exports","value","interfaceDatastore","require","datastoreCore","utils","equals","errcode","debug","_interopDefaultLegacy","e","errcode__default","debug__default","log","assign","error","PubsubDatastore","BaseDatastore","constructor","pubsub","datastore","peerId","validator","subscriptionKeyFn","TypeError","validate","select","_pubsub","_datastore","_peerId","_validator","_handleSubscriptionKeyFn","_onMessage","bind","put","key","val","Uint8Array","errMsg","Error","stringifiedTopic","keyToTopic","publish","get","subscriptions","getTopics","Array","isArray","indexOf","_getLocal","on","subscribe","err","unsubscribe","removeListener","routingKey","Key","encodeBase32","dsVal","code","toString","msg","data","from","topicIDs","topicToKey","toB58String","res","_storeIfSubscriptionIsBetter","isBetter","_isBetter","_storeRecord","_validateRecord","_selectRecord","records","dsKey","currentRecord","uint8Array"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar interfaceDatastore = require('interface-datastore');\nvar datastoreCore = require('datastore-core');\nvar utils = require('./utils.js');\nvar equals = require('uint8arrays/equals');\nvar errcode = require('err-code');\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errcode__default = /*#__PURE__*/_interopDefaultLegacy(errcode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('datastore-pubsub:publisher'), { error: debug__default[\"default\"]('datastore-pubsub:publisher:error') });\nclass PubsubDatastore extends datastoreCore.BaseDatastore {\n  constructor(pubsub, datastore, peerId, validator, subscriptionKeyFn) {\n    super();\n    if (!validator) {\n      throw errcode__default[\"default\"](new TypeError('missing validator'), 'ERR_INVALID_PARAMETERS');\n    }\n    if (typeof validator.validate !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('missing validate function'), 'ERR_INVALID_PARAMETERS');\n    }\n    if (typeof validator.select !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('missing select function'), 'ERR_INVALID_PARAMETERS');\n    }\n    if (subscriptionKeyFn && typeof subscriptionKeyFn !== 'function') {\n      throw errcode__default[\"default\"](new TypeError('invalid subscriptionKeyFn received'), 'ERR_INVALID_PARAMETERS');\n    }\n    this._pubsub = pubsub;\n    this._datastore = datastore;\n    this._peerId = peerId;\n    this._validator = validator;\n    this._handleSubscriptionKeyFn = subscriptionKeyFn;\n    this._onMessage = this._onMessage.bind(this);\n  }\n  async put(key, val) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');\n    }\n    if (!(val instanceof Uint8Array)) {\n      const errMsg = 'received value is not a Uint8Array';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_VALUE_RECEIVED');\n    }\n    const stringifiedTopic = utils.keyToTopic(key);\n    log(`publish value for topic ${ stringifiedTopic }`);\n    await this._pubsub.publish(stringifiedTopic, val);\n  }\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      const errMsg = 'datastore key does not have a valid format';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_DATASTORE_KEY');\n    }\n    const stringifiedTopic = utils.keyToTopic(key);\n    const subscriptions = await this._pubsub.getTopics();\n    if (subscriptions && Array.isArray(subscriptions) && subscriptions.indexOf(stringifiedTopic) > -1) {\n      return this._getLocal(key);\n    }\n    try {\n      this._pubsub.on(stringifiedTopic, this._onMessage);\n      await this._pubsub.subscribe(stringifiedTopic);\n    } catch (err) {\n      const errMsg = `cannot subscribe topic ${ stringifiedTopic }`;\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_SUBSCRIBING_TOPIC');\n    }\n    log(`subscribed values for key ${ stringifiedTopic }`);\n    return this._getLocal(key);\n  }\n  unsubscribe(key) {\n    const stringifiedTopic = utils.keyToTopic(key);\n    this._pubsub.removeListener(stringifiedTopic, this._onMessage);\n    return this._pubsub.unsubscribe(stringifiedTopic);\n  }\n  async _getLocal(key) {\n    const routingKey = new interfaceDatastore.Key('/' + utils.encodeBase32(key), false);\n    let dsVal;\n    try {\n      dsVal = await this._datastore.get(routingKey);\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_FOUND') {\n        const errMsg = `unexpected error getting the ipns record for ${ routingKey.toString() }`;\n        log.error(errMsg);\n        throw errcode__default[\"default\"](new Error(errMsg), 'ERR_UNEXPECTED_ERROR_GETTING_RECORD');\n      }\n      const errMsg = `local record requested was not found for ${ routingKey.toString() }`;\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_NOT_FOUND');\n    }\n    if (!(dsVal instanceof Uint8Array)) {\n      const errMsg = 'found record that we couldn\\'t convert to a value';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_INVALID_RECORD_RECEIVED');\n    }\n    return dsVal;\n  }\n  async _onMessage(msg) {\n    const {data, from, topicIDs} = msg;\n    let key;\n    try {\n      key = utils.topicToKey(topicIDs[0]);\n    } catch (err) {\n      log.error(err);\n      return;\n    }\n    log(`message received for topic ${ topicIDs[0] }`);\n    if (from === this._peerId.toB58String()) {\n      log('message discarded as it is from the same peer');\n      return;\n    }\n    if (this._handleSubscriptionKeyFn) {\n      let res;\n      try {\n        res = await this._handleSubscriptionKeyFn(key);\n      } catch (err) {\n        log.error('message discarded by the subscriptionKeyFn');\n        return;\n      }\n      key = res;\n    }\n    try {\n      await this._storeIfSubscriptionIsBetter(key, data);\n    } catch (err) {\n      log.error(err);\n    }\n  }\n  async _storeIfSubscriptionIsBetter(key, data) {\n    let isBetter = false;\n    try {\n      isBetter = await this._isBetter(key, data);\n    } catch (err) {\n      if (err.code !== 'ERR_NOT_VALID_RECORD') {\n        throw err;\n      }\n    }\n    if (isBetter) {\n      await this._storeRecord(key, data);\n    }\n  }\n  async _validateRecord(value, peerId) {\n    return this._validator.validate(value, peerId);\n  }\n  async _selectRecord(key, records) {\n    const res = await this._validator.select(key, records);\n    return res === 0;\n  }\n  async _isBetter(key, val) {\n    try {\n      await this._validateRecord(val, key);\n    } catch (err) {\n      const errMsg = 'record received through pubsub is not valid';\n      log.error(errMsg);\n      throw errcode__default[\"default\"](new Error(errMsg), 'ERR_NOT_VALID_RECORD');\n    }\n    const dsKey = new interfaceDatastore.Key(key);\n    let currentRecord;\n    try {\n      currentRecord = await this._getLocal(dsKey.uint8Array());\n    } catch (err) {\n      return true;\n    }\n    if (equals.equals(currentRecord, val)) {\n      return false;\n    }\n    return this._selectRecord(key, [\n      currentRecord,\n      val\n    ]);\n  }\n  async _storeRecord(key, data) {\n    const routingKey = new interfaceDatastore.Key('/' + utils.encodeBase32(key), false);\n    await this._datastore.put(routingKey, data);\n    log(`record for ${ utils.keyToTopic(key) } was stored in the datastore`);\n  }\n}\n\nexports.PubsubDatastore = PubsubDatastore;\n"]},"metadata":{},"sourceType":"script"}