{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar ipfsUnixfs = require('ipfs-unixfs');\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar sha2 = require('multiformats/hashes/sha2');\n\nvar debug = require('debug');\n\nvar errCode = require('err-code');\n\nvar utils = require('../../../utils.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:with-mfs-root');\n\nasync function loadMfsRoot(context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode__default[\"default\"](new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  }\n\n  await context.repo.datastore.open();\n  let cid$1;\n\n  try {\n    const buf = await context.repo.datastore.get(utils.MFS_ROOT_KEY);\n    cid$1 = cid.CID.decode(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const buf = dagPB__namespace.encode({\n      Data: new ipfsUnixfs.UnixFS({\n        type: 'directory'\n      }).marshal(),\n      Links: []\n    });\n    const hash = await sha2.sha256.digest(buf);\n    cid$1 = cid.CID.createV0(hash);\n    await context.repo.blocks.put(cid$1, buf);\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode__default[\"default\"](new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n\n    await context.repo.datastore.put(utils.MFS_ROOT_KEY, cid$1.bytes);\n  }\n\n  log(`Loaded MFS root /ipfs/${cid$1}`);\n  return cid$1;\n}\n\nexports.loadMfsRoot = loadMfsRoot;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/files/utils/with-mfs-root.js"],"names":["Object","defineProperty","exports","value","cid","require","ipfsUnixfs","dagPB","sha2","debug","errCode","utils","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","dagPB__namespace","debug__default","errCode__default","log","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","cid$1","buf","MFS_ROOT_KEY","CID","decode","err","code","encode","Data","UnixFS","type","marshal","Links","hash","sha256","digest","createV0","blocks","put","bytes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar ipfsUnixfs = require('ipfs-unixfs');\nvar dagPB = require('@ipld/dag-pb');\nvar sha2 = require('multiformats/hashes/sha2');\nvar debug = require('debug');\nvar errCode = require('err-code');\nvar utils = require('../../../utils.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:with-mfs-root');\nasync function loadMfsRoot(context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode__default[\"default\"](new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });\n  }\n  await context.repo.datastore.open();\n  let cid$1;\n  try {\n    const buf = await context.repo.datastore.get(utils.MFS_ROOT_KEY);\n    cid$1 = cid.CID.decode(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n    log('Creating new MFS root');\n    const buf = dagPB__namespace.encode({\n      Data: new ipfsUnixfs.UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    });\n    const hash = await sha2.sha256.digest(buf);\n    cid$1 = cid.CID.createV0(hash);\n    await context.repo.blocks.put(cid$1, buf);\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode__default[\"default\"](new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' });\n    }\n    await context.repo.datastore.put(utils.MFS_ROOT_KEY, cid$1.bytes);\n  }\n  log(`Loaded MFS root /ipfs/${ cid$1 }`);\n  return cid$1;\n}\n\nexports.loadMfsRoot = loadMfsRoot;\n"]},"metadata":{},"sourceType":"script"}