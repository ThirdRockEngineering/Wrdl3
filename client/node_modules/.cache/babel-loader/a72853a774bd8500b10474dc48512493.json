{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractHandshake = exports.MAX_NONCE = exports.MIN_NONCE = void 0;\n\nconst x25519 = __importStar(require(\"@stablelib/x25519\"));\n\nconst SHA256 = __importStar(require(\"@stablelib/sha256\"));\n\nconst chacha20poly1305_1 = require(\"@stablelib/chacha20poly1305\");\n\nconst equals_1 = require(\"uint8arrays/equals\");\n\nconst concat_1 = require(\"uint8arrays/concat\");\n\nconst uint8arrays_1 = require(\"uint8arrays\");\n\nconst utils_1 = require(\"../utils\");\n\nconst logger_1 = require(\"../logger\");\n\nexports.MIN_NONCE = 0; // For performance reasons, the nonce is represented as a JS `number`\n// JS `number` can only safely represent integers up to 2 ** 53 - 1\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// 2 ** 53 - 1 is still a large number of messages, so the practical effect of this is negligible.\n\nexports.MAX_NONCE = Number.MAX_SAFE_INTEGER;\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';\n\nclass AbstractHandshake {\n  encryptWithAd(cs, ad, plaintext) {\n    const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n    return e;\n  }\n\n  decryptWithAd(cs, ad, ciphertext) {\n    const {\n      plaintext,\n      valid\n    } = this.decrypt(cs.k, cs.n, ad, ciphertext);\n    this.setNonce(cs, this.incrementNonce(cs.n));\n    return {\n      plaintext,\n      valid\n    };\n  } // Cipher state related\n\n\n  hasKey(cs) {\n    return !this.isEmptyKey(cs.k);\n  }\n\n  setNonce(cs, nonce) {\n    cs.n = nonce;\n  }\n\n  createEmptyKey() {\n    return new Uint8Array(32);\n  }\n\n  isEmptyKey(k) {\n    const emptyKey = this.createEmptyKey();\n    return (0, equals_1.equals)(emptyKey, k);\n  }\n\n  incrementNonce(n) {\n    return n + 1;\n  }\n\n  nonceToBytes(n) {\n    // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n    const nonce = new Uint8Array(12);\n    new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength).setUint32(4, n, true);\n    return nonce;\n  }\n\n  encrypt(k, n, ad, plaintext) {\n    if (n > exports.MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE);\n    }\n\n    const nonce = this.nonceToBytes(n);\n    const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n    return ctx.seal(nonce, plaintext, ad);\n  }\n\n  encryptAndHash(ss, plaintext) {\n    let ciphertext;\n\n    if (this.hasKey(ss.cs)) {\n      ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n    } else {\n      ciphertext = plaintext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return ciphertext;\n  }\n\n  decrypt(k, n, ad, ciphertext) {\n    if (n > exports.MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE);\n    }\n\n    const nonce = this.nonceToBytes(n);\n    const ctx = new chacha20poly1305_1.ChaCha20Poly1305(k);\n    const encryptedMessage = ctx.open(nonce, ciphertext, ad);\n\n    if (encryptedMessage) {\n      return {\n        plaintext: encryptedMessage,\n        valid: true\n      };\n    } else {\n      return {\n        plaintext: new Uint8Array(0),\n        valid: false\n      };\n    }\n  }\n\n  decryptAndHash(ss, ciphertext) {\n    let plaintext;\n    let valid = true;\n\n    if (this.hasKey(ss.cs)) {\n      ({\n        plaintext,\n        valid\n      } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n    } else {\n      plaintext = ciphertext;\n    }\n\n    this.mixHash(ss, ciphertext);\n    return {\n      plaintext,\n      valid\n    };\n  }\n\n  dh(privateKey, publicKey) {\n    try {\n      const derivedU8 = x25519.sharedKey(privateKey, publicKey);\n\n      if (derivedU8.length === 32) {\n        return derivedU8;\n      }\n\n      return derivedU8.slice(0, 32);\n    } catch (e) {\n      (0, logger_1.logger)(e.message);\n      return new Uint8Array(32);\n    }\n  }\n\n  mixHash(ss, data) {\n    ss.h = this.getHash(ss.h, data);\n  }\n\n  getHash(a, b) {\n    const u = SHA256.hash((0, concat_1.concat)([a, b], a.length + b.length));\n    return u;\n  }\n\n  mixKey(ss, ikm) {\n    const [ck, tempK] = (0, utils_1.getHkdf)(ss.ck, ikm);\n    ss.cs = this.initializeKey(tempK);\n    ss.ck = ck;\n  }\n\n  initializeKey(k) {\n    const n = exports.MIN_NONCE;\n    return {\n      k,\n      n\n    };\n  } // Symmetric state related\n\n\n  initializeSymmetric(protocolName) {\n    const protocolNameBytes = (0, uint8arrays_1.fromString)(protocolName, 'utf-8');\n    const h = this.hashProtocolName(protocolNameBytes);\n    const ck = h;\n    const key = this.createEmptyKey();\n    const cs = this.initializeKey(key);\n    return {\n      cs,\n      ck,\n      h\n    };\n  }\n\n  hashProtocolName(protocolName) {\n    if (protocolName.length <= 32) {\n      const h = new Uint8Array(32);\n      h.set(protocolName);\n      return h;\n    } else {\n      return this.getHash(protocolName, new Uint8Array(0));\n    }\n  }\n\n  split(ss) {\n    const [tempk1, tempk2] = (0, utils_1.getHkdf)(ss.ck, new Uint8Array(0));\n    const cs1 = this.initializeKey(tempk1);\n    const cs2 = this.initializeKey(tempk2);\n    return {\n      cs1,\n      cs2\n    };\n  }\n\n  writeMessageRegular(cs, payload) {\n    const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);\n    const ne = this.createEmptyKey();\n    const ns = new Uint8Array(0);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  readMessageRegular(cs, message) {\n    return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);\n  }\n\n}\n\nexports.AbstractHandshake = AbstractHandshake;","map":{"version":3,"mappings":"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","names":["exports","Number","MAX_SAFE_INTEGER","ERR_MAX_NONCE","AbstractHandshake","encryptWithAd","cs","ad","plaintext","e","encrypt","k","n","setNonce","incrementNonce","decryptWithAd","ciphertext","valid","decrypt","hasKey","isEmptyKey","nonce","createEmptyKey","Uint8Array","emptyKey","nonceToBytes","DataView","buffer","byteOffset","byteLength","setUint32","Error","ctx","chacha20poly1305_1","seal","encryptAndHash","ss","h","mixHash","encryptedMessage","open","decryptAndHash","dh","privateKey","publicKey","derivedU8","x25519","sharedKey","length","slice","message","data","getHash","a","b","u","SHA256","hash","mixKey","ikm","ck","tempK","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","key","set","split","tempk1","tempk2","cs1","cs2","writeMessageRegular","payload","ne","ns","readMessageRegular"],"sourceRoot":"","sources":["../../../src/handshakes/abstract-handshake.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}