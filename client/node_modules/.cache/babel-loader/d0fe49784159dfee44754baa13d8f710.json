{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar parseDuration = require('parse-duration');\n\nvar errCode = require('err-code');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar PeerId = require('peer-id');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\n\nfunction getBandwidthStats(libp2p, opts) {\n  let stats;\n\n  if (!libp2p.metrics) {\n    stats = undefined;\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(PeerId__default[\"default\"].parse(opts.peer));\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0,\n      rateOut: 0\n    };\n  }\n\n  const {\n    movingAverages,\n    snapshot\n  } = stats;\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  };\n}\n\nfunction createBw(_ref) {\n  let {\n    network\n  } = _ref;\n\n  const bw = async function* () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options);\n      return;\n    }\n\n    const interval = options.interval || 1000;\n    let ms = -1;\n\n    try {\n      ms = typeof interval === 'string' ? parseDuration__default[\"default\"](interval) || -1 : interval;\n      if (!ms || ms < 0) throw new Error('invalid duration');\n    } catch (err) {\n      throw errCode__default[\"default\"](err, 'ERR_INVALID_POLL_INTERVAL');\n    }\n\n    let timeoutId;\n\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options);\n        await new Promise(resolve => {\n          timeoutId = setTimeout(resolve, ms);\n        });\n      }\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  };\n\n  return withTimeoutOption.withTimeoutOption(bw);\n}\n\nexports.createBw = createBw;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/stats/bw.js"],"names":["Object","defineProperty","exports","value","parseDuration","require","errCode","withTimeoutOption","PeerId","_interopDefaultLegacy","e","parseDuration__default","errCode__default","PeerId__default","getBandwidthStats","libp2p","opts","stats","metrics","undefined","peer","forPeer","parse","proto","forProtocol","global","totalIn","BigInt","totalOut","rateIn","rateOut","movingAverages","snapshot","dataReceived","integerValue","toString","dataSent","movingAverage","createBw","network","bw","options","use","poll","interval","ms","Error","err","timeoutId","Promise","resolve","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar parseDuration = require('parse-duration');\nvar errCode = require('err-code');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar PeerId = require('peer-id');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar parseDuration__default = /*#__PURE__*/_interopDefaultLegacy(parseDuration);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar PeerId__default = /*#__PURE__*/_interopDefaultLegacy(PeerId);\n\nfunction getBandwidthStats(libp2p, opts) {\n  let stats;\n  if (!libp2p.metrics) {\n    stats = undefined;\n  } else if (opts.peer) {\n    stats = libp2p.metrics.forPeer(PeerId__default[\"default\"].parse(opts.peer));\n  } else if (opts.proto) {\n    stats = libp2p.metrics.forProtocol(opts.proto);\n  } else {\n    stats = libp2p.metrics.global;\n  }\n  if (!stats) {\n    return {\n      totalIn: BigInt(0),\n      totalOut: BigInt(0),\n      rateIn: 0,\n      rateOut: 0\n    };\n  }\n  const {movingAverages, snapshot} = stats;\n  return {\n    totalIn: BigInt(snapshot.dataReceived.integerValue().toString()),\n    totalOut: BigInt(snapshot.dataSent.integerValue().toString()),\n    rateIn: movingAverages.dataReceived[60000].movingAverage() / 60,\n    rateOut: movingAverages.dataSent[60000].movingAverage() / 60\n  };\n}\nfunction createBw({network}) {\n  const bw = async function* (options = {}) {\n    const {libp2p} = await network.use(options);\n    if (!options.poll) {\n      yield getBandwidthStats(libp2p, options);\n      return;\n    }\n    const interval = options.interval || 1000;\n    let ms = -1;\n    try {\n      ms = typeof interval === 'string' ? parseDuration__default[\"default\"](interval) || -1 : interval;\n      if (!ms || ms < 0)\n        throw new Error('invalid duration');\n    } catch (err) {\n      throw errCode__default[\"default\"](err, 'ERR_INVALID_POLL_INTERVAL');\n    }\n    let timeoutId;\n    try {\n      while (true) {\n        yield getBandwidthStats(libp2p, options);\n        await new Promise(resolve => {\n          timeoutId = setTimeout(resolve, ms);\n        });\n      }\n    } finally {\n      clearTimeout(timeoutId);\n    }\n  };\n  return withTimeoutOption.withTimeoutOption(bw);\n}\n\nexports.createBw = createBw;\n"]},"metadata":{},"sourceType":"script"}