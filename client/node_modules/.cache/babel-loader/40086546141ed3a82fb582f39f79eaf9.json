{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar key = require('interface-datastore/key');\n\nvar libp2pRecord = require('libp2p-record');\n\nvar errCode = require('err-code');\n\nvar debug = require('debug');\n\nvar toString = require('uint8arrays/to-string');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:ipns:offline-datastore'), {\n  error: debug__default[\"default\"]('ipfs:ipns:offline-datastore:error')\n});\n\nclass OfflineDatastore {\n  constructor(repo) {\n    this._repo = repo;\n    this.stores = [];\n  }\n\n  async put(key, value) {\n    if (!(key instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errCode__default[\"default\"](new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n\n    const record = new libp2pRecord.Record(key, value);\n    return this._repo.datastore.put(routingKey, record.serialize());\n  }\n\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errCode__default[\"default\"](new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n\n    const res = await this._repo.datastore.get(routingKey);\n    let record;\n\n    try {\n      record = libp2pRecord.Record.deserialize(res);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    return record.value;\n  }\n\n  _routingKey(key$1) {\n    return new key.Key('/dht/record/' + toString.toString(key$1, 'base32'), false);\n  }\n\n}\n\nexports.OfflineDatastore = OfflineDatastore;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/ipns/routing/offline-datastore.js"],"names":["Object","defineProperty","exports","value","key","require","libp2pRecord","errCode","debug","toString","_interopDefaultLegacy","e","errCode__default","debug__default","log","assign","error","OfflineDatastore","constructor","repo","_repo","stores","put","Uint8Array","Error","routingKey","_routingKey","err","record","Record","datastore","serialize","get","res","deserialize","key$1","Key"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar key = require('interface-datastore/key');\nvar libp2pRecord = require('libp2p-record');\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar toString = require('uint8arrays/to-string');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:ipns:offline-datastore'), { error: debug__default[\"default\"]('ipfs:ipns:offline-datastore:error') });\nclass OfflineDatastore {\n  constructor(repo) {\n    this._repo = repo;\n    this.stores = [];\n  }\n  async put(key, value) {\n    if (!(key instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n    if (!(value instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');\n    }\n    let routingKey;\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errCode__default[\"default\"](new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n    const record = new libp2pRecord.Record(key, value);\n    return this._repo.datastore.put(routingKey, record.serialize());\n  }\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errCode__default[\"default\"](new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n    let routingKey;\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errCode__default[\"default\"](new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n    const res = await this._repo.datastore.get(routingKey);\n    let record;\n    try {\n      record = libp2pRecord.Record.deserialize(res);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n    return record.value;\n  }\n  _routingKey(key$1) {\n    return new key.Key('/dht/record/' + toString.toString(key$1, 'base32'), false);\n  }\n}\n\nexports.OfflineDatastore = OfflineDatastore;\n"]},"metadata":{},"sourceType":"script"}