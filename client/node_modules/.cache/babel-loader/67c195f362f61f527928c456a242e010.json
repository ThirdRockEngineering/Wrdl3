{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst log = require('debug')('libp2p:mplex:stream');\n\nconst pushable = require('it-pushable');\n\nconst BufferList = require('bl/BufferList');\n\nconst errCode = require('err-code');\n\nconst {\n  MAX_MSG_SIZE\n} = require('./restrict-size');\n\nconst {\n  InitiatorMessageTypes,\n  ReceiverMessageTypes\n} = require('./message-types');\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET';\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT';\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\n\nmodule.exports = _ref => {\n  let {\n    id,\n    name,\n    send,\n    onEnd = () => {},\n    type = 'initiator',\n    maxMsgSize = MAX_MSG_SIZE\n  } = _ref;\n  const abortController = new AbortController();\n  const resetController = new AbortController();\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n  const externalId = type === 'initiator' ? `i${id}` : `r${id}`;\n  name = String(name == null ? id : name);\n  let sourceEnded = false;\n  let sinkEnded = false;\n  let endErr;\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return;\n    sourceEnded = true;\n    log('%s stream %s source end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sinkEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return;\n    sinkEnded = true;\n    log('%s stream %s sink end', type, name, err);\n    if (err && !endErr) endErr = err;\n\n    if (sourceEnded) {\n      stream.timeline.close = Date.now();\n      onEnd(endErr);\n    }\n  };\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err); // End the source with the passed error\n\n      stream.source.end(err);\n      abortController.abort();\n      onSinkEnd(err);\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET);\n      resetController.abort();\n      stream.source.end(err);\n      onSinkEnd(err);\n    },\n    sink: async source => {\n      source = abortable(source, [{\n        signal: abortController.signal,\n        options: {\n          abortMessage: 'stream aborted',\n          abortCode: ERR_MPLEX_STREAM_ABORT\n        }\n      }, {\n        signal: resetController.signal,\n        options: {\n          abortMessage: 'stream reset',\n          abortCode: ERR_MPLEX_STREAM_RESET\n        }\n      }]);\n\n      if (type === 'initiator') {\n        // If initiator, open a new stream\n        send({\n          id,\n          type: Types.NEW_STREAM,\n          data: name\n        });\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({\n                id,\n                type: Types.MESSAGE,\n                data\n              });\n              break;\n            }\n\n            data = BufferList.isBufferList(data) ? data : new BufferList(data);\n            send({\n              id,\n              type: Types.MESSAGE,\n              data: data.shallowSlice(0, maxMsgSize)\n            });\n            data.consume(maxMsgSize);\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name);\n        } else {\n          log('%s stream %s error', type, name, err);\n          send({\n            id,\n            type: Types.RESET\n          });\n        }\n\n        stream.source.end(err);\n        return onSinkEnd(err);\n      }\n\n      send({\n        id,\n        type: Types.CLOSE\n      });\n      onSinkEnd();\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  };\n  return stream;\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-mplex/src/stream.js"],"names":["abortable","require","log","pushable","BufferList","errCode","MAX_MSG_SIZE","InitiatorMessageTypes","ReceiverMessageTypes","ERR_MPLEX_STREAM_RESET","ERR_MPLEX_STREAM_ABORT","module","exports","id","name","send","onEnd","type","maxMsgSize","abortController","AbortController","resetController","Types","externalId","String","sourceEnded","sinkEnded","endErr","onSourceEnd","err","stream","timeline","close","Date","now","onSinkEnd","source","end","abort","reset","Error","sink","signal","options","abortMessage","abortCode","NEW_STREAM","data","length","MESSAGE","isBufferList","shallowSlice","consume","code","RESET","CLOSE","open"],"mappings":"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","sourcesContent":["'use strict'\n\nconst abortable = require('abortable-iterator')\nconst log = require('debug')('libp2p:mplex:stream')\nconst pushable = require('it-pushable')\nconst BufferList = require('bl/BufferList')\nconst errCode = require('err-code')\nconst { MAX_MSG_SIZE } = require('./restrict-size')\nconst { InitiatorMessageTypes, ReceiverMessageTypes } = require('./message-types')\n\nconst ERR_MPLEX_STREAM_RESET = 'ERR_MPLEX_STREAM_RESET'\nconst ERR_MPLEX_STREAM_ABORT = 'ERR_MPLEX_STREAM_ABORT'\n\n/**\n * @param {object} options\n * @param {number} options.id\n * @param {string} options.name\n * @param {function(*)} options.send - Called to send data through the stream\n * @param {function(Error)} [options.onEnd] - Called whenever the stream ends\n * @param {string} [options.type] - One of ['initiator','receiver']. Defaults to 'initiator'\n * @param {number} [options.maxMsgSize] - Max size of an mplex message in bytes. Writes > size are automatically split. Defaults to 1MB\n * @returns {*} A muxed stream\n */\nmodule.exports = ({ id, name, send, onEnd = () => {}, type = 'initiator', maxMsgSize = MAX_MSG_SIZE }) => {\n  const abortController = new AbortController()\n  const resetController = new AbortController()\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes\n  const externalId = type === 'initiator' ? (`i${id}`) : `r${id}`\n\n  name = String(name == null ? id : name)\n\n  let sourceEnded = false\n  let sinkEnded = false\n  let endErr\n\n  const onSourceEnd = err => {\n    if (sourceEnded) return\n    sourceEnded = true\n    log('%s stream %s source end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sinkEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const onSinkEnd = err => {\n    if (sinkEnded) return\n    sinkEnded = true\n    log('%s stream %s sink end', type, name, err)\n    if (err && !endErr) endErr = err\n    if (sourceEnded) {\n      stream.timeline.close = Date.now()\n      onEnd(endErr)\n    }\n  }\n\n  const stream = {\n    // Close for reading\n    close: () => stream.source.end(),\n    // Close for reading and writing (local error)\n    abort: err => {\n      log('%s stream %s abort', type, name, err)\n      // End the source with the passed error\n      stream.source.end(err)\n      abortController.abort()\n      onSinkEnd(err)\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = errCode(new Error('stream reset'), ERR_MPLEX_STREAM_RESET)\n      resetController.abort()\n      stream.source.end(err)\n      onSinkEnd(err)\n    },\n    sink: async source => {\n      source = abortable(source, [\n        { signal: abortController.signal, options: { abortMessage: 'stream aborted', abortCode: ERR_MPLEX_STREAM_ABORT } },\n        { signal: resetController.signal, options: { abortMessage: 'stream reset', abortCode: ERR_MPLEX_STREAM_RESET } }\n      ])\n\n      if (type === 'initiator') { // If initiator, open a new stream\n        send({ id, type: Types.NEW_STREAM, data: name })\n      }\n\n      try {\n        for await (let data of source) {\n          while (data.length) {\n            if (data.length <= maxMsgSize) {\n              send({ id, type: Types.MESSAGE, data })\n              break\n            }\n            data = BufferList.isBufferList(data) ? data : new BufferList(data)\n            send({ id, type: Types.MESSAGE, data: data.shallowSlice(0, maxMsgSize) })\n            data.consume(maxMsgSize)\n          }\n        }\n      } catch (err) {\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_MPLEX_STREAM_RESET) {\n          log('%s stream %s reset', type, name)\n        } else {\n          log('%s stream %s error', type, name, err)\n          send({ id, type: Types.RESET })\n        }\n\n        stream.source.end(err)\n        return onSinkEnd(err)\n      }\n\n      send({ id, type: Types.CLOSE })\n      onSinkEnd()\n    },\n    source: pushable(onSourceEnd),\n    timeline: {\n      open: Date.now(),\n      close: null\n    },\n    id: externalId\n  }\n\n  return stream\n}\n"]},"metadata":{},"sourceType":"script"}