{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar get = require('./get.js');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nfunction createStat(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n  const get$1 = get.createGet({\n    repo,\n    preload\n  });\n\n  async function stat(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const node = await get$1(cid, options);\n    const serialized = dagPB__namespace.encode(node);\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n\n  return withTimeoutOption.withTimeoutOption(stat);\n}\n\nexports.createStat = createStat;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/object/stat.js"],"names":["Object","defineProperty","exports","value","dagPB","require","withTimeoutOption","get","_interopNamespace","e","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","enumerable","freeze","dagPB__namespace","createStat","repo","preload","get$1","createGet","stat","cid","options","node","serialized","encode","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qCAAD,CAA/B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,UAAD,CAAjB;;AAEA,SAASG,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACC,UAAX,EAAuB,OAAOD,CAAP;AACvB,MAAIE,CAAC,GAAGX,MAAM,CAACY,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIH,CAAJ,EAAO;AACLT,IAAAA,MAAM,CAACa,IAAP,CAAYJ,CAAZ,EAAeK,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGhB,MAAM,CAACiB,wBAAP,CAAgCR,CAAhC,EAAmCM,CAAnC,CAAR;AACAf,QAAAA,MAAM,CAACC,cAAP,CAAsBU,CAAtB,EAAyBI,CAAzB,EAA4BC,CAAC,CAACT,GAAF,GAAQS,CAAR,GAAY;AACtCE,UAAAA,UAAU,EAAE,IAD0B;AAEtCX,UAAAA,GAAG,EAAE,YAAY;AAAE,mBAAOE,CAAC,CAACM,CAAD,CAAR;AAAc;AAFK,SAAxC;AAID;AACF,KARD;AASD;;AACDJ,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeF,CAAf;AACA,SAAOT,MAAM,CAACmB,MAAP,CAAcR,CAAd,CAAP;AACD;;AAED,IAAIS,gBAAgB,GAAG,aAAaZ,iBAAiB,CAACJ,KAAD,CAArD;;AAEA,SAASiB,UAAT,OAAqC;AAAA,MAAjB;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAiB;AACnC,QAAMC,KAAK,GAAGjB,GAAG,CAACkB,SAAJ,CAAc;AAC1BH,IAAAA,IAD0B;AAE1BC,IAAAA;AAF0B,GAAd,CAAd;;AAIA,iBAAeG,IAAf,CAAoBC,GAApB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACrC,UAAMC,IAAI,GAAG,MAAML,KAAK,CAACG,GAAD,EAAMC,OAAN,CAAxB;AACA,UAAME,UAAU,GAAGV,gBAAgB,CAACW,MAAjB,CAAwBF,IAAxB,CAAnB;AACA,UAAMG,SAAS,GAAGF,UAAU,CAACG,MAA7B;AACA,UAAMC,UAAU,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,CAACC,KAAF,IAAW,CAAf,CAA7B,EAAgD,CAAhD,CAAnB;AACA,WAAO;AACLC,MAAAA,IAAI,EAAEb,GADD;AAELc,MAAAA,QAAQ,EAAEZ,IAAI,CAACM,KAAL,CAAWF,MAFhB;AAGLS,MAAAA,SAAS,EAAEV,SAHN;AAILW,MAAAA,SAAS,EAAEX,SAAS,GAAG,CAACH,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MAJpC;AAKLY,MAAAA,QAAQ,EAAE,CAAChB,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MALvB;AAMLa,MAAAA,cAAc,EAAEd,SAAS,GAAGE;AANvB,KAAP;AAQD;;AACD,SAAO5B,iBAAiB,CAACA,iBAAlB,CAAoCoB,IAApC,CAAP;AACD;;AAEDxB,OAAO,CAACmB,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar dagPB = require('@ipld/dag-pb');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar get = require('./get.js');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nfunction createStat({repo, preload}) {\n  const get$1 = get.createGet({\n    repo,\n    preload\n  });\n  async function stat(cid, options = {}) {\n    const node = await get$1(cid, options);\n    const serialized = dagPB__namespace.encode(node);\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n  return withTimeoutOption.withTimeoutOption(stat);\n}\n\nexports.createStat = createStat;\n"]},"metadata":{},"sourceType":"script"}