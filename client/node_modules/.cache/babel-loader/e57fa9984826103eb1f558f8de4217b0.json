{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nvar debug = require('debug');\n\nvar profiles = require('./profiles.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:core:config');\n\nfunction createConfig(_ref) {\n  let {\n    repo\n  } = _ref;\n  return {\n    getAll: withTimeoutOption.withTimeoutOption(getAll),\n    get: withTimeoutOption.withTimeoutOption(get),\n    set: withTimeoutOption.withTimeoutOption(set),\n    replace: withTimeoutOption.withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption.withTimeoutOption(applyProfile),\n      list: withTimeoutOption.withTimeoutOption(listProfiles)\n    }\n  };\n\n  async function getAll() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return repo.config.getAll(options);\n  }\n\n  async function get(key, options) {\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'));\n    }\n\n    return repo.config.get(key, options);\n  }\n\n  async function set(key, value, options) {\n    return repo.config.set(key, value, options);\n  }\n\n  async function replace(value, options) {\n    return repo.config.replace(value, options);\n  }\n\n  async function applyProfile(profileName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      dryRun: false\n    };\n    const {\n      dryRun\n    } = options;\n    const profile = profiles.profiles[profileName];\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`);\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg));\n      newCfg = profile.transform(newCfg);\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      }\n\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey;\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch (err) {\n      log(err);\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`);\n    }\n  }\n}\n\nasync function listProfiles(_options) {\n  return Object.keys(profiles.profiles).map(name => ({\n    name,\n    description: profiles.profiles[name].description\n  }));\n}\n\nexports.createConfig = createConfig;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/config/index.js"],"names":["Object","defineProperty","exports","value","withTimeoutOption","require","debug","profiles","_interopDefaultLegacy","e","debug__default","log","createConfig","repo","getAll","get","set","replace","apply","applyProfile","list","listProfiles","options","config","key","Promise","reject","Error","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","err","message","_options","keys","map","name","description"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\nvar debug = require('debug');\nvar profiles = require('./profiles.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:core:config');\nfunction createConfig({repo}) {\n  return {\n    getAll: withTimeoutOption.withTimeoutOption(getAll),\n    get: withTimeoutOption.withTimeoutOption(get),\n    set: withTimeoutOption.withTimeoutOption(set),\n    replace: withTimeoutOption.withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption.withTimeoutOption(applyProfile),\n      list: withTimeoutOption.withTimeoutOption(listProfiles)\n    }\n  };\n  async function getAll(options = {}) {\n    return repo.config.getAll(options);\n  }\n  async function get(key, options) {\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'));\n    }\n    return repo.config.get(key, options);\n  }\n  async function set(key, value, options) {\n    return repo.config.set(key, value, options);\n  }\n  async function replace(value, options) {\n    return repo.config.replace(value, options);\n  }\n  async function applyProfile(profileName, options = { dryRun: false }) {\n    const {dryRun} = options;\n    const profile = profiles.profiles[profileName];\n    if (!profile) {\n      throw new Error(`No profile with name '${ profileName }' exists`);\n    }\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg));\n      newCfg = profile.transform(newCfg);\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      }\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey;\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch (err) {\n      log(err);\n      throw new Error(`Could not apply profile '${ profileName }' to config: ${ err.message }`);\n    }\n  }\n}\nasync function listProfiles(_options) {\n  return Object.keys(profiles.profiles).map(name => ({\n    name,\n    description: profiles.profiles[name].description\n  }));\n}\n\nexports.createConfig = createConfig;\n"]},"metadata":{},"sourceType":"script"}