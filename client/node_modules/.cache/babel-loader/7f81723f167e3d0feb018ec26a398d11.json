{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar ipfsUnixfsExporter = require('ipfs-unixfs-exporter');\n\nvar mergeOpts = require('merge-options');\n\nvar toMfsPath = require('./utils/to-mfs-path.js');\n\nvar errCode = require('err-code');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({\n  ignoreUndefined: true\n});\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n\nfunction createRead(context) {\n  function mfsRead(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath.toMfsPath(context, path, options);\n        const result = await ipfsUnixfsExporter.exporter(mfsPath.mfsPath, context.repo.blocks);\n\n        if (result.type !== 'file') {\n          throw errCode__default[\"default\"](new Error(`${path} was not a file`), 'ERR_NOT_FILE');\n        }\n\n        if (!result.content) {\n          throw errCode__default[\"default\"](new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  }\n\n  return withTimeoutOption.withTimeoutOption(mfsRead);\n}\n\nexports.createRead = createRead;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/files/read.js"],"names":["Object","defineProperty","exports","value","ipfsUnixfsExporter","require","mergeOpts","toMfsPath","errCode","withTimeoutOption","_interopDefaultLegacy","e","mergeOpts__default","errCode__default","mergeOptions","bind","ignoreUndefined","defaultOptions","offset","length","Infinity","createRead","context","mfsRead","path","options","Symbol","asyncIterator","read","mfsPath","result","exporter","repo","blocks","type","Error","content","buf"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,eAAD,CAAvB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,wBAAD,CAAvB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASK,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,kBAAkB,GAAG,aAAaF,qBAAqB,CAACJ,SAAD,CAA3D;;AACA,IAAIO,gBAAgB,GAAG,aAAaH,qBAAqB,CAACF,OAAD,CAAzD;;AAEA,MAAMM,YAAY,GAAGF,kBAAkB,CAAC,SAAD,CAAlB,CAA8BG,IAA9B,CAAmC;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAnC,CAArB;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,MAAM,EAAEC;AAFa,CAAvB;;AAIA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,WAASC,OAAT,CAAiBC,IAAjB,EAAqC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACnCA,IAAAA,OAAO,GAAGX,YAAY,CAACG,cAAD,EAAiBQ,OAAjB,CAAtB;AACA,WAAO;AACL,OAACC,MAAM,CAACC,aAAR,GAAwB,gBAAgBC,IAAhB,GAAuB;AAC7C,cAAMC,OAAO,GAAG,MAAMtB,SAAS,CAACA,SAAV,CAAoBe,OAApB,EAA6BE,IAA7B,EAAmCC,OAAnC,CAAtB;AACA,cAAMK,MAAM,GAAG,MAAM1B,kBAAkB,CAAC2B,QAAnB,CAA4BF,OAAO,CAACA,OAApC,EAA6CP,OAAO,CAACU,IAAR,CAAaC,MAA1D,CAArB;;AACA,YAAIH,MAAM,CAACI,IAAP,KAAgB,MAApB,EAA4B;AAC1B,gBAAMrB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIsB,KAAJ,CAAW,GAAGX,IAAM,iBAApB,CAA5B,EAAmE,cAAnE,CAAN;AACD;;AACD,YAAI,CAACM,MAAM,CAACM,OAAZ,EAAqB;AACnB,gBAAMvB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIsB,KAAJ,CAAW,sCAAsCX,IAAM,EAAvD,CAA5B,EAAuF,gBAAvF,CAAN;AACD;;AACD,mBAAW,MAAMa,GAAjB,IAAwBP,MAAM,CAACM,OAAP,CAAe;AACnClB,UAAAA,MAAM,EAAEO,OAAO,CAACP,MADmB;AAEnCC,UAAAA,MAAM,EAAEM,OAAO,CAACN;AAFmB,SAAf,CAAxB,EAGM;AACJ,gBAAMkB,GAAN;AACD;AACF;AAhBI,KAAP;AAkBD;;AACD,SAAO5B,iBAAiB,CAACA,iBAAlB,CAAoCc,OAApC,CAAP;AACD;;AAEDrB,OAAO,CAACmB,UAAR,GAAqBA,UAArB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar ipfsUnixfsExporter = require('ipfs-unixfs-exporter');\nvar mergeOpts = require('merge-options');\nvar toMfsPath = require('./utils/to-mfs-path.js');\nvar errCode = require('err-code');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({ ignoreUndefined: true });\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\nfunction createRead(context) {\n  function mfsRead(path, options = {}) {\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath.toMfsPath(context, path, options);\n        const result = await ipfsUnixfsExporter.exporter(mfsPath.mfsPath, context.repo.blocks);\n        if (result.type !== 'file') {\n          throw errCode__default[\"default\"](new Error(`${ path } was not a file`), 'ERR_NOT_FILE');\n        }\n        if (!result.content) {\n          throw errCode__default[\"default\"](new Error(`Could not load content stream from ${ path }`), 'ERR_NO_CONTENT');\n        }\n        for await (const buf of result.content({\n            offset: options.offset,\n            length: options.length\n          })) {\n          yield buf;\n        }\n      }\n    };\n  }\n  return withTimeoutOption.withTimeoutOption(mfsRead);\n}\n\nexports.createRead = createRead;\n"]},"metadata":{},"sourceType":"script"}