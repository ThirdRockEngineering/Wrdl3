{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nclass MessageCache {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  constructor(gossip, history) {\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    this.peertx = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (let i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {string} msgIdStr\n   * @param {RPC.Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  put(msg, msgIdStr) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.msgs.set(msgIdStr, msg);\n      const msgId = utils_1.messageIdFromString(msgIdStr);\n      this.history[0].push({\n        msgId: msgId,\n        topics: msg.topicIDs\n      });\n    });\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   *\n   * @param {Uint8Array} msgId\n   * @returns {Message}\n   */\n\n\n  get(msgId) {\n    return this.msgs.get(utils_1.messageIdToString(msgId));\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is present\n   * for a specific peer.\n   * Returns the message and the number of times the peer has requested the message\n   *\n   * @param {string} msgIdStr\n   * @param {string} p\n   * @returns {[InMessage | undefined, number]}\n   */\n\n\n  getForPeer(msgIdStr, p) {\n    const msg = this.msgs.get(msgIdStr);\n\n    if (!msg) {\n      return [undefined, 0];\n    }\n\n    let peertx = this.peertx.get(msgIdStr);\n\n    if (!peertx) {\n      peertx = new Map();\n      this.peertx.set(msgIdStr, peertx);\n    }\n\n    const count = (peertx.get(p) || 0) + 1;\n    peertx.set(p, count);\n    return [msg, count];\n  }\n  /**\n   * Retrieves a list of message IDs for a given topic\n   *\n   * @param {String} topic\n   *\n   * @returns {Array<Uint8Array>}\n   */\n\n\n  getGossipIDs(topic) {\n    const msgIds = [];\n\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        for (const t of entry.topics) {\n          if (t === topic) {\n            msgIds.push(entry.msgId);\n            break;\n          }\n        }\n      });\n    }\n\n    return msgIds;\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   *\n   * @returns {void}\n   */\n\n\n  shift() {\n    const last = this.history[this.history.length - 1];\n    last.forEach(entry => {\n      const msgIdStr = utils_1.messageIdToString(entry.msgId);\n      this.msgs.delete(msgIdStr);\n      this.peertx.delete(msgIdStr);\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n\n}\n\nexports.MessageCache = MessageCache;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-gossipsub/src/message-cache.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","MessageCache","utils_1","require","constructor","gossip","history","msgs","Map","peertx","i","put","msg","msgIdStr","set","msgId","messageIdFromString","push","topics","topicIDs","get","messageIdToString","getForPeer","p","undefined","count","getGossipIDs","topic","msgIds","forEach","entry","t","shift","last","length","delete","pop","unshift"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageCache = void 0;\nconst utils_1 = require(\"./utils\");\nclass MessageCache {\n    /**\n     * @param {Number} gossip\n     * @param {Number} history\n     * @param {msgIdFn} msgIdFn a function that returns message id from a message\n     *\n     * @constructor\n     */\n    constructor(gossip, history) {\n        /**\n         * @type {Map<string, RPC.Message>}\n         */\n        this.msgs = new Map();\n        this.peertx = new Map();\n        /**\n         * @type {Array<Array<CacheEntry>>}\n         */\n        this.history = [];\n        for (let i = 0; i < history; i++) {\n            this.history[i] = [];\n        }\n        /**\n         * @type {Number}\n         */\n        this.gossip = gossip;\n    }\n    /**\n     * Adds a message to the current window and the cache\n     *\n     * @param {string} msgIdStr\n     * @param {RPC.Message} msg\n     * @returns {Promise<void>}\n     */\n    put(msg, msgIdStr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.msgs.set(msgIdStr, msg);\n            const msgId = utils_1.messageIdFromString(msgIdStr);\n            this.history[0].push({ msgId: msgId, topics: msg.topicIDs });\n        });\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is still present\n     *\n     * @param {Uint8Array} msgId\n     * @returns {Message}\n     */\n    get(msgId) {\n        return this.msgs.get(utils_1.messageIdToString(msgId));\n    }\n    /**\n     * Retrieves a message from the cache by its ID, if it is present\n     * for a specific peer.\n     * Returns the message and the number of times the peer has requested the message\n     *\n     * @param {string} msgIdStr\n     * @param {string} p\n     * @returns {[InMessage | undefined, number]}\n     */\n    getForPeer(msgIdStr, p) {\n        const msg = this.msgs.get(msgIdStr);\n        if (!msg) {\n            return [undefined, 0];\n        }\n        let peertx = this.peertx.get(msgIdStr);\n        if (!peertx) {\n            peertx = new Map();\n            this.peertx.set(msgIdStr, peertx);\n        }\n        const count = (peertx.get(p) || 0) + 1;\n        peertx.set(p, count);\n        return [msg, count];\n    }\n    /**\n     * Retrieves a list of message IDs for a given topic\n     *\n     * @param {String} topic\n     *\n     * @returns {Array<Uint8Array>}\n     */\n    getGossipIDs(topic) {\n        const msgIds = [];\n        for (let i = 0; i < this.gossip; i++) {\n            this.history[i].forEach((entry) => {\n                for (const t of entry.topics) {\n                    if (t === topic) {\n                        msgIds.push(entry.msgId);\n                        break;\n                    }\n                }\n            });\n        }\n        return msgIds;\n    }\n    /**\n     * Shifts the current window, discarding messages older than this.history.length of the cache\n     *\n     * @returns {void}\n     */\n    shift() {\n        const last = this.history[this.history.length - 1];\n        last.forEach((entry) => {\n            const msgIdStr = utils_1.messageIdToString(entry.msgId);\n            this.msgs.delete(msgIdStr);\n            this.peertx.delete(msgIdStr);\n        });\n        this.history.pop();\n        this.history.unshift([]);\n    }\n}\nexports.MessageCache = MessageCache;\n"]},"metadata":{},"sourceType":"script"}