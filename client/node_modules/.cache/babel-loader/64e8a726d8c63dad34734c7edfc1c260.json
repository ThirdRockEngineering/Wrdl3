{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar dagPb = require('@ipld/dag-pb');\n\nvar cbor = require('cborg');\n\nvar pinSet = require('./pin-set.js');\n\nvar utils = require('./utils.js');\n\nvar length = require('it-length');\n\nvar sha2 = require('multiformats/hashes/sha2');\n\nvar mhd = require('multiformats/hashes/digest');\n\nvar base32 = require('multiformats/bases/base32');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\n\nvar cbor__namespace = /*#__PURE__*/_interopNamespace(cbor);\n\nvar length__default = /*#__PURE__*/_interopDefaultLegacy(length);\n\nvar mhd__namespace = /*#__PURE__*/_interopNamespace(mhd);\n\nasync function pinsToDatastore(blockstore, datastore, pinstore, onProgress) {\n  if (!(await datastore.has(utils.PIN_DS_KEY))) {\n    return;\n  }\n\n  const mh = await datastore.get(utils.PIN_DS_KEY);\n  const cid$1 = cid.CID.decode(mh);\n  const pinRootBuf = await blockstore.get(cid$1);\n  const pinRoot = dagPb__namespace.decode(pinRootBuf);\n  let counter = 0;\n  const pinCount = (await length__default[\"default\"](pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.recursive))) + (await length__default[\"default\"](pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.direct)));\n\n  for await (const cid of pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.recursive)) {\n    counter++;\n    const pin = {\n      depth: Infinity\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n\n    await pinstore.put(utils.cidToKey(cid), cbor__namespace.encode(pin));\n    onProgress(counter / pinCount * 100, `Migrated recursive pin ${cid}`);\n  }\n\n  for await (const cid of pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.direct)) {\n    counter++;\n    const pin = {\n      depth: 0\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n\n    await pinstore.put(utils.cidToKey(cid), cbor__namespace.encode(pin));\n    onProgress(counter / pinCount * 100, `Migrated direct pin ${cid}`);\n  }\n\n  await blockstore.delete(cid$1);\n  await datastore.delete(utils.PIN_DS_KEY);\n}\n\nasync function pinsToDAG(blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = [];\n  const directPins = [];\n  let counter = 0;\n  const pinCount = await length__default[\"default\"](pinstore.queryKeys({}));\n\n  for await (const {\n    key,\n    value\n  } of pinstore.query({})) {\n    counter++;\n    const pin = cbor__namespace.decode(value);\n    const cid$1 = cid.CID.create(pin.version || 0, pin.codec || dagPb__namespace.code, mhd__namespace.decode(base32.base32.decode('b' + key.toString().toLowerCase().split('/').pop())));\n\n    if (pin.depth === 0) {\n      onProgress(counter / pinCount * 100, `Reverted direct pin ${cid$1}`);\n      directPins.push(cid$1);\n    } else {\n      onProgress(counter / pinCount * 100, `Reverted recursive pin ${cid$1}`);\n      recursivePins.push(cid$1);\n    }\n  }\n\n  onProgress(100, 'Updating pin root');\n  const pinRoot = {\n    Links: [await pinSet.storeSet(blockstore, utils.PinTypes.direct, directPins), await pinSet.storeSet(blockstore, utils.PinTypes.recursive, recursivePins)]\n  };\n  const buf = dagPb__namespace.encode(pinRoot);\n  const digest = await sha2.sha256.digest(buf);\n  const cid$1 = cid.CID.createV0(digest);\n  await blockstore.put(cid$1, buf);\n  await datastore.put(utils.PIN_DS_KEY, cid$1.bytes);\n}\n\nasync function process(backends, onProgress, fn) {\n  const blockstore = backends.blocks;\n  const datastore = backends.datastore;\n  const pinstore = backends.pins;\n  await blockstore.open();\n  await datastore.open();\n  await pinstore.open();\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress);\n  } finally {\n    await pinstore.close();\n    await datastore.close();\n    await blockstore.close();\n  }\n}\n\nconst migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, pinsToDatastore);\n  },\n  revert: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, pinsToDAG);\n  }\n};\nexports.migration = migration;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo-migrations/cjs/migrations/migration-9/index.js"],"names":["Object","defineProperty","exports","value","cid","require","dagPb","cbor","pinSet","utils","length","sha2","mhd","base32","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","dagPb__namespace","cbor__namespace","length__default","mhd__namespace","pinsToDatastore","blockstore","datastore","pinstore","onProgress","has","PIN_DS_KEY","mh","cid$1","CID","decode","pinRootBuf","pinRoot","counter","pinCount","loadSet","PinTypes","recursive","direct","pin","depth","Infinity","version","code","codec","put","cidToKey","encode","delete","pinsToDAG","recursivePins","directPins","queryKeys","key","query","toString","toLowerCase","split","pop","push","Links","storeSet","buf","digest","sha256","createV0","bytes","process","backends","fn","blocks","pins","open","close","migration","description","migrate","revert"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar dagPb = require('@ipld/dag-pb');\nvar cbor = require('cborg');\nvar pinSet = require('./pin-set.js');\nvar utils = require('./utils.js');\nvar length = require('it-length');\nvar sha2 = require('multiformats/hashes/sha2');\nvar mhd = require('multiformats/hashes/digest');\nvar base32 = require('multiformats/bases/base32');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPb__namespace = /*#__PURE__*/_interopNamespace(dagPb);\nvar cbor__namespace = /*#__PURE__*/_interopNamespace(cbor);\nvar length__default = /*#__PURE__*/_interopDefaultLegacy(length);\nvar mhd__namespace = /*#__PURE__*/_interopNamespace(mhd);\n\nasync function pinsToDatastore(blockstore, datastore, pinstore, onProgress) {\n  if (!await datastore.has(utils.PIN_DS_KEY)) {\n    return;\n  }\n  const mh = await datastore.get(utils.PIN_DS_KEY);\n  const cid$1 = cid.CID.decode(mh);\n  const pinRootBuf = await blockstore.get(cid$1);\n  const pinRoot = dagPb__namespace.decode(pinRootBuf);\n  let counter = 0;\n  const pinCount = await length__default[\"default\"](pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.recursive)) + await length__default[\"default\"](pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.direct));\n  for await (const cid of pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.recursive)) {\n    counter++;\n    const pin = { depth: Infinity };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    await pinstore.put(utils.cidToKey(cid), cbor__namespace.encode(pin));\n    onProgress(counter / pinCount * 100, `Migrated recursive pin ${ cid }`);\n  }\n  for await (const cid of pinSet.loadSet(blockstore, pinRoot, utils.PinTypes.direct)) {\n    counter++;\n    const pin = { depth: 0 };\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n    if (cid.code !== dagPb__namespace.code) {\n      pin.codec = cid.code;\n    }\n    await pinstore.put(utils.cidToKey(cid), cbor__namespace.encode(pin));\n    onProgress(counter / pinCount * 100, `Migrated direct pin ${ cid }`);\n  }\n  await blockstore.delete(cid$1);\n  await datastore.delete(utils.PIN_DS_KEY);\n}\nasync function pinsToDAG(blockstore, datastore, pinstore, onProgress) {\n  const recursivePins = [];\n  const directPins = [];\n  let counter = 0;\n  const pinCount = await length__default[\"default\"](pinstore.queryKeys({}));\n  for await (const {key, value} of pinstore.query({})) {\n    counter++;\n    const pin = cbor__namespace.decode(value);\n    const cid$1 = cid.CID.create(pin.version || 0, pin.codec || dagPb__namespace.code, mhd__namespace.decode(base32.base32.decode('b' + key.toString().toLowerCase().split('/').pop())));\n    if (pin.depth === 0) {\n      onProgress(counter / pinCount * 100, `Reverted direct pin ${ cid$1 }`);\n      directPins.push(cid$1);\n    } else {\n      onProgress(counter / pinCount * 100, `Reverted recursive pin ${ cid$1 }`);\n      recursivePins.push(cid$1);\n    }\n  }\n  onProgress(100, 'Updating pin root');\n  const pinRoot = {\n    Links: [\n      await pinSet.storeSet(blockstore, utils.PinTypes.direct, directPins),\n      await pinSet.storeSet(blockstore, utils.PinTypes.recursive, recursivePins)\n    ]\n  };\n  const buf = dagPb__namespace.encode(pinRoot);\n  const digest = await sha2.sha256.digest(buf);\n  const cid$1 = cid.CID.createV0(digest);\n  await blockstore.put(cid$1, buf);\n  await datastore.put(utils.PIN_DS_KEY, cid$1.bytes);\n}\nasync function process(backends, onProgress, fn) {\n  const blockstore = backends.blocks;\n  const datastore = backends.datastore;\n  const pinstore = backends.pins;\n  await blockstore.open();\n  await datastore.open();\n  await pinstore.open();\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress);\n  } finally {\n    await pinstore.close();\n    await datastore.close();\n    await blockstore.close();\n  }\n}\nconst migration = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, pinsToDatastore);\n  },\n  revert: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, pinsToDAG);\n  }\n};\n\nexports.migration = migration;\n"]},"metadata":{},"sourceType":"script"}