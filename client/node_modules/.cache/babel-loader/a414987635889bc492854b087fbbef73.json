{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction toRFC3339(time) {\n  const year = time.getUTCFullYear();\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(time.getUTCDate()).padStart(2, '0');\n  const hour = String(time.getUTCHours()).padStart(2, '0');\n  const minute = String(time.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  const milliseconds = time.getUTCMilliseconds();\n  const nanoseconds = milliseconds * 1000 * 1000;\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n\nfunction parseRFC3339(time) {\n  const rfc3339Matcher = new RegExp('(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' + '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' + '\\\\.(\\\\d+)Z');\n  const m = String(time).trim().match(rfc3339Matcher);\n\n  if (!m) {\n    throw new Error('Invalid format');\n  }\n\n  const year = parseInt(m[1], 10);\n  const month = parseInt(m[2], 10) - 1;\n  const date = parseInt(m[3], 10);\n  const hour = parseInt(m[4], 10);\n  const minute = parseInt(m[5], 10);\n  const second = parseInt(m[6], 10);\n  const millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n\nexports.parseRFC3339 = parseRFC3339;\nexports.toRFC3339 = toRFC3339;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipns/cjs/src/utils.js"],"names":["Object","defineProperty","exports","value","toRFC3339","time","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","nanoseconds","parseRFC3339","rfc3339Matcher","RegExp","m","trim","match","Error","parseInt","date","second","millisecond","slice","Date","UTC"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAb;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,WAAL,KAAqB,CAAtB,CAAN,CAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAAd;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,UAAL,EAAD,CAAN,CAA0BF,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,CAAZ;AACA,QAAMG,IAAI,GAAGL,MAAM,CAACJ,IAAI,CAACU,WAAL,EAAD,CAAN,CAA2BJ,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAb;AACA,QAAMK,MAAM,GAAGP,MAAM,CAACJ,IAAI,CAACY,aAAL,EAAD,CAAN,CAA6BN,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAf;AACA,QAAMO,OAAO,GAAGT,MAAM,CAACJ,IAAI,CAACc,aAAL,EAAD,CAAN,CAA6BR,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAhB;AACA,QAAMS,YAAY,GAAGf,IAAI,CAACgB,kBAAL,EAArB;AACA,QAAMC,WAAW,GAAGF,YAAY,GAAG,IAAf,GAAsB,IAA1C;AACA,SAAQ,GAAGd,IAAM,IAAIE,KAAO,IAAII,GAAK,IAAIE,IAAM,IAAIE,MAAQ,IAAIE,OAAS,IAAII,WAAa,GAAzF;AACD;;AACD,SAASC,YAAT,CAAsBlB,IAAtB,EAA4B;AAC1B,QAAMmB,cAAc,GAAG,IAAIC,MAAJ,CAAW,gCAAgC,4BAAhC,GAA+D,YAA1E,CAAvB;AACA,QAAMC,CAAC,GAAGjB,MAAM,CAACJ,IAAD,CAAN,CAAasB,IAAb,GAAoBC,KAApB,CAA0BJ,cAA1B,CAAV;;AACA,MAAI,CAACE,CAAL,EAAQ;AACN,UAAM,IAAIG,KAAJ,CAAU,gBAAV,CAAN;AACD;;AACD,QAAMvB,IAAI,GAAGwB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMlB,KAAK,GAAGsB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,GAAqB,CAAnC;AACA,QAAMK,IAAI,GAAGD,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMZ,IAAI,GAAGgB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMV,MAAM,GAAGc,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;AACA,QAAMM,MAAM,GAAGF,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;AACA,QAAMO,WAAW,GAAGH,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAD,CAAKQ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,EAAoB,EAApB,CAA5B;AACA,SAAO,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS9B,IAAT,EAAeE,KAAf,EAAsBuB,IAAtB,EAA4BjB,IAA5B,EAAkCE,MAAlC,EAA0CgB,MAA1C,EAAkDC,WAAlD,CAAT,CAAP;AACD;;AAED/B,OAAO,CAACqB,YAAR,GAAuBA,YAAvB;AACArB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction toRFC3339(time) {\n  const year = time.getUTCFullYear();\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(time.getUTCDate()).padStart(2, '0');\n  const hour = String(time.getUTCHours()).padStart(2, '0');\n  const minute = String(time.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  const milliseconds = time.getUTCMilliseconds();\n  const nanoseconds = milliseconds * 1000 * 1000;\n  return `${ year }-${ month }-${ day }T${ hour }:${ minute }:${ seconds }.${ nanoseconds }Z`;\n}\nfunction parseRFC3339(time) {\n  const rfc3339Matcher = new RegExp('(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' + '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' + '\\\\.(\\\\d+)Z');\n  const m = String(time).trim().match(rfc3339Matcher);\n  if (!m) {\n    throw new Error('Invalid format');\n  }\n  const year = parseInt(m[1], 10);\n  const month = parseInt(m[2], 10) - 1;\n  const date = parseInt(m[3], 10);\n  const hour = parseInt(m[4], 10);\n  const minute = parseInt(m[5], 10);\n  const second = parseInt(m[6], 10);\n  const millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n\nexports.parseRFC3339 = parseRFC3339;\nexports.toRFC3339 = toRFC3339;\n"]},"metadata":{},"sourceType":"script"}