{"ast":null,"code":"'use strict';\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology');\n\nconst {\n  EventEmitter\n} = require('events');\n\nconst utils = require('./utils');\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\n\n\nclass TopologyListener extends EventEmitter {\n  /**\n   * Create a new network\n   *\n   * @param {object} params\n   * @param {import('libp2p/src/registrar')} params.registrar\n   * @param {string} params.protocol\n   * @param {boolean} params.lan\n   */\n  constructor(_ref) {\n    let {\n      registrar,\n      protocol,\n      lan\n    } = _ref;\n    super();\n    this._log = utils.logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}:network`);\n    this._running = false;\n    this._registrar = registrar;\n    this._protocol = protocol;\n  }\n  /**\n   * Start the network\n   */\n\n\n  async start() {\n    if (this._running) {\n      return;\n    }\n\n    this._running = true; // register protocol with topology\n\n    const topology = new MulticodecTopology({\n      multicodecs: [this._protocol],\n      handlers: {\n        onConnect: peerId => {\n          this._log('observed peer that with protocol %s %p', this._protocol, peerId);\n\n          this.emit('peer', peerId);\n        },\n        onDisconnect: () => {}\n      }\n    });\n    this._registrarId = await this._registrar.register(topology);\n  }\n  /**\n   * Stop all network activity\n   */\n\n\n  stop() {\n    this._running = false; // unregister protocol and handlers\n\n    if (this._registrarId) {\n      this._registrar.unregister(this._registrarId);\n    }\n  }\n\n}\n\nmodule.exports.TopologyListener = TopologyListener;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/topology-listener.js"],"names":["MulticodecTopology","require","EventEmitter","utils","TopologyListener","constructor","registrar","protocol","lan","_log","logger","_running","_registrar","_protocol","start","topology","multicodecs","handlers","onConnect","peerId","emit","onDisconnect","_registrarId","register","stop","unregister","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,oDAAD,CAAlC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBD,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,SAAD,CAArB;AAEA;AACA;AACA;;;AACA,MAAMG,gBAAN,SAA+BF,YAA/B,CAA4C;AAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,WAAW,OAAgC;AAAA,QAA9B;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA;AAAvB,KAA8B;AACzC;AAEA,SAAKC,IAAL,GAAYN,KAAK,CAACO,MAAN,CAAc,oCAAmCF,GAAG,GAAG,KAAH,GAAW,KAAM,UAArE,CAAZ;AACA,SAAKG,QAAL,GAAgB,KAAhB;AACA,SAAKC,UAAL,GAAkBN,SAAlB;AACA,SAAKO,SAAL,GAAiBN,QAAjB;AACD;AAED;AACF;AACA;;;AACa,QAALO,KAAK,GAAI;AACb,QAAI,KAAKH,QAAT,EAAmB;AACjB;AACD;;AAED,SAAKA,QAAL,GAAgB,IAAhB,CALa,CAOb;;AACA,UAAMI,QAAQ,GAAG,IAAIf,kBAAJ,CAAuB;AACtCgB,MAAAA,WAAW,EAAE,CAAC,KAAKH,SAAN,CADyB;AAEtCI,MAAAA,QAAQ,EAAE;AACRC,QAAAA,SAAS,EAAGC,MAAD,IAAY;AACrB,eAAKV,IAAL,CAAU,wCAAV,EAAoD,KAAKI,SAAzD,EAAoEM,MAApE;;AACA,eAAKC,IAAL,CAAU,MAAV,EAAkBD,MAAlB;AACD,SAJO;AAKRE,QAAAA,YAAY,EAAE,MAAM,CAAE;AALd;AAF4B,KAAvB,CAAjB;AAUA,SAAKC,YAAL,GAAoB,MAAM,KAAKV,UAAL,CAAgBW,QAAhB,CAAyBR,QAAzB,CAA1B;AACD;AAED;AACF;AACA;;;AACES,EAAAA,IAAI,GAAI;AACN,SAAKb,QAAL,GAAgB,KAAhB,CADM,CAGN;;AACA,QAAI,KAAKW,YAAT,EAAuB;AACrB,WAAKV,UAAL,CAAgBa,UAAhB,CAA2B,KAAKH,YAAhC;AACD;AACF;;AApDyC;;AAuD5CI,MAAM,CAACC,OAAP,CAAevB,gBAAf,GAAkCA,gBAAlC","sourcesContent":["'use strict'\n\nconst MulticodecTopology = require('libp2p-interfaces/src/topology/multicodec-topology')\nconst { EventEmitter } = require('events')\nconst utils = require('./utils')\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nclass TopologyListener extends EventEmitter {\n  /**\n   * Create a new network\n   *\n   * @param {object} params\n   * @param {import('libp2p/src/registrar')} params.registrar\n   * @param {string} params.protocol\n   * @param {boolean} params.lan\n   */\n  constructor ({ registrar, protocol, lan }) {\n    super()\n\n    this._log = utils.logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}:network`)\n    this._running = false\n    this._registrar = registrar\n    this._protocol = protocol\n  }\n\n  /**\n   * Start the network\n   */\n  async start () {\n    if (this._running) {\n      return\n    }\n\n    this._running = true\n\n    // register protocol with topology\n    const topology = new MulticodecTopology({\n      multicodecs: [this._protocol],\n      handlers: {\n        onConnect: (peerId) => {\n          this._log('observed peer that with protocol %s %p', this._protocol, peerId)\n          this.emit('peer', peerId)\n        },\n        onDisconnect: () => {}\n      }\n    })\n    this._registrarId = await this._registrar.register(topology)\n  }\n\n  /**\n   * Stop all network activity\n   */\n  stop () {\n    this._running = false\n\n    // unregister protocol and handlers\n    if (this._registrarId) {\n      this._registrar.unregister(this._registrarId)\n    }\n  }\n}\n\nmodule.exports.TopologyListener = TopologyListener\n"]},"metadata":{},"sourceType":"script"}