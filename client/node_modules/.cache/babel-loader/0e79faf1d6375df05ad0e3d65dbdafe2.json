{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar get = require('dlv');\n\nvar mergeOpts = require('merge-options');\n\nvar errCode = require('err-code');\n\nvar libp2pPubsubRouters = require('ipfs-core-config/libp2p-pubsub-routers');\n\nvar DelegatedPeerRouter = require('libp2p-delegated-peer-routing');\n\nvar DelegatedContentRouter = require('libp2p-delegated-content-routing');\n\nvar ipfsHttpClient = require('ipfs-http-client');\n\nvar multiaddr = require('multiaddr');\n\nvar version = require('../version.js');\n\nvar libp2p = require('ipfs-core-config/libp2p');\n\nvar bootstrap = require('libp2p-bootstrap');\n\nvar Libp2p = require('libp2p');\n\nvar ipns = require('ipns');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar get__default = /*#__PURE__*/_interopDefaultLegacy(get);\n\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar DelegatedPeerRouter__default = /*#__PURE__*/_interopDefaultLegacy(DelegatedPeerRouter);\n\nvar DelegatedContentRouter__default = /*#__PURE__*/_interopDefaultLegacy(DelegatedContentRouter);\n\nvar bootstrap__default = /*#__PURE__*/_interopDefaultLegacy(bootstrap);\n\nvar Libp2p__default = /*#__PURE__*/_interopDefaultLegacy(Libp2p);\n\nvar ipns__namespace = /*#__PURE__*/_interopNamespace(ipns);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({\n  ignoreUndefined: true\n});\n\nfunction createLibp2p(_ref) {\n  let {\n    options = {},\n    peerId,\n    multiaddrs = [],\n    repo,\n    keychainConfig = {},\n    config = {}\n  } = _ref;\n  const {\n    datastore,\n    keys\n  } = repo;\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keys,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  });\n\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({\n      libp2pOptions,\n      options,\n      config,\n      datastore,\n      peerId\n    });\n  }\n\n  return Libp2p__default[\"default\"].create(libp2pOptions);\n}\n\nfunction getLibp2pOptions(_ref2) {\n  let {\n    options,\n    config,\n    datastore,\n    keys,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  } = _ref2;\n\n  const getPubsubRouter = () => {\n    const router = get__default[\"default\"](config, 'Pubsub.Router') || 'gossipsub';\n\n    if (!libp2pPubsubRouters.routers[router]) {\n      throw errCode__default[\"default\"](new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${router} router.`), 'ERR_NOT_SUPPORTED');\n    }\n\n    return libp2pPubsubRouters.routers[router];\n  };\n\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId,\n    modules: {}\n  };\n  const libp2pOptions = {\n    modules: {\n      pubsub: getPubsubRouter(),\n      contentRouting: [],\n      peerRouting: []\n    },\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get__default[\"default\"](options, 'config.Discovery.MDNS.Enabled', get__default[\"default\"](config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get__default[\"default\"](options, 'config.Discovery.webRTCStar.Enabled', get__default[\"default\"](config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: get__default[\"default\"](options, 'config.Bootstrap', get__default[\"default\"](config, 'Bootstrap', []))\n        }\n      },\n      relay: {\n        enabled: get__default[\"default\"](options, 'relay.enabled', get__default[\"default\"](config, 'relay.enabled', true)),\n        hop: {\n          enabled: get__default[\"default\"](options, 'relay.hop.enabled', get__default[\"default\"](config, 'relay.hop.enabled', false)),\n          active: get__default[\"default\"](options, 'relay.hop.active', get__default[\"default\"](config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        enabled: get__default[\"default\"](config, 'Routing.Type', 'dhtclient') !== 'none',\n        clientMode: get__default[\"default\"](config, 'Routing.Type', 'dht') !== 'dhtserver',\n        kBucketSize: get__default[\"default\"](options, 'dht.kBucketSize', 20),\n        validators: {\n          ipns: ipns__namespace.validator\n        }\n      },\n      pubsub: {\n        enabled: get__default[\"default\"](options, 'config.Pubsub.Enabled', get__default[\"default\"](config, 'Pubsub.Enabled', true))\n      },\n      nat: {\n        enabled: !get__default[\"default\"](config, 'Swarm.DisableNatPortMap', false)\n      }\n    },\n    addresses: {\n      listen: multiaddrs.map(ma => ma.toString()),\n      announce: get__default[\"default\"](options, 'addresses.announce', get__default[\"default\"](config, 'Addresses.Announce', [])),\n      noAnnounce: get__default[\"default\"](options, 'addresses.noAnnounce', get__default[\"default\"](config, 'Addresses.NoAnnounce', []))\n    },\n    connectionManager: get__default[\"default\"](options, 'connectionManager', {\n      maxConnections: get__default[\"default\"](options, 'config.Swarm.ConnMgr.HighWater', get__default[\"default\"](config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get__default[\"default\"](options, 'config.Swarm.ConnMgr.LowWater', get__default[\"default\"](config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: {\n      datastore: keys,\n      ...keychainConfig\n    },\n    host: {\n      agentVersion: `js-ipfs/${version.ipfsCore}`\n    }\n  };\n  let constructorOptions = get__default[\"default\"](options, 'libp2p', undefined);\n\n  if (typeof constructorOptions === 'function') {\n    constructorOptions = undefined;\n  }\n\n  const libp2pConfig = mergeOptions(libp2pDefaults, libp2p.libp2pConfig(), libp2pOptions, constructorOptions);\n  const bootstrapList = get__default[\"default\"](libp2pConfig, 'config.peerDiscovery.bootstrap.list', []);\n\n  if (bootstrapList.length > 0) {\n    libp2pConfig.modules.peerDiscovery.push(bootstrap__default[\"default\"]);\n  }\n\n  const delegateHosts = get__default[\"default\"](options, 'config.Addresses.Delegates', get__default[\"default\"](config, 'Addresses.Delegates', []));\n\n  if (delegateHosts.length > 0) {\n    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)];\n    const delegateAddr = new multiaddr.Multiaddr(delegateString).toOptions();\n    const delegateApiOptions = {\n      host: delegateAddr.host,\n      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',\n      port: delegateAddr.port\n    };\n    const delegateHttpClient = ipfsHttpClient.create(delegateApiOptions);\n    libp2pOptions.modules.contentRouting = libp2pOptions.modules.contentRouting || [];\n    libp2pOptions.modules.contentRouting.push(new DelegatedContentRouter__default[\"default\"](peerId, delegateHttpClient));\n    libp2pOptions.modules.peerRouting = libp2pOptions.modules.peerRouting || [];\n    libp2pOptions.modules.peerRouting.push(new DelegatedPeerRouter__default[\"default\"](delegateHttpClient));\n  }\n\n  return libp2pConfig;\n}\n\nexports.createLibp2p = createLibp2p;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/libp2p.js"],"names":["Object","defineProperty","exports","value","get","require","mergeOpts","errCode","libp2pPubsubRouters","DelegatedPeerRouter","DelegatedContentRouter","ipfsHttpClient","multiaddr","version","libp2p","bootstrap","Libp2p","ipns","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","enumerable","freeze","get__default","mergeOpts__default","errCode__default","DelegatedPeerRouter__default","DelegatedContentRouter__default","bootstrap__default","Libp2p__default","ipns__namespace","mergeOptions","bind","ignoreUndefined","createLibp2p","options","peerId","multiaddrs","repo","keychainConfig","config","datastore","libp2pOptions","getLibp2pOptions","getPubsubRouter","router","routers","Error","libp2pDefaults","modules","pubsub","contentRouting","peerRouting","peerDiscovery","mdns","enabled","webRTCStar","list","relay","hop","active","dht","clientMode","kBucketSize","validators","validator","nat","addresses","listen","map","ma","toString","announce","noAnnounce","connectionManager","maxConnections","minConnections","keychain","host","agentVersion","ipfsCore","constructorOptions","undefined","libp2pConfig","bootstrapList","length","push","delegateHosts","delegateString","Math","floor","random","delegateAddr","Multiaddr","toOptions","delegateApiOptions","protocol","parseInt","port","delegateHttpClient"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar get = require('dlv');\nvar mergeOpts = require('merge-options');\nvar errCode = require('err-code');\nvar libp2pPubsubRouters = require('ipfs-core-config/libp2p-pubsub-routers');\nvar DelegatedPeerRouter = require('libp2p-delegated-peer-routing');\nvar DelegatedContentRouter = require('libp2p-delegated-content-routing');\nvar ipfsHttpClient = require('ipfs-http-client');\nvar multiaddr = require('multiaddr');\nvar version = require('../version.js');\nvar libp2p = require('ipfs-core-config/libp2p');\nvar bootstrap = require('libp2p-bootstrap');\nvar Libp2p = require('libp2p');\nvar ipns = require('ipns');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar get__default = /*#__PURE__*/_interopDefaultLegacy(get);\nvar mergeOpts__default = /*#__PURE__*/_interopDefaultLegacy(mergeOpts);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar DelegatedPeerRouter__default = /*#__PURE__*/_interopDefaultLegacy(DelegatedPeerRouter);\nvar DelegatedContentRouter__default = /*#__PURE__*/_interopDefaultLegacy(DelegatedContentRouter);\nvar bootstrap__default = /*#__PURE__*/_interopDefaultLegacy(bootstrap);\nvar Libp2p__default = /*#__PURE__*/_interopDefaultLegacy(Libp2p);\nvar ipns__namespace = /*#__PURE__*/_interopNamespace(ipns);\n\nconst mergeOptions = mergeOpts__default[\"default\"].bind({ ignoreUndefined: true });\nfunction createLibp2p({options = {}, peerId, multiaddrs = [], repo, keychainConfig = {}, config = {}}) {\n  const {datastore, keys} = repo;\n  const libp2pOptions = getLibp2pOptions({\n    options,\n    config,\n    datastore,\n    keys,\n    keychainConfig,\n    peerId,\n    multiaddrs\n  });\n  if (typeof options.libp2p === 'function') {\n    return options.libp2p({\n      libp2pOptions,\n      options,\n      config,\n      datastore,\n      peerId\n    });\n  }\n  return Libp2p__default[\"default\"].create(libp2pOptions);\n}\nfunction getLibp2pOptions({options, config, datastore, keys, keychainConfig, peerId, multiaddrs}) {\n  const getPubsubRouter = () => {\n    const router = get__default[\"default\"](config, 'Pubsub.Router') || 'gossipsub';\n    if (!libp2pPubsubRouters.routers[router]) {\n      throw errCode__default[\"default\"](new Error(`Router unavailable. Configure libp2p.modules.pubsub to use the ${ router } router.`), 'ERR_NOT_SUPPORTED');\n    }\n    return libp2pPubsubRouters.routers[router];\n  };\n  const libp2pDefaults = {\n    datastore,\n    peerId: peerId,\n    modules: {}\n  };\n  const libp2pOptions = {\n    modules: {\n      pubsub: getPubsubRouter(),\n      contentRouting: [],\n      peerRouting: []\n    },\n    config: {\n      peerDiscovery: {\n        mdns: { enabled: get__default[\"default\"](options, 'config.Discovery.MDNS.Enabled', get__default[\"default\"](config, 'Discovery.MDNS.Enabled', true)) },\n        webRTCStar: { enabled: get__default[\"default\"](options, 'config.Discovery.webRTCStar.Enabled', get__default[\"default\"](config, 'Discovery.webRTCStar.Enabled', true)) },\n        bootstrap: { list: get__default[\"default\"](options, 'config.Bootstrap', get__default[\"default\"](config, 'Bootstrap', [])) }\n      },\n      relay: {\n        enabled: get__default[\"default\"](options, 'relay.enabled', get__default[\"default\"](config, 'relay.enabled', true)),\n        hop: {\n          enabled: get__default[\"default\"](options, 'relay.hop.enabled', get__default[\"default\"](config, 'relay.hop.enabled', false)),\n          active: get__default[\"default\"](options, 'relay.hop.active', get__default[\"default\"](config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        enabled: get__default[\"default\"](config, 'Routing.Type', 'dhtclient') !== 'none',\n        clientMode: get__default[\"default\"](config, 'Routing.Type', 'dht') !== 'dhtserver',\n        kBucketSize: get__default[\"default\"](options, 'dht.kBucketSize', 20),\n        validators: { ipns: ipns__namespace.validator }\n      },\n      pubsub: { enabled: get__default[\"default\"](options, 'config.Pubsub.Enabled', get__default[\"default\"](config, 'Pubsub.Enabled', true)) },\n      nat: { enabled: !get__default[\"default\"](config, 'Swarm.DisableNatPortMap', false) }\n    },\n    addresses: {\n      listen: multiaddrs.map(ma => ma.toString()),\n      announce: get__default[\"default\"](options, 'addresses.announce', get__default[\"default\"](config, 'Addresses.Announce', [])),\n      noAnnounce: get__default[\"default\"](options, 'addresses.noAnnounce', get__default[\"default\"](config, 'Addresses.NoAnnounce', []))\n    },\n    connectionManager: get__default[\"default\"](options, 'connectionManager', {\n      maxConnections: get__default[\"default\"](options, 'config.Swarm.ConnMgr.HighWater', get__default[\"default\"](config, 'Swarm.ConnMgr.HighWater')),\n      minConnections: get__default[\"default\"](options, 'config.Swarm.ConnMgr.LowWater', get__default[\"default\"](config, 'Swarm.ConnMgr.LowWater'))\n    }),\n    keychain: {\n      datastore: keys,\n      ...keychainConfig\n    },\n    host: { agentVersion: `js-ipfs/${ version.ipfsCore }` }\n  };\n  let constructorOptions = get__default[\"default\"](options, 'libp2p', undefined);\n  if (typeof constructorOptions === 'function') {\n    constructorOptions = undefined;\n  }\n  const libp2pConfig = mergeOptions(libp2pDefaults, libp2p.libp2pConfig(), libp2pOptions, constructorOptions);\n  const bootstrapList = get__default[\"default\"](libp2pConfig, 'config.peerDiscovery.bootstrap.list', []);\n  if (bootstrapList.length > 0) {\n    libp2pConfig.modules.peerDiscovery.push(bootstrap__default[\"default\"]);\n  }\n  const delegateHosts = get__default[\"default\"](options, 'config.Addresses.Delegates', get__default[\"default\"](config, 'Addresses.Delegates', []));\n  if (delegateHosts.length > 0) {\n    const delegateString = delegateHosts[Math.floor(Math.random() * delegateHosts.length)];\n    const delegateAddr = new multiaddr.Multiaddr(delegateString).toOptions();\n    const delegateApiOptions = {\n      host: delegateAddr.host,\n      protocol: parseInt(delegateAddr.port) === 443 ? 'https' : 'http',\n      port: delegateAddr.port\n    };\n    const delegateHttpClient = ipfsHttpClient.create(delegateApiOptions);\n    libp2pOptions.modules.contentRouting = libp2pOptions.modules.contentRouting || [];\n    libp2pOptions.modules.contentRouting.push(new DelegatedContentRouter__default[\"default\"](peerId, delegateHttpClient));\n    libp2pOptions.modules.peerRouting = libp2pOptions.modules.peerRouting || [];\n    libp2pOptions.modules.peerRouting.push(new DelegatedPeerRouter__default[\"default\"](delegateHttpClient));\n  }\n  return libp2pConfig;\n}\n\nexports.createLibp2p = createLibp2p;\n"]},"metadata":{},"sourceType":"script"}