{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar key = require('interface-datastore/key');\n\nconst MFS_ROOT_KEY = new key.Key('/local/filesroot');\n\nasync function storeMfsRootInDatastore(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY);\n    await backends.datastore.put(MFS_ROOT_KEY, root);\n    await backends.root.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo datastore');\n}\n\nasync function storeMfsRootInRoot(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo root datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY);\n    await backends.root.put(MFS_ROOT_KEY, root);\n    await backends.datastore.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo root datastore');\n}\n\nconst migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};\nexports.migration = migration;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo-migrations/cjs/migrations/migration-11/index.js"],"names":["Object","defineProperty","exports","value","key","require","MFS_ROOT_KEY","Key","storeMfsRootInDatastore","backends","onProgress","root","open","datastore","has","get","put","delete","close","storeMfsRootInRoot","migration","version","description","migrate","revert"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAjB;;AAEA,MAAMC,YAAY,GAAG,IAAIF,GAAG,CAACG,GAAR,CAAY,kBAAZ,CAArB;;AACA,eAAeC,uBAAf,CAAuCC,QAAvC,EACG;AAAA,MAD8CC,UAC9C,uEAD2D,MAAM,CACnE,CAAE;AACDA,EAAAA,UAAU,CAAC,GAAD,EAAM,sCAAN,CAAV;AACA,QAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,QAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;AACA,MAAI,MAAMH,QAAQ,CAACE,IAAT,CAAcG,GAAd,CAAkBR,YAAlB,CAAV,EAA2C;AACzC,UAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,CAAcI,GAAd,CAAkBT,YAAlB,CAAnB;AACA,UAAMG,QAAQ,CAACI,SAAT,CAAmBG,GAAnB,CAAuBV,YAAvB,EAAqCK,IAArC,CAAN;AACA,UAAMF,QAAQ,CAACE,IAAT,CAAcM,MAAd,CAAqBX,YAArB,CAAN;AACD;;AACD,QAAMG,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;AACA,QAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;AACAR,EAAAA,UAAU,CAAC,GAAD,EAAM,mCAAN,CAAV;AACD;;AACD,eAAeS,kBAAf,CAAkCV,QAAlC,EACG;AAAA,MADyCC,UACzC,uEADsD,MAAM,CAC9D,CAAE;AACDA,EAAAA,UAAU,CAAC,GAAD,EAAM,2CAAN,CAAV;AACA,QAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,QAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;AACA,MAAI,MAAMH,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuBR,YAAvB,CAAV,EAAgD;AAC9C,UAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACI,SAAT,CAAmBE,GAAnB,CAAuBT,YAAvB,CAAnB;AACA,UAAMG,QAAQ,CAACE,IAAT,CAAcK,GAAd,CAAkBV,YAAlB,EAAgCK,IAAhC,CAAN;AACA,UAAMF,QAAQ,CAACI,SAAT,CAAmBI,MAAnB,CAA0BX,YAA1B,CAAN;AACD;;AACD,QAAMG,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;AACA,QAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;AACAR,EAAAA,UAAU,CAAC,GAAD,EAAM,wCAAN,CAAV;AACD;;AACD,MAAMU,SAAS,GAAG;AAChBC,EAAAA,OAAO,EAAE,EADO;AAEhBC,EAAAA,WAAW,EAAE,iCAFG;AAGhBC,EAAAA,OAAO,EAAEf,uBAHO;AAIhBgB,EAAAA,MAAM,EAAEL;AAJQ,CAAlB;AAOAjB,OAAO,CAACkB,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar key = require('interface-datastore/key');\n\nconst MFS_ROOT_KEY = new key.Key('/local/filesroot');\nasync function storeMfsRootInDatastore(backends, onProgress = () => {\n}) {\n  onProgress(100, 'Migrating MFS root to repo datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY);\n    await backends.datastore.put(MFS_ROOT_KEY, root);\n    await backends.root.delete(MFS_ROOT_KEY);\n  }\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo datastore');\n}\nasync function storeMfsRootInRoot(backends, onProgress = () => {\n}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY);\n    await backends.root.put(MFS_ROOT_KEY, root);\n    await backends.datastore.delete(MFS_ROOT_KEY);\n  }\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo root datastore');\n}\nconst migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};\n\nexports.migration = migration;\n"]},"metadata":{},"sourceType":"script"}