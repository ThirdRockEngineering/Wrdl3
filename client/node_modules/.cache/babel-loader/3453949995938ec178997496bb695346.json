{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar HTTP = require('ipfs-utils/src/http.js');\n\nvar debug = require('debug');\n\nvar PQueue = require('p-queue');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar HTTP__default = /*#__PURE__*/_interopDefaultLegacy(HTTP);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar PQueue__default = /*#__PURE__*/_interopDefaultLegacy(PQueue);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:preload'), {\n  error: debug__default[\"default\"]('ipfs:preload:error')\n});\nconst Queue = PQueue__default[\"default\"].default ? PQueue__default[\"default\"].default : PQueue__default[\"default\"];\nconst httpQueue = new Queue({\n  concurrency: 4\n});\n\nfunction preload(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  log(url);\n  return httpQueue.add(async () => {\n    const res = await HTTP__default[\"default\"].post(url, {\n      signal: options.signal\n    });\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const {\n          done\n        } = await reader.read();\n        if (done) return;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}\n\nexports.preload = preload;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core-config/cjs/src/preload.browser.js"],"names":["Object","defineProperty","exports","value","HTTP","require","debug","PQueue","_interopDefaultLegacy","e","HTTP__default","debug__default","PQueue__default","log","assign","error","Queue","default","httpQueue","concurrency","preload","url","options","add","res","post","signal","reader","body","getReader","done","read","releaseLock"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,wBAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,SAAD,CAApB;;AAEA,SAASG,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,aAAa,GAAG,aAAaF,qBAAqB,CAACJ,IAAD,CAAtD;;AACA,IAAIO,cAAc,GAAG,aAAaH,qBAAqB,CAACF,KAAD,CAAvD;;AACA,IAAIM,eAAe,GAAG,aAAaJ,qBAAqB,CAACD,MAAD,CAAxD;;AAEA,MAAMM,GAAG,GAAGb,MAAM,CAACc,MAAP,CAAcH,cAAc,CAAC,SAAD,CAAd,CAA0B,cAA1B,CAAd,EAAyD;AAAEI,EAAAA,KAAK,EAAEJ,cAAc,CAAC,SAAD,CAAd,CAA0B,oBAA1B;AAAT,CAAzD,CAAZ;AACA,MAAMK,KAAK,GAAGJ,eAAe,CAAC,SAAD,CAAf,CAA2BK,OAA3B,GAAqCL,eAAe,CAAC,SAAD,CAAf,CAA2BK,OAAhE,GAA0EL,eAAe,CAAC,SAAD,CAAvG;AACA,MAAMM,SAAS,GAAG,IAAIF,KAAJ,CAAU;AAAEG,EAAAA,WAAW,EAAE;AAAf,CAAV,CAAlB;;AACA,SAASC,OAAT,CAAiBC,GAAjB,EAAoC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAClCT,EAAAA,GAAG,CAACQ,GAAD,CAAH;AACA,SAAOH,SAAS,CAACK,GAAV,CAAc,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMd,aAAa,CAAC,SAAD,CAAb,CAAyBe,IAAzB,CAA8BJ,GAA9B,EAAmC;AAAEK,MAAAA,MAAM,EAAEJ,OAAO,CAACI;AAAlB,KAAnC,CAAlB;AACA,UAAMC,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,SAAT,EAAf;;AACA,QAAI;AACF,aAAO,IAAP,EAAa;AACX,cAAM;AAACC,UAAAA;AAAD,YAAS,MAAMH,MAAM,CAACI,IAAP,EAArB;AACA,YAAID,IAAJ,EACE;AACH;AACF,KAND,SAMU;AACRH,MAAAA,MAAM,CAACK,WAAP;AACD;AACF,GAZM,CAAP;AAaD;;AAED9B,OAAO,CAACkB,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar HTTP = require('ipfs-utils/src/http.js');\nvar debug = require('debug');\nvar PQueue = require('p-queue');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar HTTP__default = /*#__PURE__*/_interopDefaultLegacy(HTTP);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar PQueue__default = /*#__PURE__*/_interopDefaultLegacy(PQueue);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:preload'), { error: debug__default[\"default\"]('ipfs:preload:error') });\nconst Queue = PQueue__default[\"default\"].default ? PQueue__default[\"default\"].default : PQueue__default[\"default\"];\nconst httpQueue = new Queue({ concurrency: 4 });\nfunction preload(url, options = {}) {\n  log(url);\n  return httpQueue.add(async () => {\n    const res = await HTTP__default[\"default\"].post(url, { signal: options.signal });\n    const reader = res.body.getReader();\n    try {\n      while (true) {\n        const {done} = await reader.read();\n        if (done)\n          return;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}\n\nexports.preload = preload;\n"]},"metadata":{},"sourceType":"script"}