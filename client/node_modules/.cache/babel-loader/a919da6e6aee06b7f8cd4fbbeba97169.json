{"ast":null,"code":"'use strict';\n\nconst utils = require('../../utils');\n\nconst errcode = require('err-code');\n\nconst Libp2pRecord = require('libp2p-record');\n\nconst log = utils.logger('libp2p:kad-dht:rpc:handlers:put-value');\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message').Message} Message\n * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler\n */\n\n/**\n * @implements {DHTMessageHandler}\n */\n\nclass PutValueHandler {\n  /**\n   * @param {object} params\n   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators\n   * @param {import('interface-datastore').Datastore} params.records\n   */\n  constructor(_ref) {\n    let {\n      validators,\n      records\n    } = _ref;\n    this._validators = validators;\n    this._records = records;\n  }\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n\n\n  async handle(peerId, msg) {\n    const key = msg.key;\n    log('%p asked to store value for key %b', peerId, key);\n    const record = msg.record;\n\n    if (!record) {\n      const errMsg = `Empty record from: ${peerId.toB58String()}`;\n      log.error(errMsg);\n      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD');\n    }\n\n    await Libp2pRecord.validator.verifyRecord(this._validators, record);\n    record.timeReceived = new Date();\n    const recordKey = utils.bufferToKey(record.key);\n    await this._records.put(recordKey, record.serialize());\n    return msg;\n  }\n\n}\n\nmodule.exports.PutValueHandler = PutValueHandler;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/rpc/handlers/put-value.js"],"names":["utils","require","errcode","Libp2pRecord","log","logger","PutValueHandler","constructor","validators","records","_validators","_records","handle","peerId","msg","key","record","errMsg","toB58String","error","Error","validator","verifyRecord","timeReceived","Date","recordKey","bufferToKey","put","serialize","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AACA,MAAMG,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAa,uCAAb,CAAZ;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,eAAN,CAAsB;AACpB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,OAA2B;AAAA,QAAzB;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd,KAAyB;AACpC,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,QAAL,GAAgBF,OAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACc,QAANG,MAAM,CAAEC,MAAF,EAAUC,GAAV,EAAe;AACzB,UAAMC,GAAG,GAAGD,GAAG,CAACC,GAAhB;AACAX,IAAAA,GAAG,CAAC,oCAAD,EAAuCS,MAAvC,EAA+CE,GAA/C,CAAH;AAEA,UAAMC,MAAM,GAAGF,GAAG,CAACE,MAAnB;;AAEA,QAAI,CAACA,MAAL,EAAa;AACX,YAAMC,MAAM,GAAI,sBAAqBJ,MAAM,CAACK,WAAP,EAAqB,EAA1D;AAEAd,MAAAA,GAAG,CAACe,KAAJ,CAAUF,MAAV;AACA,YAAMf,OAAO,CAAC,IAAIkB,KAAJ,CAAUH,MAAV,CAAD,EAAoB,kBAApB,CAAb;AACD;;AAED,UAAMd,YAAY,CAACkB,SAAb,CAAuBC,YAAvB,CAAoC,KAAKZ,WAAzC,EAAsDM,MAAtD,CAAN;AAEAA,IAAAA,MAAM,CAACO,YAAP,GAAsB,IAAIC,IAAJ,EAAtB;AACA,UAAMC,SAAS,GAAGzB,KAAK,CAAC0B,WAAN,CAAkBV,MAAM,CAACD,GAAzB,CAAlB;AACA,UAAM,KAAKJ,QAAL,CAAcgB,GAAd,CAAkBF,SAAlB,EAA6BT,MAAM,CAACY,SAAP,EAA7B,CAAN;AAEA,WAAOd,GAAP;AACD;;AArCmB;;AAwCtBe,MAAM,CAACC,OAAP,CAAexB,eAAf,GAAiCA,eAAjC","sourcesContent":["'use strict'\n\nconst utils = require('../../utils')\nconst errcode = require('err-code')\nconst Libp2pRecord = require('libp2p-record')\nconst log = utils.logger('libp2p:kad-dht:rpc:handlers:put-value')\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../../message').Message} Message\n * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler\n */\n\n/**\n * @implements {DHTMessageHandler}\n */\nclass PutValueHandler {\n  /**\n   * @param {object} params\n   * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators\n   * @param {import('interface-datastore').Datastore} params.records\n   */\n  constructor ({ validators, records }) {\n    this._validators = validators\n    this._records = records\n  }\n\n  /**\n   * Process `PutValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   */\n  async handle (peerId, msg) {\n    const key = msg.key\n    log('%p asked to store value for key %b', peerId, key)\n\n    const record = msg.record\n\n    if (!record) {\n      const errMsg = `Empty record from: ${peerId.toB58String()}`\n\n      log.error(errMsg)\n      throw errcode(new Error(errMsg), 'ERR_EMPTY_RECORD')\n    }\n\n    await Libp2pRecord.validator.verifyRecord(this._validators, record)\n\n    record.timeReceived = new Date()\n    const recordKey = utils.bufferToKey(record.key)\n    await this._records.put(recordKey, record.serialize())\n\n    return msg\n  }\n}\n\nmodule.exports.PutValueHandler = PutValueHandler\n"]},"metadata":{},"sourceType":"script"}