{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar debounce = require('just-debounce-it');\n\nvar index$1 = require('../message/index.js');\n\nvar index = require('../utils/index.js');\n\nvar constants = require('../constants.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);\n\nclass MsgQueue {\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = index.logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce__default[\"default\"](this._sendEntries.bind(this), constants.wantlistSendDebounceMs);\n  }\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new index$1.BitswapMessage(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);\n\n      return;\n    }\n\n    this._log('sending message to peer %s', this.peerId.toB58String());\n\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n\n}\n\nexports.MsgQueue = MsgQueue;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-bitswap/cjs/src/want-manager/msg-queue.js"],"names":["Object","defineProperty","exports","value","debounce","require","index$1","index","constants","_interopDefaultLegacy","e","debounce__default","MsgQueue","constructor","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","logger","sendEntries","_sendEntries","bind","wantlistSendDebounceMs","addMessage","msg","empty","send","addEntries","entries","concat","length","BitswapMessage","forEach","entry","cancel","cid","addEntry","priority","connectTo","err","error","toB58String","message","sendMessage","catch"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar debounce = require('just-debounce-it');\nvar index$1 = require('../message/index.js');\nvar index = require('../utils/index.js');\nvar constants = require('../constants.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);\n\nclass MsgQueue {\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    this._entries = [];\n    this._log = index.logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce__default[\"default\"](this._sendEntries.bind(this), constants.wantlistSendDebounceMs);\n  }\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n    this.send(msg);\n  }\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n    const msg = new index$1.BitswapMessage(false);\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n    this._entries = [];\n    this.addMessage(msg);\n  }\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch (err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toB58String(), err.message);\n      return;\n    }\n    this._log('sending message to peer %s', this.peerId.toB58String());\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n}\n\nexports.MsgQueue = MsgQueue;\n"]},"metadata":{},"sourceType":"script"}