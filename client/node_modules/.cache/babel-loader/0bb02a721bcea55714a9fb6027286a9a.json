{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar WS = require('libp2p-websockets');\n\nvar WebRTCStar = require('libp2p-webrtc-star');\n\nvar Multiplex = require('libp2p-mplex');\n\nvar libp2pNoise = require('@chainsafe/libp2p-noise');\n\nvar KadDHT = require('libp2p-kad-dht');\n\nvar GossipSub = require('libp2p-gossipsub');\n\nvar ipns = require('./utils/ipns.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar WS__default = /*#__PURE__*/_interopDefaultLegacy(WS);\n\nvar WebRTCStar__default = /*#__PURE__*/_interopDefaultLegacy(WebRTCStar);\n\nvar Multiplex__default = /*#__PURE__*/_interopDefaultLegacy(Multiplex);\n\nvar KadDHT__default = /*#__PURE__*/_interopDefaultLegacy(KadDHT);\n\nvar GossipSub__default = /*#__PURE__*/_interopDefaultLegacy(GossipSub);\n\nfunction libp2pConfig() {\n  const options = {\n    dialer: {\n      maxParallelDials: 150,\n      maxDialsPerPeer: 4,\n      dialTimeout: 10000\n    },\n    modules: {\n      transport: [WS__default[\"default\"], WebRTCStar__default[\"default\"]],\n      streamMuxer: [Multiplex__default[\"default\"]],\n      connEncryption: [libp2pNoise.NOISE],\n      peerDiscovery: [],\n      dht: KadDHT__default[\"default\"],\n      pubsub: GossipSub__default[\"default\"]\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        bootstrap: {\n          enabled: true\n        },\n        webRTCStar: {\n          enabled: true\n        }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: true,\n        clientMode: true,\n        validators: {\n          ipns: ipns.validator\n        },\n        selectors: {\n          ipns: ipns.selector\n        }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      },\n      nat: {\n        enabled: false\n      }\n    },\n    metrics: {\n      enabled: true\n    },\n    peerStore: {\n      persistence: true\n    }\n  };\n  return options;\n}\n\nexports.libp2pConfig = libp2pConfig;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core-config/cjs/src/libp2p.browser.js"],"names":["Object","defineProperty","exports","value","WS","require","WebRTCStar","Multiplex","libp2pNoise","KadDHT","GossipSub","ipns","_interopDefaultLegacy","e","WS__default","WebRTCStar__default","Multiplex__default","KadDHT__default","GossipSub__default","libp2pConfig","options","dialer","maxParallelDials","maxDialsPerPeer","dialTimeout","modules","transport","streamMuxer","connEncryption","NOISE","peerDiscovery","dht","pubsub","config","autoDial","bootstrap","enabled","webRTCStar","kBucketSize","clientMode","validators","validator","selectors","selector","emitSelf","nat","metrics","peerStore","persistence"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar WS = require('libp2p-websockets');\nvar WebRTCStar = require('libp2p-webrtc-star');\nvar Multiplex = require('libp2p-mplex');\nvar libp2pNoise = require('@chainsafe/libp2p-noise');\nvar KadDHT = require('libp2p-kad-dht');\nvar GossipSub = require('libp2p-gossipsub');\nvar ipns = require('./utils/ipns.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar WS__default = /*#__PURE__*/_interopDefaultLegacy(WS);\nvar WebRTCStar__default = /*#__PURE__*/_interopDefaultLegacy(WebRTCStar);\nvar Multiplex__default = /*#__PURE__*/_interopDefaultLegacy(Multiplex);\nvar KadDHT__default = /*#__PURE__*/_interopDefaultLegacy(KadDHT);\nvar GossipSub__default = /*#__PURE__*/_interopDefaultLegacy(GossipSub);\n\nfunction libp2pConfig() {\n  const options = {\n    dialer: {\n      maxParallelDials: 150,\n      maxDialsPerPeer: 4,\n      dialTimeout: 10000\n    },\n    modules: {\n      transport: [\n        WS__default[\"default\"],\n        WebRTCStar__default[\"default\"]\n      ],\n      streamMuxer: [Multiplex__default[\"default\"]],\n      connEncryption: [libp2pNoise.NOISE],\n      peerDiscovery: [],\n      dht: KadDHT__default[\"default\"],\n      pubsub: GossipSub__default[\"default\"]\n    },\n    config: {\n      peerDiscovery: {\n        autoDial: true,\n        bootstrap: { enabled: true },\n        webRTCStar: { enabled: true }\n      },\n      dht: {\n        kBucketSize: 20,\n        enabled: true,\n        clientMode: true,\n        validators: { ipns: ipns.validator },\n        selectors: { ipns: ipns.selector }\n      },\n      pubsub: {\n        enabled: true,\n        emitSelf: true\n      },\n      nat: { enabled: false }\n    },\n    metrics: { enabled: true },\n    peerStore: { persistence: true }\n  };\n  return options;\n}\n\nexports.libp2pConfig = libp2pConfig;\n"]},"metadata":{},"sourceType":"script"}