{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageDeliveries = exports.DeliveryRecordStatus = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nconst denque_1 = __importDefault(require(\"denque\"));\n\nvar DeliveryRecordStatus;\n\n(function (DeliveryRecordStatus) {\n  /**\n   * we don't know (yet) if the message is valid\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n  /**\n   * we know the message is valid\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n  /**\n   * we know the message is invalid\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n  /**\n   * we were instructed by the validator to ignore the message\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus = exports.DeliveryRecordStatus || (exports.DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\n\n\nclass MessageDeliveries {\n  constructor() {\n    this.records = new Map();\n    this.queue = new denque_1.default();\n  }\n\n  ensureRecord(msgIdStr) {\n    let drec = this.records.get(msgIdStr);\n\n    if (drec) {\n      return drec;\n    } // record doesn't exist yet\n    // create record\n\n\n    drec = {\n      status: DeliveryRecordStatus.unknown,\n      firstSeen: Date.now(),\n      validated: 0,\n      peers: new Set()\n    };\n    this.records.set(msgIdStr, drec); // and add msgId to the queue\n\n    const entry = {\n      msgId: msgIdStr,\n      expire: Date.now() + constants_1.TimeCacheDuration\n    };\n    this.queue.push(entry);\n    return drec;\n  }\n\n  gc() {\n    const now = Date.now(); // queue is sorted by expiry time\n    // remove expired messages, remove from queue until first un-expired message found\n\n    let head = this.queue.peekFront();\n\n    while (head && head.expire < now) {\n      this.records.delete(head.msgId);\n      this.queue.shift();\n      head = this.queue.peekFront();\n    }\n  }\n\n  clear() {\n    this.records.clear();\n    this.queue.clear();\n  }\n\n}\n\nexports.MessageDeliveries = MessageDeliveries;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-gossipsub/src/score/message-deliveries.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","MessageDeliveries","DeliveryRecordStatus","constants_1","require","denque_1","constructor","records","Map","queue","default","ensureRecord","msgIdStr","drec","get","status","unknown","firstSeen","Date","now","validated","peers","Set","set","entry","msgId","expire","TimeCacheDuration","push","gc","head","peekFront","delete","shift","clear"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageDeliveries = exports.DeliveryRecordStatus = void 0;\nconst constants_1 = require(\"../constants\");\nconst denque_1 = __importDefault(require(\"denque\"));\nvar DeliveryRecordStatus;\n(function (DeliveryRecordStatus) {\n    /**\n     * we don't know (yet) if the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n    /**\n     * we know the message is valid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n    /**\n     * we know the message is invalid\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n    /**\n     * we were instructed by the validator to ignore the message\n     */\n    DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus = exports.DeliveryRecordStatus || (exports.DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\nclass MessageDeliveries {\n    constructor() {\n        this.records = new Map();\n        this.queue = new denque_1.default();\n    }\n    ensureRecord(msgIdStr) {\n        let drec = this.records.get(msgIdStr);\n        if (drec) {\n            return drec;\n        }\n        // record doesn't exist yet\n        // create record\n        drec = {\n            status: DeliveryRecordStatus.unknown,\n            firstSeen: Date.now(),\n            validated: 0,\n            peers: new Set()\n        };\n        this.records.set(msgIdStr, drec);\n        // and add msgId to the queue\n        const entry = {\n            msgId: msgIdStr,\n            expire: Date.now() + constants_1.TimeCacheDuration\n        };\n        this.queue.push(entry);\n        return drec;\n    }\n    gc() {\n        const now = Date.now();\n        // queue is sorted by expiry time\n        // remove expired messages, remove from queue until first un-expired message found\n        let head = this.queue.peekFront();\n        while (head && head.expire < now) {\n            this.records.delete(head.msgId);\n            this.queue.shift();\n            head = this.queue.peekFront();\n        }\n    }\n    clear() {\n        this.records.clear();\n        this.queue.clear();\n    }\n}\nexports.MessageDeliveries = MessageDeliveries;\n"]},"metadata":{},"sourceType":"script"}