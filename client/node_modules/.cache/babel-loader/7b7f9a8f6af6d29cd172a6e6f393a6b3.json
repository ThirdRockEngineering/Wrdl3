{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPut(_ref) {\n  let {\n    codecs,\n    hashers,\n    repo,\n    preload\n  } = _ref;\n\n  async function put(block) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0;\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256');\n      const hash = await hasher.digest(block);\n      const codec = await codecs.getCodec(codecName);\n      const cid$1 = cid.CID.create(cidVersion, codec.code, hash);\n      await repo.blocks.put(cid$1, block, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid$1, {\n          signal: options.signal\n        });\n      }\n\n      return cid$1;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/block/put.js"],"names":["Object","defineProperty","exports","value","cid","require","withTimeoutOption","createPut","codecs","hashers","repo","preload","put","block","options","release","pin","gcLock","readLock","cidVersion","version","codecName","format","hasher","getHasher","mhtype","hash","digest","codec","getCodec","cid$1","CID","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASE,SAAT,OAAqD;AAAA,MAAlC;AAACC,IAAAA,MAAD;AAASC,IAAAA,OAAT;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA;AAAxB,GAAkC;;AACnD,iBAAeC,GAAf,CAAmBC,KAAnB,EAAwC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACtC,UAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,GAAc,MAAMN,IAAI,CAACO,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AACA,QAAI;AACF,YAAMC,UAAU,GAAGL,OAAO,CAACM,OAAR,IAAmB,IAAnB,GAA0BN,OAAO,CAACM,OAAlC,GAA4C,CAA/D;AACA,YAAMC,SAAS,GAAGP,OAAO,CAACQ,MAAR,KAAmBH,UAAU,KAAK,CAAf,GAAmB,QAAnB,GAA8B,KAAjD,CAAlB;AACA,YAAMI,MAAM,GAAG,MAAMd,OAAO,CAACe,SAAR,CAAkBV,OAAO,CAACW,MAAR,IAAkB,UAApC,CAArB;AACA,YAAMC,IAAI,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcd,KAAd,CAAnB;AACA,YAAMe,KAAK,GAAG,MAAMpB,MAAM,CAACqB,QAAP,CAAgBR,SAAhB,CAApB;AACA,YAAMS,KAAK,GAAG1B,GAAG,CAAC2B,GAAJ,CAAQC,MAAR,CAAeb,UAAf,EAA2BS,KAAK,CAACK,IAAjC,EAAuCP,IAAvC,CAAd;AACA,YAAMhB,IAAI,CAACwB,MAAL,CAAYtB,GAAZ,CAAgBkB,KAAhB,EAAuBjB,KAAvB,EAA8B;AAAEsB,QAAAA,MAAM,EAAErB,OAAO,CAACqB;AAAlB,OAA9B,CAAN;;AACA,UAAIrB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACmB,KAAD,CAAP;AACD;;AACD,UAAIhB,OAAO,CAACE,GAAR,KAAgB,IAApB,EAA0B;AACxB,cAAMN,IAAI,CAAC0B,IAAL,CAAUC,cAAV,CAAyBP,KAAzB,EAAgC;AAAEK,UAAAA,MAAM,EAAErB,OAAO,CAACqB;AAAlB,SAAhC,CAAN;AACD;;AACD,aAAOL,KAAP;AACD,KAfD,SAeU;AACR,UAAIf,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;AACF;AACF;;AACD,SAAOT,iBAAiB,CAACA,iBAAlB,CAAoCM,GAApC,CAAP;AACD;;AAEDV,OAAO,CAACK,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPut({codecs, hashers, repo, preload}) {\n  async function put(block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n    try {\n      const cidVersion = options.version != null ? options.version : 0;\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256');\n      const hash = await hasher.digest(block);\n      const codec = await codecs.getCodec(codecName);\n      const cid$1 = cid.CID.create(cidVersion, codec.code, hash);\n      await repo.blocks.put(cid$1, block, { signal: options.signal });\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid$1, { signal: options.signal });\n      }\n      return cid$1;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;\n"]},"metadata":{},"sourceType":"script"}