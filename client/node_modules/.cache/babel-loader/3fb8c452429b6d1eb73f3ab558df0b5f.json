{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst errCode = require('err-code');\n\nconst multistream = require('./multistream'); // @ts-expect-error no types\n\n\nconst handshake = require('it-handshake');\n\nconst log = Object.assign(debug('mss:select'), {\n  error: debug('mss:select:error')\n});\n/**\n * @typedef {import('bl/BufferList')} BufferList\n * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream\n * @typedef {import('./types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {DuplexStream} stream\n * @param {string | string[]} protocols\n * @param {string} [protocolId]\n * @param {AbortOptions} [options]\n */\n\nmodule.exports = async function select(stream, protocols, protocolId, options) {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols];\n  const {\n    reader,\n    writer,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n  const protocol = protocols.shift();\n\n  if (!protocol) {\n    throw new Error('At least one protocol must be specified');\n  }\n\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol);\n    multistream.writeAll(writer, [protocolId, protocol]);\n  } else {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n  }\n\n  let response = (await multistream.read(reader, options)).toString();\n  log('select: read \"%s\"', response); // Read the protocol response if we got the protocolId in return\n\n  if (response === protocolId) {\n    response = (await multistream.read(reader, options)).toString();\n    log('select: read \"%s\"', response);\n  } // We're done\n\n\n  if (response === protocol) {\n    rest();\n    return {\n      stream: shakeStream,\n      protocol\n    };\n  } // We haven't gotten a valid ack, try the other protocols\n\n\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol);\n    multistream.write(writer, protocol);\n    const response = (await multistream.read(reader, options)).toString();\n    log('select: read \"%s\" for \"%s\"', response, protocol);\n\n    if (response === protocol) {\n      rest(); // End our writer so others can start writing to stream\n\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n  }\n\n  rest();\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL');\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/multistream-select/src/select.js"],"names":["debug","require","errCode","multistream","handshake","log","Object","assign","error","module","exports","select","stream","protocols","protocolId","options","Array","isArray","reader","writer","rest","shakeStream","protocol","shift","Error","writeAll","write","response","read","toString"],"mappings":"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","sourcesContent":["'use strict'\n\nconst debug = require('debug')\nconst errCode = require('err-code')\nconst multistream = require('./multistream')\n// @ts-expect-error no types\nconst handshake = require('it-handshake')\n\nconst log = Object.assign(debug('mss:select'), {\n  error: debug('mss:select:error')\n})\n\n/**\n * @typedef {import('bl/BufferList')} BufferList\n * @typedef {import('./types').DuplexStream<Uint8Array | BufferList>} DuplexStream\n * @typedef {import('./types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {DuplexStream} stream\n * @param {string | string[]} protocols\n * @param {string} [protocolId]\n * @param {AbortOptions} [options]\n */\nmodule.exports = async function select (stream, protocols, protocolId, options) {\n  protocols = Array.isArray(protocols) ? [...protocols] : [protocols]\n  const { reader, writer, rest, stream: shakeStream } = handshake(stream)\n\n  const protocol = protocols.shift()\n\n  if (!protocol) {\n    throw new Error('At least one protocol must be specified')\n  }\n\n  if (protocolId) {\n    log('select: write [\"%s\", \"%s\"]', protocolId, protocol)\n    multistream.writeAll(writer, [protocolId, protocol])\n  } else {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n  }\n\n  let response = (await multistream.read(reader, options)).toString()\n  log('select: read \"%s\"', response)\n\n  // Read the protocol response if we got the protocolId in return\n  if (response === protocolId) {\n    response = (await multistream.read(reader, options)).toString()\n    log('select: read \"%s\"', response)\n  }\n\n  // We're done\n  if (response === protocol) {\n    rest()\n    return { stream: shakeStream, protocol }\n  }\n\n  // We haven't gotten a valid ack, try the other protocols\n  for (const protocol of protocols) {\n    log('select: write \"%s\"', protocol)\n    multistream.write(writer, protocol)\n    const response = (await multistream.read(reader, options)).toString()\n    log('select: read \"%s\" for \"%s\"', response, protocol)\n\n    if (response === protocol) {\n      rest() // End our writer so others can start writing to stream\n      return { stream: shakeStream, protocol }\n    }\n  }\n\n  rest()\n  throw errCode(new Error('protocol selection failed'), 'ERR_UNSUPPORTED_PROTOCOL')\n}\n"]},"metadata":{},"sourceType":"script"}