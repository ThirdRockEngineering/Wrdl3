{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar sortedMap = require('../utils/sorted-map.js');\n\nconst DefaultTaskMerger = {\n  hasNewInfo() {\n    return false;\n  },\n\n  merge() {}\n\n};\n\nclass RequestQueue {\n  constructor() {\n    let taskMerger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultTaskMerger;\n    this._taskMerger = taskMerger;\n    this._byPeer = new sortedMap.SortedMap([], PeerTasks.compare);\n  }\n\n  pushTasks(peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger);\n    }\n\n    peerTasks.pushTasks(tasks);\n\n    this._byPeer.set(peerId.toB58String(), peerTasks);\n  }\n\n  popTasks(targetMinBytes) {\n    const peerTasks = this._head();\n\n    if (peerTasks === undefined) {\n      return {\n        tasks: [],\n        pendingSize: 0\n      };\n    }\n\n    const {\n      tasks,\n      pendingSize\n    } = peerTasks.popTasks(targetMinBytes);\n\n    if (tasks.length === 0) {\n      return {\n        tasks,\n        pendingSize\n      };\n    }\n\n    const peerId = peerTasks.peerId;\n\n    if (peerTasks.isIdle()) {\n      this._byPeer.delete(peerId.toB58String());\n    } else {\n      this._byPeer.update(0);\n    }\n\n    return {\n      peerId,\n      tasks,\n      pendingSize\n    };\n  }\n\n  _head() {\n    if (this._byPeer.size === 0) {\n      return undefined;\n    }\n\n    for (const [, v] of this._byPeer) {\n      return v;\n    }\n\n    return undefined;\n  }\n\n  remove(topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    peerTasks && peerTasks.remove(topic);\n  }\n\n  tasksDone(peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n\n    if (!peerTasks) {\n      return;\n    }\n\n    const i = this._byPeer.indexOf(peerId.toB58String());\n\n    for (const task of tasks) {\n      peerTasks.taskDone(task);\n    }\n\n    this._byPeer.update(i);\n  }\n\n}\n\nclass PeerTasks {\n  constructor(peerId, taskMerger) {\n    this.peerId = peerId;\n    this._taskMerger = taskMerger;\n    this._activeTotalSize = 0;\n    this._pending = new PendingTasks();\n    this._active = new Set();\n  }\n\n  pushTasks(tasks) {\n    for (const t of tasks) {\n      this._pushTask(t);\n    }\n  }\n\n  _pushTask(task) {\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return;\n    }\n\n    const existingTask = this._pending.get(task.topic);\n\n    if (existingTask) {\n      if (task.priority > existingTask.priority) {\n        this._pending.updatePriority(task.topic, task.priority);\n      }\n\n      this._taskMerger.merge(task, existingTask);\n\n      return;\n    }\n\n    this._pending.add(task);\n  }\n\n  _taskHasMoreInfoThanActiveTasks(task) {\n    const tasksWithTopic = [];\n\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask);\n      }\n    }\n\n    if (tasksWithTopic.length === 0) {\n      return true;\n    }\n\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n  }\n\n  popTasks(targetMinBytes) {\n    let size = 0;\n    const tasks = [];\n\n    const pendingTasks = this._pending.tasks();\n\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i];\n      tasks.push(task);\n      size += task.size;\n\n      this._pending.delete(task.topic);\n\n      this._activeTotalSize += task.size;\n\n      this._active.add(task);\n    }\n\n    return {\n      tasks,\n      pendingSize: this._pending.totalSize\n    };\n  }\n\n  taskDone(task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size;\n\n      this._active.delete(task);\n    }\n  }\n\n  remove(topic) {\n    this._pending.delete(topic);\n  }\n\n  isIdle() {\n    return this._pending.length === 0 && this._active.size === 0;\n  }\n\n  static compare(a, b) {\n    if (a[1]._pending.length === 0) {\n      return 1;\n    }\n\n    if (b[1]._pending.length === 0) {\n      return -1;\n    }\n\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      return b[1]._pending.length - a[1]._pending.length;\n    }\n\n    return a[1]._activeTotalSize - b[1]._activeTotalSize;\n  }\n\n}\n\nclass PendingTasks {\n  constructor() {\n    this._tasks = new sortedMap.SortedMap([], this._compare);\n  }\n\n  get length() {\n    return this._tasks.size;\n  }\n\n  get totalSize() {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n  }\n\n  get(topic) {\n    return (this._tasks.get(topic) || {}).task;\n  }\n\n  add(task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    });\n  }\n\n  delete(topic) {\n    this._tasks.delete(topic);\n  }\n\n  tasks() {\n    return [...this._tasks.values()].map(i => i.task);\n  }\n\n  updatePriority(topic, priority) {\n    const obj = this._tasks.get(topic);\n\n    if (!obj) {\n      return;\n    }\n\n    const i = this._tasks.indexOf(topic);\n\n    obj.task.priority = priority;\n\n    this._tasks.update(i);\n  }\n\n  _compare(a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      return a[1].created - b[1].created;\n    }\n\n    return b[1].task.priority - a[1].task.priority;\n  }\n\n}\n\nexports.RequestQueue = RequestQueue;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-bitswap/cjs/src/decision-engine/req-queue.js"],"names":["Object","defineProperty","exports","value","sortedMap","require","DefaultTaskMerger","hasNewInfo","merge","RequestQueue","constructor","taskMerger","_taskMerger","_byPeer","SortedMap","PeerTasks","compare","pushTasks","peerId","tasks","peerTasks","get","toB58String","set","popTasks","targetMinBytes","_head","undefined","pendingSize","length","isIdle","delete","update","size","v","remove","topic","tasksDone","i","indexOf","task","taskDone","_activeTotalSize","_pending","PendingTasks","_active","Set","t","_pushTask","_taskHasMoreInfoThanActiveTasks","existingTask","priority","updatePriority","add","tasksWithTopic","activeTask","push","pendingTasks","totalSize","has","a","b","_tasks","_compare","values","reduce","created","Date","now","map","obj"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar sortedMap = require('../utils/sorted-map.js');\n\nconst DefaultTaskMerger = {\n  hasNewInfo() {\n    return false;\n  },\n  merge() {\n  }\n};\nclass RequestQueue {\n  constructor(taskMerger = DefaultTaskMerger) {\n    this._taskMerger = taskMerger;\n    this._byPeer = new sortedMap.SortedMap([], PeerTasks.compare);\n  }\n  pushTasks(peerId, tasks) {\n    let peerTasks = this._byPeer.get(peerId.toB58String());\n    if (!peerTasks) {\n      peerTasks = new PeerTasks(peerId, this._taskMerger);\n    }\n    peerTasks.pushTasks(tasks);\n    this._byPeer.set(peerId.toB58String(), peerTasks);\n  }\n  popTasks(targetMinBytes) {\n    const peerTasks = this._head();\n    if (peerTasks === undefined) {\n      return {\n        tasks: [],\n        pendingSize: 0\n      };\n    }\n    const {tasks, pendingSize} = peerTasks.popTasks(targetMinBytes);\n    if (tasks.length === 0) {\n      return {\n        tasks,\n        pendingSize\n      };\n    }\n    const peerId = peerTasks.peerId;\n    if (peerTasks.isIdle()) {\n      this._byPeer.delete(peerId.toB58String());\n    } else {\n      this._byPeer.update(0);\n    }\n    return {\n      peerId,\n      tasks,\n      pendingSize\n    };\n  }\n  _head() {\n    if (this._byPeer.size === 0) {\n      return undefined;\n    }\n    for (const [, v] of this._byPeer) {\n      return v;\n    }\n    return undefined;\n  }\n  remove(topic, peerId) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n    peerTasks && peerTasks.remove(topic);\n  }\n  tasksDone(peerId, tasks) {\n    const peerTasks = this._byPeer.get(peerId.toB58String());\n    if (!peerTasks) {\n      return;\n    }\n    const i = this._byPeer.indexOf(peerId.toB58String());\n    for (const task of tasks) {\n      peerTasks.taskDone(task);\n    }\n    this._byPeer.update(i);\n  }\n}\nclass PeerTasks {\n  constructor(peerId, taskMerger) {\n    this.peerId = peerId;\n    this._taskMerger = taskMerger;\n    this._activeTotalSize = 0;\n    this._pending = new PendingTasks();\n    this._active = new Set();\n  }\n  pushTasks(tasks) {\n    for (const t of tasks) {\n      this._pushTask(t);\n    }\n  }\n  _pushTask(task) {\n    if (!this._taskHasMoreInfoThanActiveTasks(task)) {\n      return;\n    }\n    const existingTask = this._pending.get(task.topic);\n    if (existingTask) {\n      if (task.priority > existingTask.priority) {\n        this._pending.updatePriority(task.topic, task.priority);\n      }\n      this._taskMerger.merge(task, existingTask);\n      return;\n    }\n    this._pending.add(task);\n  }\n  _taskHasMoreInfoThanActiveTasks(task) {\n    const tasksWithTopic = [];\n    for (const activeTask of this._active) {\n      if (activeTask.topic === task.topic) {\n        tasksWithTopic.push(activeTask);\n      }\n    }\n    if (tasksWithTopic.length === 0) {\n      return true;\n    }\n    return this._taskMerger.hasNewInfo(task, tasksWithTopic);\n  }\n  popTasks(targetMinBytes) {\n    let size = 0;\n    const tasks = [];\n    const pendingTasks = this._pending.tasks();\n    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {\n      const task = pendingTasks[i];\n      tasks.push(task);\n      size += task.size;\n      this._pending.delete(task.topic);\n      this._activeTotalSize += task.size;\n      this._active.add(task);\n    }\n    return {\n      tasks,\n      pendingSize: this._pending.totalSize\n    };\n  }\n  taskDone(task) {\n    if (this._active.has(task)) {\n      this._activeTotalSize -= task.size;\n      this._active.delete(task);\n    }\n  }\n  remove(topic) {\n    this._pending.delete(topic);\n  }\n  isIdle() {\n    return this._pending.length === 0 && this._active.size === 0;\n  }\n  static compare(a, b) {\n    if (a[1]._pending.length === 0) {\n      return 1;\n    }\n    if (b[1]._pending.length === 0) {\n      return -1;\n    }\n    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {\n      return b[1]._pending.length - a[1]._pending.length;\n    }\n    return a[1]._activeTotalSize - b[1]._activeTotalSize;\n  }\n}\nclass PendingTasks {\n  constructor() {\n    this._tasks = new sortedMap.SortedMap([], this._compare);\n  }\n  get length() {\n    return this._tasks.size;\n  }\n  get totalSize() {\n    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);\n  }\n  get(topic) {\n    return (this._tasks.get(topic) || {}).task;\n  }\n  add(task) {\n    this._tasks.set(task.topic, {\n      created: Date.now(),\n      task\n    });\n  }\n  delete(topic) {\n    this._tasks.delete(topic);\n  }\n  tasks() {\n    return [...this._tasks.values()].map(i => i.task);\n  }\n  updatePriority(topic, priority) {\n    const obj = this._tasks.get(topic);\n    if (!obj) {\n      return;\n    }\n    const i = this._tasks.indexOf(topic);\n    obj.task.priority = priority;\n    this._tasks.update(i);\n  }\n  _compare(a, b) {\n    if (a[1].task.priority === b[1].task.priority) {\n      return a[1].created - b[1].created;\n    }\n    return b[1].task.priority - a[1].task.priority;\n  }\n}\n\nexports.RequestQueue = RequestQueue;\n"]},"metadata":{},"sourceType":"script"}