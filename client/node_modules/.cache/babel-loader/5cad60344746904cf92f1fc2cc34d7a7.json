{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar blockstoreCore = require('blockstore-core');\n\nvar merge = require('it-merge');\n\nvar pushable = require('it-pushable');\n\nvar filter = require('it-filter');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\n\nvar pushable__default = /*#__PURE__*/_interopDefaultLegacy(pushable);\n\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nclass BlockStorage extends blockstoreCore.BaseBlockstore {\n  constructor(blockstore, bitswap) {\n    super();\n    this.child = blockstore;\n    this.bitswap = bitswap;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n  unwrap() {\n    return this.child;\n  }\n\n  async put(cid, block) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (await this.has(cid)) {\n      return;\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options);\n    } else {\n      await this.child.put(cid, block, options);\n    }\n  }\n\n  async *putMany(blocks) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const missingBlocks = filter__default[\"default\"](blocks, async _ref => {\n      let {\n        key\n      } = _ref;\n      return !(await this.has(key));\n    });\n\n    if (this.bitswap.isStarted()) {\n      yield* this.bitswap.putMany(missingBlocks, options);\n    } else {\n      yield* this.child.putMany(missingBlocks, options);\n    }\n  }\n\n  async get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options);\n    } else {\n      return this.child.get(cid, options);\n    }\n  }\n\n  async *getMany(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const getFromBitswap = pushable__default[\"default\"]();\n    const getFromChild = pushable__default[\"default\"]();\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid);\n        } else {\n          getFromChild.push(cid);\n        }\n      }\n\n      getFromBitswap.end();\n      getFromChild.end();\n    });\n    yield* merge__default[\"default\"](this.bitswap.getMany(getFromBitswap, options), this.child.getMany(getFromChild, options));\n  }\n\n  async delete(cid, options) {\n    await this.child.delete(cid, options);\n  }\n\n  async *deleteMany(cids, options) {\n    yield* this.child.deleteMany(cids, options);\n  }\n\n  async has(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.child.has(cid, options);\n  }\n\n  async *query(q) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    yield* this.child.query(q, options);\n  }\n\n  async *queryKeys(q) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    yield* this.child.queryKeys(q, options);\n  }\n\n}\n\nexports.BlockStorage = BlockStorage;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/block-storage.js"],"names":["Object","defineProperty","exports","value","blockstoreCore","require","merge","pushable","filter","_interopDefaultLegacy","e","merge__default","pushable__default","filter__default","BlockStorage","BaseBlockstore","constructor","blockstore","bitswap","child","open","close","unwrap","put","cid","block","options","has","isStarted","putMany","blocks","missingBlocks","key","get","getMany","cids","getFromBitswap","getFromChild","Promise","resolve","then","push","end","delete","deleteMany","query","q","queryKeys"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar blockstoreCore = require('blockstore-core');\nvar merge = require('it-merge');\nvar pushable = require('it-pushable');\nvar filter = require('it-filter');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar merge__default = /*#__PURE__*/_interopDefaultLegacy(merge);\nvar pushable__default = /*#__PURE__*/_interopDefaultLegacy(pushable);\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nclass BlockStorage extends blockstoreCore.BaseBlockstore {\n  constructor(blockstore, bitswap) {\n    super();\n    this.child = blockstore;\n    this.bitswap = bitswap;\n  }\n  open() {\n    return this.child.open();\n  }\n  close() {\n    return this.child.close();\n  }\n  unwrap() {\n    return this.child;\n  }\n  async put(cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return;\n    }\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options);\n    } else {\n      await this.child.put(cid, block, options);\n    }\n  }\n  async *putMany(blocks, options = {}) {\n    const missingBlocks = filter__default[\"default\"](blocks, async ({key}) => {\n      return !await this.has(key);\n    });\n    if (this.bitswap.isStarted()) {\n      yield* this.bitswap.putMany(missingBlocks, options);\n    } else {\n      yield* this.child.putMany(missingBlocks, options);\n    }\n  }\n  async get(cid, options = {}) {\n    if (!await this.has(cid) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options);\n    } else {\n      return this.child.get(cid, options);\n    }\n  }\n  async *getMany(cids, options = {}) {\n    const getFromBitswap = pushable__default[\"default\"]();\n    const getFromChild = pushable__default[\"default\"]();\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!await this.has(cid) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid);\n        } else {\n          getFromChild.push(cid);\n        }\n      }\n      getFromBitswap.end();\n      getFromChild.end();\n    });\n    yield* merge__default[\"default\"](this.bitswap.getMany(getFromBitswap, options), this.child.getMany(getFromChild, options));\n  }\n  async delete(cid, options) {\n    await this.child.delete(cid, options);\n  }\n  async *deleteMany(cids, options) {\n    yield* this.child.deleteMany(cids, options);\n  }\n  async has(cid, options = {}) {\n    return this.child.has(cid, options);\n  }\n  async *query(q, options = {}) {\n    yield* this.child.query(q, options);\n  }\n  async *queryKeys(q, options = {}) {\n    yield* this.child.queryKeys(q, options);\n  }\n}\n\nexports.BlockStorage = BlockStorage;\n"]},"metadata":{},"sourceType":"script"}