{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar key = require('interface-datastore/key');\n\nvar debug = require('debug');\n\nvar length = require('it-length');\n\nvar base32 = require('multiformats/bases/base32');\n\nvar raw = require('multiformats/codecs/raw');\n\nvar mhd = require('multiformats/hashes/digest');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nvar length__default = /*#__PURE__*/_interopDefaultLegacy(length);\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\n\nvar mhd__namespace = /*#__PURE__*/_interopNamespace(mhd);\n\nconst log = debug__default[\"default\"]('ipfs:repo:migrator:migration-8');\n\nfunction unwrap(blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child);\n  }\n\n  return blockstore;\n}\n\nfunction keyToMultihash(key$1) {\n  try {\n    const buf = base32.base32.decode(`b${key$1.toString().toLowerCase().slice(1)}`);\n    const multihash = cid.CID.decode(buf).multihash.bytes;\n    const multihashStr = base32.base32.encode(multihash).slice(1).toUpperCase();\n    return new key.Key(`/${multihashStr}`, false);\n  } catch (err) {\n    return key$1;\n  }\n}\n\nfunction keyToCid(key$1) {\n  try {\n    const buf = base32.base32.decode(`b${key$1.toString().toLowerCase().slice(1)}`);\n    const digest = mhd__namespace.decode(buf);\n    const multihash = base32.base32.encode(cid.CID.createV1(raw__namespace.code, digest).bytes).slice(1);\n    return new key.Key(`/${multihash.toUpperCase()}`, false);\n  } catch {\n    return key$1;\n  }\n}\n\nasync function process(backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks;\n  await blockstore.open();\n  const unwrapped = unwrap(blockstore);\n  const blockCount = await length__default[\"default\"](unwrapped.queryKeys({\n    filters: [key => {\n      const newKey = keyFunction(key);\n      return newKey.toString() !== key.toString();\n    }]\n  }));\n\n  try {\n    let counter = 0;\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key);\n\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1;\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key));\n        await unwrapped.delete(block.key);\n        await unwrapped.put(newKey, block.value);\n        onProgress(counter / blockCount * 100, `Migrated Block from ${block.key} to ${newKey}`);\n      }\n    }\n  } finally {\n    await blockstore.close();\n  }\n}\n\nconst migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keyToMultihash);\n  },\n  revert: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keyToCid);\n  }\n};\nexports.migration = migration;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo-migrations/cjs/migrations/migration-8/index.js"],"names":["Object","defineProperty","exports","value","cid","require","key","debug","length","base32","raw","mhd","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","debug__default","length__default","raw__namespace","mhd__namespace","log","unwrap","blockstore","child","keyToMultihash","key$1","buf","decode","toString","toLowerCase","slice","multihash","CID","bytes","multihashStr","encode","toUpperCase","Key","err","keyToCid","digest","createV1","code","process","backends","onProgress","keyFunction","blocks","open","unwrapped","blockCount","queryKeys","filters","newKey","counter","block","query","has","delete","put","close","migration","version","description","migrate","revert"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar key = require('interface-datastore/key');\nvar debug = require('debug');\nvar length = require('it-length');\nvar base32 = require('multiformats/bases/base32');\nvar raw = require('multiformats/codecs/raw');\nvar mhd = require('multiformats/hashes/digest');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\nvar length__default = /*#__PURE__*/_interopDefaultLegacy(length);\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\nvar mhd__namespace = /*#__PURE__*/_interopNamespace(mhd);\n\nconst log = debug__default[\"default\"]('ipfs:repo:migrator:migration-8');\nfunction unwrap(blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child);\n  }\n  return blockstore;\n}\nfunction keyToMultihash(key$1) {\n  try {\n    const buf = base32.base32.decode(`b${ key$1.toString().toLowerCase().slice(1) }`);\n    const multihash = cid.CID.decode(buf).multihash.bytes;\n    const multihashStr = base32.base32.encode(multihash).slice(1).toUpperCase();\n    return new key.Key(`/${ multihashStr }`, false);\n  } catch (err) {\n    return key$1;\n  }\n}\nfunction keyToCid(key$1) {\n  try {\n    const buf = base32.base32.decode(`b${ key$1.toString().toLowerCase().slice(1) }`);\n    const digest = mhd__namespace.decode(buf);\n    const multihash = base32.base32.encode(cid.CID.createV1(raw__namespace.code, digest).bytes).slice(1);\n    return new key.Key(`/${ multihash.toUpperCase() }`, false);\n  } catch {\n    return key$1;\n  }\n}\nasync function process(backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks;\n  await blockstore.open();\n  const unwrapped = unwrap(blockstore);\n  const blockCount = await length__default[\"default\"](unwrapped.queryKeys({\n    filters: [key => {\n        const newKey = keyFunction(key);\n        return newKey.toString() !== key.toString();\n      }]\n  }));\n  try {\n    let counter = 0;\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key);\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1;\n        log(`Migrating Block from ${ block.key } to ${ newKey }`, await unwrapped.has(block.key));\n        await unwrapped.delete(block.key);\n        await unwrapped.put(newKey, block.value);\n        onProgress(counter / blockCount * 100, `Migrated Block from ${ block.key } to ${ newKey }`);\n      }\n    }\n  } finally {\n    await blockstore.close();\n  }\n}\nconst migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, keyToMultihash);\n  },\n  revert: (backends, onProgress = () => {\n  }) => {\n    return process(backends, onProgress, keyToCid);\n  }\n};\n\nexports.migration = migration;\n"]},"metadata":{},"sourceType":"script"}