{"ast":null,"code":"'use strict';\n\nconst {\n  MESSAGE_TYPE_LOOKUP\n} = require('../message');\n/** @type {import('../types').MessageName[]} */\n\n\nconst MESSAGE_NAMES = ['PUT_VALUE', 'GET_VALUE', 'ADD_PROVIDER', 'GET_PROVIDERS', 'FIND_NODE', 'PING'];\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../types').QueryEvent} QueryEvent\n * @typedef {import('../types').PeerData} PeerData\n * @typedef {import('../message').Message} Message\n * @typedef {import('../message/dht').Message.MessageType} MessageType\n * @typedef {import('../types').DHTRecord} Record\n */\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.to\n * @param {number} fields.type\n * @returns {import('../types').SendingQueryEvent}\n */\n\nfunction sendingQueryEvent(fields) {\n  return { ...fields,\n    name: 'SENDING_QUERY',\n    type: 0,\n    // @ts-expect-error MESSAGE_TYPE_LOOKUP is string[]\n    messageName: MESSAGE_TYPE_LOOKUP[fields.type],\n    messageType: fields.type\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {MessageType} fields.messageType\n * @param {PeerData[]} [fields.closer]\n * @param {PeerData[]} [fields.providers]\n * @param {Record} [fields.record]\n * @returns {import('../types').PeerResponseEvent}\n */\n\n\nfunction peerResponseEvent(fields) {\n  return { ...fields,\n    name: 'PEER_RESPONSE',\n    type: 1,\n    messageName: MESSAGE_NAMES[fields.messageType],\n    closer: fields.closer ? fields.closer : [],\n    providers: fields.providers ? fields.providers : []\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {PeerData} fields.peer\n * @returns {import('../types').FinalPeerEvent}\n */\n\n\nfunction finalPeerEvent(fields) {\n  return { ...fields,\n    name: 'FINAL_PEER',\n    type: 2\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {Error} fields.error\n * @returns {import('../types').QueryErrorEvent}\n */\n\n\nfunction queryErrorEvent(fields) {\n  return { ...fields,\n    name: 'QUERY_ERROR',\n    type: 3\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {PeerData[]} fields.providers\n * @returns {import('../types').ProviderEvent}\n */\n\n\nfunction providerEvent(fields) {\n  return { ...fields,\n    name: 'PROVIDER',\n    type: 4\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {Uint8Array} fields.value\n * @returns {import('../types').ValueEvent}\n */\n\n\nfunction valueEvent(fields) {\n  return { ...fields,\n    name: 'VALUE',\n    type: 5\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.peer\n * @returns {import('../types').AddingPeerEvent}\n */\n\n\nfunction addingPeerEvent(fields) {\n  return { ...fields,\n    name: 'ADDING_PEER',\n    type: 6\n  };\n}\n/**\n * @param {object} fields\n * @param {PeerId} fields.peer\n * @returns {import('../types').DialingPeerEvent}\n */\n\n\nfunction dialingPeerEvent(fields) {\n  return { ...fields,\n    name: 'DIALING_PEER',\n    type: 7\n  };\n}\n\nmodule.exports = {\n  sendingQueryEvent,\n  peerResponseEvent,\n  finalPeerEvent,\n  queryErrorEvent,\n  providerEvent,\n  valueEvent,\n  addingPeerEvent,\n  dialingPeerEvent\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/query/events.js"],"names":["MESSAGE_TYPE_LOOKUP","require","MESSAGE_NAMES","sendingQueryEvent","fields","name","type","messageName","messageType","peerResponseEvent","closer","providers","finalPeerEvent","queryErrorEvent","providerEvent","valueEvent","addingPeerEvent","dialingPeerEvent","module","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA0BC,OAAO,CAAC,YAAD,CAAvC;AAEA;;;AACA,MAAMC,aAAa,GAAG,CACpB,WADoB,EAEpB,WAFoB,EAGpB,cAHoB,EAIpB,eAJoB,EAKpB,WALoB,EAMpB,MANoB,CAAtB;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA4BC,MAA5B,EAAoC;AAClC,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,eAFD;AAGLC,IAAAA,IAAI,EAAE,CAHD;AAIL;AACAC,IAAAA,WAAW,EAAEP,mBAAmB,CAACI,MAAM,CAACE,IAAR,CAL3B;AAMLE,IAAAA,WAAW,EAAEJ,MAAM,CAACE;AANf,GAAP;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,iBAAT,CAA4BL,MAA5B,EAAoC;AAClC,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,eAFD;AAGLC,IAAAA,IAAI,EAAE,CAHD;AAILC,IAAAA,WAAW,EAAEL,aAAa,CAACE,MAAM,CAACI,WAAR,CAJrB;AAKLE,IAAAA,MAAM,EAAEN,MAAM,CAACM,MAAP,GAAgBN,MAAM,CAACM,MAAvB,GAAgC,EALnC;AAMLC,IAAAA,SAAS,EAAEP,MAAM,CAACO,SAAP,GAAmBP,MAAM,CAACO,SAA1B,GAAsC;AAN5C,GAAP;AAQD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAyBR,MAAzB,EAAiC;AAC/B,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,YAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,eAAT,CAA0BT,MAA1B,EAAkC;AAChC,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,aAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,aAAT,CAAwBV,MAAxB,EAAgC;AAC9B,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,UAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,UAAT,CAAqBX,MAArB,EAA6B;AAC3B,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,OAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASU,eAAT,CAA0BZ,MAA1B,EAAkC;AAChC,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,aAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASW,gBAAT,CAA2Bb,MAA3B,EAAmC;AACjC,SAAO,EACL,GAAGA,MADE;AAELC,IAAAA,IAAI,EAAE,cAFD;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAAP;AAKD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,iBADe;AAEfM,EAAAA,iBAFe;AAGfG,EAAAA,cAHe;AAIfC,EAAAA,eAJe;AAKfC,EAAAA,aALe;AAMfC,EAAAA,UANe;AAOfC,EAAAA,eAPe;AAQfC,EAAAA;AARe,CAAjB","sourcesContent":["'use strict'\n\nconst { MESSAGE_TYPE_LOOKUP } = require('../message')\n\n/** @type {import('../types').MessageName[]} */\nconst MESSAGE_NAMES = [\n  'PUT_VALUE',\n  'GET_VALUE',\n  'ADD_PROVIDER',\n  'GET_PROVIDERS',\n  'FIND_NODE',\n  'PING'\n]\n\n/**\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('../types').QueryEvent} QueryEvent\n * @typedef {import('../types').PeerData} PeerData\n * @typedef {import('../message').Message} Message\n * @typedef {import('../message/dht').Message.MessageType} MessageType\n * @typedef {import('../types').DHTRecord} Record\n */\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.to\n * @param {number} fields.type\n * @returns {import('../types').SendingQueryEvent}\n */\nfunction sendingQueryEvent (fields) {\n  return {\n    ...fields,\n    name: 'SENDING_QUERY',\n    type: 0,\n    // @ts-expect-error MESSAGE_TYPE_LOOKUP is string[]\n    messageName: MESSAGE_TYPE_LOOKUP[fields.type],\n    messageType: fields.type\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {MessageType} fields.messageType\n * @param {PeerData[]} [fields.closer]\n * @param {PeerData[]} [fields.providers]\n * @param {Record} [fields.record]\n * @returns {import('../types').PeerResponseEvent}\n */\nfunction peerResponseEvent (fields) {\n  return {\n    ...fields,\n    name: 'PEER_RESPONSE',\n    type: 1,\n    messageName: MESSAGE_NAMES[fields.messageType],\n    closer: fields.closer ? fields.closer : [],\n    providers: fields.providers ? fields.providers : []\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {PeerData} fields.peer\n * @returns {import('../types').FinalPeerEvent}\n */\nfunction finalPeerEvent (fields) {\n  return {\n    ...fields,\n    name: 'FINAL_PEER',\n    type: 2\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {Error} fields.error\n * @returns {import('../types').QueryErrorEvent}\n */\nfunction queryErrorEvent (fields) {\n  return {\n    ...fields,\n    name: 'QUERY_ERROR',\n    type: 3\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {PeerData[]} fields.providers\n * @returns {import('../types').ProviderEvent}\n */\nfunction providerEvent (fields) {\n  return {\n    ...fields,\n    name: 'PROVIDER',\n    type: 4\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.from\n * @param {Uint8Array} fields.value\n * @returns {import('../types').ValueEvent}\n */\nfunction valueEvent (fields) {\n  return {\n    ...fields,\n    name: 'VALUE',\n    type: 5\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.peer\n * @returns {import('../types').AddingPeerEvent}\n */\nfunction addingPeerEvent (fields) {\n  return {\n    ...fields,\n    name: 'ADDING_PEER',\n    type: 6\n  }\n}\n\n/**\n * @param {object} fields\n * @param {PeerId} fields.peer\n * @returns {import('../types').DialingPeerEvent}\n */\nfunction dialingPeerEvent (fields) {\n  return {\n    ...fields,\n    name: 'DIALING_PEER',\n    type: 7\n  }\n}\n\nmodule.exports = {\n  sendingQueryEvent,\n  peerResponseEvent,\n  finalPeerEvent,\n  queryErrorEvent,\n  providerEvent,\n  valueEvent,\n  addingPeerEvent,\n  dialingPeerEvent\n}\n"]},"metadata":{},"sourceType":"script"}