{"ast":null,"code":"'use strict';\n\nconst utils = require('../utils');\n\nconst pMap = require('p-map');\n\nconst {\n  compare: uint8ArrayCompare\n} = require('uint8arrays/compare');\n\nconst {\n  xor: uint8ArrayXor\n} = require('uint8arrays/xor');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor(originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.peerDistances.length;\n  }\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n\n\n  get peers() {\n    return this.peerDistances.map(pd => pd.peerId);\n  }\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  async add(peerId) {\n    if (this.peerDistances.find(pd => pd.peerId.equals(peerId))) {\n      return;\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId);\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    };\n    this.peerDistances.push(el);\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));\n    this.peerDistances = this.peerDistances.slice(0, this.capacity);\n  }\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n\n\n  async anyCloser(peerIds) {\n    if (!peerIds.length) {\n      return false;\n    }\n\n    if (!this.length) {\n      return true;\n    }\n\n    const dhtKeys = await pMap(peerIds, peerId => utils.convertPeerId(peerId));\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = PeerDistanceList;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/peer-list/peer-distance-list.js"],"names":["utils","require","pMap","compare","uint8ArrayCompare","xor","uint8ArrayXor","PeerDistanceList","constructor","originDhtKey","capacity","peerDistances","length","peers","map","pd","peerId","add","find","equals","dhtKey","convertPeerId","el","distance","push","sort","a","b","slice","anyCloser","peerIds","dhtKeys","furthestDistance","keyDistance","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,OAAD,CAApB;;AACA,MAAM;AAAEE,EAAAA,OAAO,EAAEC;AAAX,IAAiCH,OAAO,CAAC,qBAAD,CAA9C;;AACA,MAAM;AAAEI,EAAAA,GAAG,EAAEC;AAAP,IAAyBL,OAAO,CAAC,iBAAD,CAAtC;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMM,gBAAN,CAAuB;AACrB;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,YAAF,EAAgBC,QAAhB,EAA0B;AACnC,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AAEA;;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;AAED;AACF;AACA;;;AACY,MAANC,MAAM,GAAI;AACZ,WAAO,KAAKD,aAAL,CAAmBC,MAA1B;AACD;AAED;AACF;AACA;;;AACW,MAALC,KAAK,GAAI;AACX,WAAO,KAAKF,aAAL,CAAmBG,GAAnB,CAAuBC,EAAE,IAAIA,EAAE,CAACC,MAAhC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACW,QAAHC,GAAG,CAAED,MAAF,EAAU;AACjB,QAAI,KAAKL,aAAL,CAAmBO,IAAnB,CAAwBH,EAAE,IAAIA,EAAE,CAACC,MAAH,CAAUG,MAAV,CAAiBH,MAAjB,CAA9B,CAAJ,EAA6D;AAC3D;AACD;;AAED,UAAMI,MAAM,GAAG,MAAMpB,KAAK,CAACqB,aAAN,CAAoBL,MAApB,CAArB;AACA,UAAMM,EAAE,GAAG;AACTN,MAAAA,MADS;AAETO,MAAAA,QAAQ,EAAEjB,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB;AAFd,KAAX;AAKA,SAAKT,aAAL,CAAmBa,IAAnB,CAAwBF,EAAxB;AACA,SAAKX,aAAL,CAAmBc,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUvB,iBAAiB,CAACsB,CAAC,CAACH,QAAH,EAAaI,CAAC,CAACJ,QAAf,CAAnD;AACA,SAAKZ,aAAL,GAAqB,KAAKA,aAAL,CAAmBiB,KAAnB,CAAyB,CAAzB,EAA4B,KAAKlB,QAAjC,CAArB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACiB,QAATmB,SAAS,CAAEC,OAAF,EAAW;AACxB,QAAI,CAACA,OAAO,CAAClB,MAAb,EAAqB;AACnB,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,KAAKA,MAAV,EAAkB;AAChB,aAAO,IAAP;AACD;;AAED,UAAMmB,OAAO,GAAG,MAAM7B,IAAI,CAAC4B,OAAD,EAAWd,MAAD,IAAYhB,KAAK,CAACqB,aAAN,CAAoBL,MAApB,CAAtB,CAA1B;AACA,UAAMgB,gBAAgB,GAAG,KAAKrB,aAAL,CAAmB,KAAKA,aAAL,CAAmBC,MAAnB,GAA4B,CAA/C,EAAkDW,QAA3E;;AAEA,SAAK,MAAMH,MAAX,IAAqBW,OAArB,EAA8B;AAC5B,YAAME,WAAW,GAAG3B,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB,CAAjC;;AAEA,UAAIhB,iBAAiB,CAAC6B,WAAD,EAAcD,gBAAd,CAAjB,GAAmD,CAAvD,EAA0D;AACxD,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AA7EoB;;AAgFvBE,MAAM,CAACC,OAAP,GAAiB5B,gBAAjB","sourcesContent":["'use strict'\n\nconst utils = require('../utils')\nconst pMap = require('p-map')\nconst { compare: uint8ArrayCompare } = require('uint8arrays/compare')\nconst { xor: uint8ArrayXor } = require('uint8arrays/xor')\n\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nclass PeerDistanceList {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Uint8Array} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  constructor (originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n\n    /** @type {{ peerId: PeerId, distance: Uint8Array }[]} */\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length () {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers () {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   *\n   * @param {PeerId} peerId\n   */\n  async add (peerId) {\n    if (this.peerDistances.find(pd => pd.peerId.equals(peerId))) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   *\n   * @param {PeerId[]} peerIds\n   */\n  async anyCloser (peerIds) {\n    if (!peerIds.length) {\n      return false\n    }\n\n    if (!this.length) {\n      return true\n    }\n\n    const dhtKeys = await pMap(peerIds, (peerId) => utils.convertPeerId(peerId))\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey)\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = PeerDistanceList\n"]},"metadata":{},"sourceType":"script"}