{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-fetch\"] || ($protobuf.roots[\"libp2p-fetch\"] = {});\n\n$root.FetchRequest = function () {\n  /**\n   * Properties of a FetchRequest.\n   * @exports IFetchRequest\n   * @interface IFetchRequest\n   * @property {string|null} [identifier] FetchRequest identifier\n   */\n\n  /**\n   * Constructs a new FetchRequest.\n   * @exports FetchRequest\n   * @classdesc Represents a FetchRequest.\n   * @implements IFetchRequest\n   * @constructor\n   * @param {IFetchRequest=} [p] Properties to set\n   */\n  function FetchRequest(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * FetchRequest identifier.\n   * @member {string} identifier\n   * @memberof FetchRequest\n   * @instance\n   */\n\n\n  FetchRequest.prototype.identifier = \"\";\n  /**\n   * Encodes the specified FetchRequest message. Does not implicitly {@link FetchRequest.verify|verify} messages.\n   * @function encode\n   * @memberof FetchRequest\n   * @static\n   * @param {IFetchRequest} m FetchRequest message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  FetchRequest.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.identifier != null && Object.hasOwnProperty.call(m, \"identifier\")) w.uint32(10).string(m.identifier);\n    return w;\n  };\n  /**\n   * Decodes a FetchRequest message from the specified reader or buffer.\n   * @function decode\n   * @memberof FetchRequest\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {FetchRequest} FetchRequest\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FetchRequest.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.FetchRequest();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.identifier = r.string();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a FetchRequest message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FetchRequest\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {FetchRequest} FetchRequest\n   */\n\n\n  FetchRequest.fromObject = function fromObject(d) {\n    if (d instanceof $root.FetchRequest) return d;\n    var m = new $root.FetchRequest();\n\n    if (d.identifier != null) {\n      m.identifier = String(d.identifier);\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a FetchRequest message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FetchRequest\n   * @static\n   * @param {FetchRequest} m FetchRequest\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  FetchRequest.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.identifier = \"\";\n    }\n\n    if (m.identifier != null && m.hasOwnProperty(\"identifier\")) {\n      d.identifier = m.identifier;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this FetchRequest to JSON.\n   * @function toJSON\n   * @memberof FetchRequest\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  FetchRequest.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return FetchRequest;\n}();\n\n$root.FetchResponse = function () {\n  /**\n   * Properties of a FetchResponse.\n   * @exports IFetchResponse\n   * @interface IFetchResponse\n   * @property {FetchResponse.StatusCode|null} [status] FetchResponse status\n   * @property {Uint8Array|null} [data] FetchResponse data\n   */\n\n  /**\n   * Constructs a new FetchResponse.\n   * @exports FetchResponse\n   * @classdesc Represents a FetchResponse.\n   * @implements IFetchResponse\n   * @constructor\n   * @param {IFetchResponse=} [p] Properties to set\n   */\n  function FetchResponse(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * FetchResponse status.\n   * @member {FetchResponse.StatusCode} status\n   * @memberof FetchResponse\n   * @instance\n   */\n\n\n  FetchResponse.prototype.status = 0;\n  /**\n   * FetchResponse data.\n   * @member {Uint8Array} data\n   * @memberof FetchResponse\n   * @instance\n   */\n\n  FetchResponse.prototype.data = $util.newBuffer([]);\n  /**\n   * Encodes the specified FetchResponse message. Does not implicitly {@link FetchResponse.verify|verify} messages.\n   * @function encode\n   * @memberof FetchResponse\n   * @static\n   * @param {IFetchResponse} m FetchResponse message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  FetchResponse.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.status != null && Object.hasOwnProperty.call(m, \"status\")) w.uint32(8).int32(m.status);\n    if (m.data != null && Object.hasOwnProperty.call(m, \"data\")) w.uint32(18).bytes(m.data);\n    return w;\n  };\n  /**\n   * Decodes a FetchResponse message from the specified reader or buffer.\n   * @function decode\n   * @memberof FetchResponse\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {FetchResponse} FetchResponse\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FetchResponse.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.FetchResponse();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.status = r.int32();\n          break;\n\n        case 2:\n          m.data = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n  /**\n   * Creates a FetchResponse message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FetchResponse\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {FetchResponse} FetchResponse\n   */\n\n\n  FetchResponse.fromObject = function fromObject(d) {\n    if (d instanceof $root.FetchResponse) return d;\n    var m = new $root.FetchResponse();\n\n    switch (d.status) {\n      case \"OK\":\n      case 0:\n        m.status = 0;\n        break;\n\n      case \"NOT_FOUND\":\n      case 1:\n        m.status = 1;\n        break;\n\n      case \"ERROR\":\n      case 2:\n        m.status = 2;\n        break;\n    }\n\n    if (d.data != null) {\n      if (typeof d.data === \"string\") $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);else if (d.data.length) m.data = d.data;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a FetchResponse message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FetchResponse\n   * @static\n   * @param {FetchResponse} m FetchResponse\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  FetchResponse.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.status = o.enums === String ? \"OK\" : 0;\n      if (o.bytes === String) d.data = \"\";else {\n        d.data = [];\n        if (o.bytes !== Array) d.data = $util.newBuffer(d.data);\n      }\n    }\n\n    if (m.status != null && m.hasOwnProperty(\"status\")) {\n      d.status = o.enums === String ? $root.FetchResponse.StatusCode[m.status] : m.status;\n    }\n\n    if (m.data != null && m.hasOwnProperty(\"data\")) {\n      d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this FetchResponse to JSON.\n   * @function toJSON\n   * @memberof FetchResponse\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  FetchResponse.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  /**\n   * StatusCode enum.\n   * @name FetchResponse.StatusCode\n   * @enum {number}\n   * @property {number} OK=0 OK value\n   * @property {number} NOT_FOUND=1 NOT_FOUND value\n   * @property {number} ERROR=2 ERROR value\n   */\n\n\n  FetchResponse.StatusCode = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[0] = \"OK\"] = 0;\n    values[valuesById[1] = \"NOT_FOUND\"] = 1;\n    values[valuesById[2] = \"ERROR\"] = 2;\n    return values;\n  }();\n\n  return FetchResponse;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p/src/fetch/proto.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","FetchRequest","p","ks","Object","keys","i","length","prototype","identifier","encode","m","w","create","hasOwnProperty","call","uint32","string","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","String","toObject","o","defaults","toJSON","constructor","toJSONOptions","FetchResponse","status","data","newBuffer","int32","bytes","base64","enums","Array","StatusCode","slice","valuesById","values","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"libp2p-fetch\"] || ($protobuf.roots[\"libp2p-fetch\"] = {});\n\n$root.FetchRequest = (function() {\n\n    /**\n     * Properties of a FetchRequest.\n     * @exports IFetchRequest\n     * @interface IFetchRequest\n     * @property {string|null} [identifier] FetchRequest identifier\n     */\n\n    /**\n     * Constructs a new FetchRequest.\n     * @exports FetchRequest\n     * @classdesc Represents a FetchRequest.\n     * @implements IFetchRequest\n     * @constructor\n     * @param {IFetchRequest=} [p] Properties to set\n     */\n    function FetchRequest(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * FetchRequest identifier.\n     * @member {string} identifier\n     * @memberof FetchRequest\n     * @instance\n     */\n    FetchRequest.prototype.identifier = \"\";\n\n    /**\n     * Encodes the specified FetchRequest message. Does not implicitly {@link FetchRequest.verify|verify} messages.\n     * @function encode\n     * @memberof FetchRequest\n     * @static\n     * @param {IFetchRequest} m FetchRequest message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FetchRequest.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.identifier != null && Object.hasOwnProperty.call(m, \"identifier\"))\n            w.uint32(10).string(m.identifier);\n        return w;\n    };\n\n    /**\n     * Decodes a FetchRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof FetchRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {FetchRequest} FetchRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FetchRequest.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.FetchRequest();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.identifier = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a FetchRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FetchRequest\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {FetchRequest} FetchRequest\n     */\n    FetchRequest.fromObject = function fromObject(d) {\n        if (d instanceof $root.FetchRequest)\n            return d;\n        var m = new $root.FetchRequest();\n        if (d.identifier != null) {\n            m.identifier = String(d.identifier);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a FetchRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FetchRequest\n     * @static\n     * @param {FetchRequest} m FetchRequest\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FetchRequest.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.identifier = \"\";\n        }\n        if (m.identifier != null && m.hasOwnProperty(\"identifier\")) {\n            d.identifier = m.identifier;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this FetchRequest to JSON.\n     * @function toJSON\n     * @memberof FetchRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FetchRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FetchRequest;\n})();\n\n$root.FetchResponse = (function() {\n\n    /**\n     * Properties of a FetchResponse.\n     * @exports IFetchResponse\n     * @interface IFetchResponse\n     * @property {FetchResponse.StatusCode|null} [status] FetchResponse status\n     * @property {Uint8Array|null} [data] FetchResponse data\n     */\n\n    /**\n     * Constructs a new FetchResponse.\n     * @exports FetchResponse\n     * @classdesc Represents a FetchResponse.\n     * @implements IFetchResponse\n     * @constructor\n     * @param {IFetchResponse=} [p] Properties to set\n     */\n    function FetchResponse(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * FetchResponse status.\n     * @member {FetchResponse.StatusCode} status\n     * @memberof FetchResponse\n     * @instance\n     */\n    FetchResponse.prototype.status = 0;\n\n    /**\n     * FetchResponse data.\n     * @member {Uint8Array} data\n     * @memberof FetchResponse\n     * @instance\n     */\n    FetchResponse.prototype.data = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified FetchResponse message. Does not implicitly {@link FetchResponse.verify|verify} messages.\n     * @function encode\n     * @memberof FetchResponse\n     * @static\n     * @param {IFetchResponse} m FetchResponse message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FetchResponse.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.status != null && Object.hasOwnProperty.call(m, \"status\"))\n            w.uint32(8).int32(m.status);\n        if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n            w.uint32(18).bytes(m.data);\n        return w;\n    };\n\n    /**\n     * Decodes a FetchResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof FetchResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {FetchResponse} FetchResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FetchResponse.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.FetchResponse();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.status = r.int32();\n                break;\n            case 2:\n                m.data = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a FetchResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FetchResponse\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {FetchResponse} FetchResponse\n     */\n    FetchResponse.fromObject = function fromObject(d) {\n        if (d instanceof $root.FetchResponse)\n            return d;\n        var m = new $root.FetchResponse();\n        switch (d.status) {\n        case \"OK\":\n        case 0:\n            m.status = 0;\n            break;\n        case \"NOT_FOUND\":\n        case 1:\n            m.status = 1;\n            break;\n        case \"ERROR\":\n        case 2:\n            m.status = 2;\n            break;\n        }\n        if (d.data != null) {\n            if (typeof d.data === \"string\")\n                $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n            else if (d.data.length)\n                m.data = d.data;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a FetchResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FetchResponse\n     * @static\n     * @param {FetchResponse} m FetchResponse\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FetchResponse.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.status = o.enums === String ? \"OK\" : 0;\n            if (o.bytes === String)\n                d.data = \"\";\n            else {\n                d.data = [];\n                if (o.bytes !== Array)\n                    d.data = $util.newBuffer(d.data);\n            }\n        }\n        if (m.status != null && m.hasOwnProperty(\"status\")) {\n            d.status = o.enums === String ? $root.FetchResponse.StatusCode[m.status] : m.status;\n        }\n        if (m.data != null && m.hasOwnProperty(\"data\")) {\n            d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this FetchResponse to JSON.\n     * @function toJSON\n     * @memberof FetchResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FetchResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * StatusCode enum.\n     * @name FetchResponse.StatusCode\n     * @enum {number}\n     * @property {number} OK=0 OK value\n     * @property {number} NOT_FOUND=1 NOT_FOUND value\n     * @property {number} ERROR=2 ERROR value\n     */\n    FetchResponse.StatusCode = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"OK\"] = 0;\n        values[valuesById[1] = \"NOT_FOUND\"] = 1;\n        values[valuesById[2] = \"ERROR\"] = 2;\n        return values;\n    })();\n\n    return FetchResponse;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}