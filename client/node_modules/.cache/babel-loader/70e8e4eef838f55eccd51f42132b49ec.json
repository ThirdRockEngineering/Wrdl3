{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('./utils.js');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createAdd(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  async function add(multiaddr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!utils.isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n\n    const config = await repo.config.getAll(options);\n    const boostrappers = config.Bootstrap || [];\n    boostrappers.push(multiaddr.toString());\n    config.Bootstrap = Array.from(new Set(boostrappers)).sort((a, b) => a.localeCompare(b));\n    await repo.config.replace(config);\n    return {\n      Peers: [multiaddr]\n    };\n  }\n\n  return withTimeoutOption.withTimeoutOption(add);\n}\n\nexports.createAdd = createAdd;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/bootstrap/add.js"],"names":["Object","defineProperty","exports","value","utils","require","withTimeoutOption","createAdd","repo","add","multiaddr","options","isValidMultiaddr","Error","config","getAll","boostrappers","Bootstrap","push","toString","Array","from","Set","sort","a","b","localeCompare","replace","Peers"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASE,SAAT,OAA2B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;;AACzB,iBAAeC,GAAf,CAAmBC,SAAnB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC1C,QAAI,CAACP,KAAK,CAACQ,gBAAN,CAAuBF,SAAvB,CAAL,EAAwC;AACtC,YAAM,IAAIG,KAAJ,CAAW,GAAGH,SAAW,2BAAzB,CAAN;AACD;;AACD,UAAMI,MAAM,GAAG,MAAMN,IAAI,CAACM,MAAL,CAAYC,MAAZ,CAAmBJ,OAAnB,CAArB;AACA,UAAMK,YAAY,GAAGF,MAAM,CAACG,SAAP,IAAoB,EAAzC;AACAD,IAAAA,YAAY,CAACE,IAAb,CAAkBR,SAAS,CAACS,QAAV,EAAlB;AACAL,IAAAA,MAAM,CAACG,SAAP,GAAmBG,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQN,YAAR,CAAX,EAAkCO,IAAlC,CAAuC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAAjD,CAAnB;AACA,UAAMjB,IAAI,CAACM,MAAL,CAAYa,OAAZ,CAAoBb,MAApB,CAAN;AACA,WAAO;AAAEc,MAAAA,KAAK,EAAE,CAAClB,SAAD;AAAT,KAAP;AACD;;AACD,SAAOJ,iBAAiB,CAACA,iBAAlB,CAAoCG,GAApC,CAAP;AACD;;AAEDP,OAAO,CAACK,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('./utils.js');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createAdd({repo}) {\n  async function add(multiaddr, options = {}) {\n    if (!utils.isValidMultiaddr(multiaddr)) {\n      throw new Error(`${ multiaddr } is not a valid Multiaddr`);\n    }\n    const config = await repo.config.getAll(options);\n    const boostrappers = config.Bootstrap || [];\n    boostrappers.push(multiaddr.toString());\n    config.Bootstrap = Array.from(new Set(boostrappers)).sort((a, b) => a.localeCompare(b));\n    await repo.config.replace(config);\n    return { Peers: [multiaddr] };\n  }\n  return withTimeoutOption.withTimeoutOption(add);\n}\n\nexports.createAdd = createAdd;\n"]},"metadata":{},"sourceType":"script"}