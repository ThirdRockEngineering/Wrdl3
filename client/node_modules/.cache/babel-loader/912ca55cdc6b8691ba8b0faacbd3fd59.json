{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPut(_ref) {\n  let {\n    repo,\n    codecs,\n    hashers,\n    preload\n  } = _ref;\n\n  async function put(dagNode) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor');\n\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`);\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n\n        const inputCodec = await codecs.getCodec(options.inputCodec);\n\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`);\n        }\n\n        dagNode = inputCodec.decode(dagNode);\n      }\n\n      const cidVersion = options.version != null ? options.version : 1;\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`);\n      }\n\n      const buf = storeCodec.encode(dagNode);\n      const hash = await hasher.digest(buf);\n      const cid$1 = cid.CID.create(cidVersion, storeCodec.code, hash);\n      await repo.blocks.put(cid$1, buf, {\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid$1);\n      }\n\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n\n      return cid$1;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/dag/put.js"],"names":["Object","defineProperty","exports","value","cid","require","withTimeoutOption","createPut","repo","codecs","hashers","preload","put","dagNode","options","release","pin","gcLock","readLock","storeCodec","getCodec","Error","inputCodec","Uint8Array","decode","cidVersion","version","hasher","getHasher","hashAlg","buf","encode","hash","digest","cid$1","CID","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASE,SAAT,OAAqD;AAAA,MAAlC;AAACC,IAAAA,IAAD;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA;AAAxB,GAAkC;;AACnD,iBAAeC,GAAf,CAAmBC,OAAnB,EAA0C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACxC,UAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,GAAc,MAAMR,IAAI,CAACS,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AACA,QAAI;AACF,YAAMC,UAAU,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBN,OAAO,CAACK,UAAR,IAAsB,UAAtC,CAAzB;;AACA,UAAI,CAACA,UAAL,EAAiB;AACf,cAAM,IAAIE,KAAJ,CAAW,sBAAsBP,OAAO,CAACK,UAAY,kEAArD,CAAN;AACD;;AACD,UAAIL,OAAO,CAACQ,UAAZ,EAAwB;AACtB,YAAI,EAAET,OAAO,YAAYU,UAArB,CAAJ,EAAsC;AACpC,gBAAM,IAAIF,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,cAAMC,UAAU,GAAG,MAAMb,MAAM,CAACW,QAAP,CAAgBN,OAAO,CAACQ,UAAxB,CAAzB;;AACA,YAAI,CAACA,UAAL,EAAiB;AACf,gBAAM,IAAID,KAAJ,CAAW,sBAAsBP,OAAO,CAACQ,UAAY,kEAArD,CAAN;AACD;;AACDT,QAAAA,OAAO,GAAGS,UAAU,CAACE,MAAX,CAAkBX,OAAlB,CAAV;AACD;;AACD,YAAMY,UAAU,GAAGX,OAAO,CAACY,OAAR,IAAmB,IAAnB,GAA0BZ,OAAO,CAACY,OAAlC,GAA4C,CAA/D;AACA,YAAMC,MAAM,GAAG,MAAMjB,OAAO,CAACkB,SAAR,CAAkBd,OAAO,CAACe,OAAR,IAAmB,UAArC,CAArB;;AACA,UAAI,CAACF,MAAL,EAAa;AACX,cAAM,IAAIN,KAAJ,CAAW,0BAA0BP,OAAO,CAACe,OAAS,uEAAtD,CAAN;AACD;;AACD,YAAMC,GAAG,GAAGX,UAAU,CAACY,MAAX,CAAkBlB,OAAlB,CAAZ;AACA,YAAMmB,IAAI,GAAG,MAAML,MAAM,CAACM,MAAP,CAAcH,GAAd,CAAnB;AACA,YAAMI,KAAK,GAAG9B,GAAG,CAAC+B,GAAJ,CAAQC,MAAR,CAAeX,UAAf,EAA2BN,UAAU,CAACkB,IAAtC,EAA4CL,IAA5C,CAAd;AACA,YAAMxB,IAAI,CAAC8B,MAAL,CAAY1B,GAAZ,CAAgBsB,KAAhB,EAAuBJ,GAAvB,EAA4B;AAAES,QAAAA,MAAM,EAAEzB,OAAO,CAACyB;AAAlB,OAA5B,CAAN;;AACA,UAAIzB,OAAO,CAACE,GAAZ,EAAiB;AACf,cAAMR,IAAI,CAACgC,IAAL,CAAUC,cAAV,CAAyBP,KAAzB,CAAN;AACD;;AACD,UAAIpB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACuB,KAAD,CAAP;AACD;;AACD,aAAOA,KAAP;AACD,KA/BD,SA+BU;AACR,UAAInB,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;AACF;AACF;;AACD,SAAOT,iBAAiB,CAACA,iBAAlB,CAAoCM,GAApC,CAAP;AACD;;AAEDV,OAAO,CAACK,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('multiformats/cid');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction createPut({repo, codecs, hashers, preload}) {\n  async function put(dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor');\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${ options.storeCodec }, please configure additional BlockCodecs for this IPFS instance`);\n      }\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec);\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${ options.inputCodec }, please configure additional BlockCodecs for this IPFS instance`);\n        }\n        dagNode = inputCodec.decode(dagNode);\n      }\n      const cidVersion = options.version != null ? options.version : 1;\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${ options.hashAlg }, please configure additional MultihashHashers for this IPFS instance`);\n      }\n      const buf = storeCodec.encode(dagNode);\n      const hash = await hasher.digest(buf);\n      const cid$1 = cid.CID.create(cidVersion, storeCodec.code, hash);\n      await repo.blocks.put(cid$1, buf, { signal: options.signal });\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid$1);\n      }\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n      return cid$1;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;\n"]},"metadata":{},"sourceType":"script"}