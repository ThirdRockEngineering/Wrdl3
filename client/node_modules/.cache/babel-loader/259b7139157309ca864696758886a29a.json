{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar key = require('interface-datastore/key');\n\nvar debug = require('debug');\n\nvar toString = require('uint8arrays/to-string');\n\nvar fromString = require('uint8arrays/from-string');\n\nvar level = require('./utils/level.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:repo:version');\nconst versionKey = new key.Key('version');\n\nfunction version(store) {\n  return {\n    async exists() {\n      return level.hasWithFallback(versionKey, store.has.bind(store), store);\n    },\n\n    async get() {\n      const buf = await level.getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n      return parseInt(toString.toString(buf), 10);\n    },\n\n    set(version) {\n      return store.put(versionKey, fromString.fromString(String(version)));\n    },\n\n    async check(expected) {\n      const version = await this.get();\n      log('comparing version: %s and %s', version, expected);\n      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n      return version === expected || compatibleVersion;\n    }\n\n  };\n}\n\nexports.version = version;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo/cjs/src/version.js"],"names":["Object","defineProperty","exports","value","key","require","debug","toString","fromString","level","_interopDefaultLegacy","e","debug__default","log","versionKey","Key","version","store","exists","hasWithFallback","has","bind","get","buf","getWithFallback","parseInt","set","put","String","check","expected","compatibleVersion"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAjB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,uBAAD,CAAtB;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,yBAAD,CAAxB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,kBAAD,CAAnB;;AAEA,SAASK,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,cAAc,GAAG,aAAaF,qBAAqB,CAACJ,KAAD,CAAvD;;AAEA,MAAMO,GAAG,GAAGD,cAAc,CAAC,SAAD,CAAd,CAA0B,mBAA1B,CAAZ;AACA,MAAME,UAAU,GAAG,IAAIV,GAAG,CAACW,GAAR,CAAY,SAAZ,CAAnB;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAO;AACL,UAAMC,MAAN,GAAe;AACb,aAAOT,KAAK,CAACU,eAAN,CAAsBL,UAAtB,EAAkCG,KAAK,CAACG,GAAN,CAAUC,IAAV,CAAeJ,KAAf,CAAlC,EAAyDA,KAAzD,CAAP;AACD,KAHI;;AAIL,UAAMK,GAAN,GAAY;AACV,YAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,eAAN,CAAsBV,UAAtB,EAAkCG,KAAK,CAACK,GAAN,CAAUD,IAAV,CAAeJ,KAAf,CAAlC,EAAyDA,KAAK,CAACG,GAAN,CAAUC,IAAV,CAAeJ,KAAf,CAAzD,EAAgFA,KAAhF,CAAlB;AACA,aAAOQ,QAAQ,CAAClB,QAAQ,CAACA,QAAT,CAAkBgB,GAAlB,CAAD,EAAyB,EAAzB,CAAf;AACD,KAPI;;AAQLG,IAAAA,GAAG,CAACV,OAAD,EAAU;AACX,aAAOC,KAAK,CAACU,GAAN,CAAUb,UAAV,EAAsBN,UAAU,CAACA,UAAX,CAAsBoB,MAAM,CAACZ,OAAD,CAA5B,CAAtB,CAAP;AACD,KAVI;;AAWL,UAAMa,KAAN,CAAYC,QAAZ,EAAsB;AACpB,YAAMd,OAAO,GAAG,MAAM,KAAKM,GAAL,EAAtB;AACAT,MAAAA,GAAG,CAAC,8BAAD,EAAiCG,OAAjC,EAA0Cc,QAA1C,CAAH;AACA,YAAMC,iBAAiB,GAAGf,OAAO,KAAK,CAAZ,IAAiBc,QAAQ,KAAK,CAA9B,IAAmCA,QAAQ,KAAK,CAAb,IAAkBd,OAAO,KAAK,CAA3F;AACA,aAAOA,OAAO,KAAKc,QAAZ,IAAwBC,iBAA/B;AACD;;AAhBI,GAAP;AAkBD;;AAED7B,OAAO,CAACc,OAAR,GAAkBA,OAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar key = require('interface-datastore/key');\nvar debug = require('debug');\nvar toString = require('uint8arrays/to-string');\nvar fromString = require('uint8arrays/from-string');\nvar level = require('./utils/level.js');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:repo:version');\nconst versionKey = new key.Key('version');\nfunction version(store) {\n  return {\n    async exists() {\n      return level.hasWithFallback(versionKey, store.has.bind(store), store);\n    },\n    async get() {\n      const buf = await level.getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n      return parseInt(toString.toString(buf), 10);\n    },\n    set(version) {\n      return store.put(versionKey, fromString.fromString(String(version)));\n    },\n    async check(expected) {\n      const version = await this.get();\n      log('comparing version: %s and %s', version, expected);\n      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n      return version === expected || compatibleVersion;\n    }\n  };\n}\n\nexports.version = version;\n"]},"metadata":{},"sourceType":"script"}