{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar cid = require('multiformats/cid');\n\nvar sha2 = require('multiformats/hashes/sha2');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nfunction createPut(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  async function put(obj) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = await repo.gcLock.readLock();\n\n    try {\n      const buf = dagPB__namespace.encode(obj);\n      const hash = await sha2.sha256.digest(buf);\n      const cid$1 = cid.CID.createV1(dagPB__namespace.code, hash);\n      await repo.blocks.put(cid$1, buf, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid$1, {\n          signal: options.signal\n        });\n      }\n\n      return cid$1;\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/object/put.js"],"names":["Object","defineProperty","exports","value","dagPB","require","cid","sha2","withTimeoutOption","_interopNamespace","e","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","dagPB__namespace","createPut","repo","preload","put","obj","options","release","gcLock","readLock","buf","encode","hash","sha256","digest","cid$1","CID","createV1","code","blocks","signal","pin","pins","pinRecursively"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,cAAD,CAAnB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,kBAAD,CAAjB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,0BAAD,CAAlB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASI,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACC,UAAX,EAAuB,OAAOD,CAAP;AACvB,MAAIE,CAAC,GAAGZ,MAAM,CAACa,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIH,CAAJ,EAAO;AACLV,IAAAA,MAAM,CAACc,IAAP,CAAYJ,CAAZ,EAAeK,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGjB,MAAM,CAACkB,wBAAP,CAAgCR,CAAhC,EAAmCM,CAAnC,CAAR;AACAhB,QAAAA,MAAM,CAACC,cAAP,CAAsBW,CAAtB,EAAyBI,CAAzB,EAA4BC,CAAC,CAACE,GAAF,GAAQF,CAAR,GAAY;AACtCG,UAAAA,UAAU,EAAE,IAD0B;AAEtCD,UAAAA,GAAG,EAAE,YAAY;AAAE,mBAAOT,CAAC,CAACM,CAAD,CAAR;AAAc;AAFK,SAAxC;AAID;AACF,KARD;AASD;;AACDJ,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeF,CAAf;AACA,SAAOV,MAAM,CAACqB,MAAP,CAAcT,CAAd,CAAP;AACD;;AAED,IAAIU,gBAAgB,GAAG,aAAab,iBAAiB,CAACL,KAAD,CAArD;;AAEA,SAASmB,SAAT,OAAoC;AAAA,MAAjB;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAiB;;AAClC,iBAAeC,GAAf,CAAmBC,GAAnB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpC,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAtB;;AACA,QAAI;AACF,YAAMC,GAAG,GAAGV,gBAAgB,CAACW,MAAjB,CAAwBN,GAAxB,CAAZ;AACA,YAAMO,IAAI,GAAG,MAAM3B,IAAI,CAAC4B,MAAL,CAAYC,MAAZ,CAAmBJ,GAAnB,CAAnB;AACA,YAAMK,KAAK,GAAG/B,GAAG,CAACgC,GAAJ,CAAQC,QAAR,CAAiBjB,gBAAgB,CAACkB,IAAlC,EAAwCN,IAAxC,CAAd;AACA,YAAMV,IAAI,CAACiB,MAAL,CAAYf,GAAZ,CAAgBW,KAAhB,EAAuBL,GAAvB,EAA4B;AAAEU,QAAAA,MAAM,EAAEd,OAAO,CAACc;AAAlB,OAA5B,CAAN;;AACA,UAAId,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACY,KAAD,CAAP;AACD;;AACD,UAAIT,OAAO,CAACe,GAAZ,EAAiB;AACf,cAAMnB,IAAI,CAACoB,IAAL,CAAUC,cAAV,CAAyBR,KAAzB,EAAgC;AAAEK,UAAAA,MAAM,EAAEd,OAAO,CAACc;AAAlB,SAAhC,CAAN;AACD;;AACD,aAAOL,KAAP;AACD,KAZD,SAYU;AACRR,MAAAA,OAAO;AACR;AACF;;AACD,SAAOrB,iBAAiB,CAACA,iBAAlB,CAAoCkB,GAApC,CAAP;AACD;;AAEDxB,OAAO,CAACqB,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar dagPB = require('@ipld/dag-pb');\nvar cid = require('multiformats/cid');\nvar sha2 = require('multiformats/hashes/sha2');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace = /*#__PURE__*/_interopNamespace(dagPB);\n\nfunction createPut({repo, preload}) {\n  async function put(obj, options = {}) {\n    const release = await repo.gcLock.readLock();\n    try {\n      const buf = dagPB__namespace.encode(obj);\n      const hash = await sha2.sha256.digest(buf);\n      const cid$1 = cid.CID.createV1(dagPB__namespace.code, hash);\n      await repo.blocks.put(cid$1, buf, { signal: options.signal });\n      if (options.preload !== false) {\n        preload(cid$1);\n      }\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid$1, { signal: options.signal });\n      }\n      return cid$1;\n    } finally {\n      release();\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(put);\n}\n\nexports.createPut = createPut;\n"]},"metadata":{},"sourceType":"script"}