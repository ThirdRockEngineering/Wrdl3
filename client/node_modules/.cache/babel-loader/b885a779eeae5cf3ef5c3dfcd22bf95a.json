{"ast":null,"code":"'use strict';\n\nconst {\n  Message\n} = require('../../message');\n\nconst {\n  AddProviderHandler\n} = require('./add-provider');\n\nconst {\n  FindNodeHandler\n} = require('./find-node');\n\nconst {\n  GetProvidersHandler\n} = require('./get-providers');\n\nconst {\n  GetValueHandler\n} = require('./get-value');\n\nconst {\n  PingHandler\n} = require('./ping');\n\nconst {\n  PutValueHandler\n} = require('./put-value');\n/**\n * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler\n */\n\n/**\n * @param {object} params\n * @param {import('peer-id')} params.peerId\n * @param {import('../../providers').Providers} params.providers\n * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore\n * @param {import('../../types').Addressable} params.addressable\n * @param {import('../../peer-routing').PeerRouting} params.peerRouting\n * @param {import('interface-datastore').Datastore} params.records\n * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators\n * @param {boolean} [params.lan]\n */\n\n\nmodule.exports = _ref => {\n  let {\n    peerId,\n    providers,\n    peerStore,\n    addressable,\n    peerRouting,\n    records,\n    validators,\n    lan\n  } = _ref;\n\n  /** @type {Record<number, DHTMessageHandler>} */\n  const handlers = {\n    [Message.TYPES.GET_VALUE]: new GetValueHandler({\n      peerId,\n      peerStore,\n      peerRouting,\n      records\n    }),\n    [Message.TYPES.PUT_VALUE]: new PutValueHandler({\n      validators,\n      records\n    }),\n    [Message.TYPES.FIND_NODE]: new FindNodeHandler({\n      peerId,\n      addressable,\n      peerRouting,\n      lan\n    }),\n    [Message.TYPES.ADD_PROVIDER]: new AddProviderHandler({\n      peerId,\n      providers,\n      peerStore\n    }),\n    [Message.TYPES.GET_PROVIDERS]: new GetProvidersHandler({\n      peerId,\n      peerRouting,\n      providers,\n      peerStore,\n      addressable,\n      lan\n    }),\n    [Message.TYPES.PING]: new PingHandler()\n  };\n  /**\n   * Get the message handler matching the passed in type.\n   *\n   * @param {number} type\n   */\n\n  function getMessageHandler(type) {\n    return handlers[type];\n  }\n\n  return getMessageHandler;\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/rpc/handlers/index.js"],"names":["Message","require","AddProviderHandler","FindNodeHandler","GetProvidersHandler","GetValueHandler","PingHandler","PutValueHandler","module","exports","peerId","providers","peerStore","addressable","peerRouting","records","validators","lan","handlers","TYPES","GET_VALUE","PUT_VALUE","FIND_NODE","ADD_PROVIDER","GET_PROVIDERS","PING","getMessageHandler","type"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAcC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAyBD,OAAO,CAAC,gBAAD,CAAtC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAsBF,OAAO,CAAC,aAAD,CAAnC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAA0BH,OAAO,CAAC,iBAAD,CAAvC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAsBJ,OAAO,CAAC,aAAD,CAAnC;;AACA,MAAM;AAAEK,EAAAA;AAAF,IAAkBL,OAAO,CAAC,QAAD,CAA/B;;AACA,MAAM;AAAEM,EAAAA;AAAF,IAAsBN,OAAO,CAAC,aAAD,CAAnC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAO,MAAM,CAACC,OAAP,GAAiB,QAA0F;AAAA,MAAzF;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,WAAhC;AAA6CC,IAAAA,WAA7C;AAA0DC,IAAAA,OAA1D;AAAmEC,IAAAA,UAAnE;AAA+EC,IAAAA;AAA/E,GAAyF;;AACzG;AACA,QAAMC,QAAQ,GAAG;AACf,KAAClB,OAAO,CAACmB,KAAR,CAAcC,SAAf,GAA2B,IAAIf,eAAJ,CAAoB;AAAEK,MAAAA,MAAF;AAAUE,MAAAA,SAAV;AAAqBE,MAAAA,WAArB;AAAkCC,MAAAA;AAAlC,KAApB,CADZ;AAEf,KAACf,OAAO,CAACmB,KAAR,CAAcE,SAAf,GAA2B,IAAId,eAAJ,CAAoB;AAAES,MAAAA,UAAF;AAAcD,MAAAA;AAAd,KAApB,CAFZ;AAGf,KAACf,OAAO,CAACmB,KAAR,CAAcG,SAAf,GAA2B,IAAInB,eAAJ,CAAoB;AAAEO,MAAAA,MAAF;AAAUG,MAAAA,WAAV;AAAuBC,MAAAA,WAAvB;AAAoCG,MAAAA;AAApC,KAApB,CAHZ;AAIf,KAACjB,OAAO,CAACmB,KAAR,CAAcI,YAAf,GAA8B,IAAIrB,kBAAJ,CAAuB;AAAEQ,MAAAA,MAAF;AAAUC,MAAAA,SAAV;AAAqBC,MAAAA;AAArB,KAAvB,CAJf;AAKf,KAACZ,OAAO,CAACmB,KAAR,CAAcK,aAAf,GAA+B,IAAIpB,mBAAJ,CAAwB;AAAEM,MAAAA,MAAF;AAAUI,MAAAA,WAAV;AAAuBH,MAAAA,SAAvB;AAAkCC,MAAAA,SAAlC;AAA6CC,MAAAA,WAA7C;AAA0DI,MAAAA;AAA1D,KAAxB,CALhB;AAMf,KAACjB,OAAO,CAACmB,KAAR,CAAcM,IAAf,GAAsB,IAAInB,WAAJ;AANP,GAAjB;AASA;AACF;AACA;AACA;AACA;;AACE,WAASoB,iBAAT,CAA4BC,IAA5B,EAAkC;AAChC,WAAOT,QAAQ,CAACS,IAAD,CAAf;AACD;;AAED,SAAOD,iBAAP;AACD,CArBD","sourcesContent":["'use strict'\n\nconst { Message } = require('../../message')\nconst { AddProviderHandler } = require('./add-provider')\nconst { FindNodeHandler } = require('./find-node')\nconst { GetProvidersHandler } = require('./get-providers')\nconst { GetValueHandler } = require('./get-value')\nconst { PingHandler } = require('./ping')\nconst { PutValueHandler } = require('./put-value')\n\n/**\n * @typedef {import('../types').DHTMessageHandler} DHTMessageHandler\n */\n\n/**\n * @param {object} params\n * @param {import('peer-id')} params.peerId\n * @param {import('../../providers').Providers} params.providers\n * @param {import('libp2p/src/peer-store/types').PeerStore} params.peerStore\n * @param {import('../../types').Addressable} params.addressable\n * @param {import('../../peer-routing').PeerRouting} params.peerRouting\n * @param {import('interface-datastore').Datastore} params.records\n * @param {import('libp2p-interfaces/src/types').DhtValidators} params.validators\n * @param {boolean} [params.lan]\n */\nmodule.exports = ({ peerId, providers, peerStore, addressable, peerRouting, records, validators, lan }) => {\n  /** @type {Record<number, DHTMessageHandler>} */\n  const handlers = {\n    [Message.TYPES.GET_VALUE]: new GetValueHandler({ peerId, peerStore, peerRouting, records }),\n    [Message.TYPES.PUT_VALUE]: new PutValueHandler({ validators, records }),\n    [Message.TYPES.FIND_NODE]: new FindNodeHandler({ peerId, addressable, peerRouting, lan }),\n    [Message.TYPES.ADD_PROVIDER]: new AddProviderHandler({ peerId, providers, peerStore }),\n    [Message.TYPES.GET_PROVIDERS]: new GetProvidersHandler({ peerId, peerRouting, providers, peerStore, addressable, lan }),\n    [Message.TYPES.PING]: new PingHandler()\n  }\n\n  /**\n   * Get the message handler matching the passed in type.\n   *\n   * @param {number} type\n   */\n  function getMessageHandler (type) {\n    return handlers[type]\n  }\n\n  return getMessageHandler\n}\n"]},"metadata":{},"sourceType":"script"}