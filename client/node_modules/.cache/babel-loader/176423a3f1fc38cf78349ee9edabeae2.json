{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isValidPublicKey = exports.getHkdf = exports.verifySignedPayload = exports.getHandshakePayload = exports.decodePayload = exports.getPeerIdFromPayload = exports.signPayload = exports.createHandshakePayload = exports.getPayload = exports.generateKeypair = void 0;\n\nconst hkdf_1 = require(\"@stablelib/hkdf\");\n\nconst sha256_1 = require(\"@stablelib/sha256\");\n\nconst x25519 = __importStar(require(\"@stablelib/x25519\"));\n\nconst peer_id_1 = __importDefault(require(\"peer-id\"));\n\nconst payload_1 = require(\"./proto/payload\");\n\nconst equals_1 = require(\"uint8arrays/equals\");\n\nconst from_string_1 = require(\"uint8arrays/from-string\");\n\nconst concat_1 = require(\"uint8arrays/concat\");\n\nconst NoiseHandshakePayloadProto = payload_1.pb.NoiseHandshakePayload;\n\nfunction generateKeypair() {\n  const keypair = x25519.generateKeyPair();\n  return {\n    publicKey: keypair.publicKey,\n    privateKey: keypair.secretKey\n  };\n}\n\nexports.generateKeypair = generateKeypair;\n\nasync function getPayload(localPeer, staticPublicKey, earlyData) {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  const earlyDataPayload = earlyData !== null && earlyData !== void 0 ? earlyData : new Uint8Array(0);\n  return createHandshakePayload(localPeer.marshalPubKey(), signedPayload, earlyDataPayload);\n}\n\nexports.getPayload = getPayload;\n\nfunction createHandshakePayload(libp2pPublicKey, signedPayload, earlyData) {\n  const payloadInit = NoiseHandshakePayloadProto.create({\n    identityKey: libp2pPublicKey,\n    identitySig: signedPayload,\n    data: earlyData !== null && earlyData !== void 0 ? earlyData : null\n  });\n  return NoiseHandshakePayloadProto.encode(payloadInit).finish();\n}\n\nexports.createHandshakePayload = createHandshakePayload;\n\nasync function signPayload(peerId, payload) {\n  return await peerId.privKey.sign(payload);\n}\n\nexports.signPayload = signPayload;\n\nasync function getPeerIdFromPayload(payload) {\n  return await peer_id_1.default.createFromPubKey(payload.identityKey);\n}\n\nexports.getPeerIdFromPayload = getPeerIdFromPayload;\n\nfunction decodePayload(payload) {\n  return NoiseHandshakePayloadProto.toObject(NoiseHandshakePayloadProto.decode(payload));\n}\n\nexports.decodePayload = decodePayload;\n\nfunction getHandshakePayload(publicKey) {\n  const prefix = (0, from_string_1.fromString)('noise-libp2p-static-key:');\n  return (0, concat_1.concat)([prefix, publicKey], prefix.length + publicKey.length);\n}\n\nexports.getHandshakePayload = getHandshakePayload;\n\nasync function isValidPeerId(peerId, publicKeyProtobuf) {\n  const generatedPeerId = await peer_id_1.default.createFromPubKey(publicKeyProtobuf);\n  return (0, equals_1.equals)(generatedPeerId.id, peerId);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n *\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\n\n\nasync function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n  const identityKey = payload.identityKey;\n\n  if (!(await isValidPeerId(remotePeer.id, identityKey))) {\n    throw new Error(\"Peer ID doesn't match libp2p public key.\");\n  }\n\n  const generatedPayload = getHandshakePayload(noiseStaticKey); // Unmarshaling from PublicKey protobuf\n\n  const peerId = await peer_id_1.default.createFromPubKey(identityKey); // TODO remove this after libp2p-crypto ships proper types\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n\n  if (!payload.identitySig || !peerId.pubKey.verify(generatedPayload, payload.identitySig)) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n\n  return peerId;\n}\n\nexports.verifySignedPayload = verifySignedPayload;\n\nfunction getHkdf(ck, ikm) {\n  const hkdf = new hkdf_1.HKDF(sha256_1.SHA256, ikm, ck);\n  const okmU8Array = hkdf.expand(96);\n  const okm = okmU8Array;\n  const k1 = okm.slice(0, 32);\n  const k2 = okm.slice(32, 64);\n  const k3 = okm.slice(64, 96);\n  return [k1, k2, k3];\n}\n\nexports.getHkdf = getHkdf;\n\nfunction isValidPublicKey(pk) {\n  if (!(pk instanceof Uint8Array)) {\n    return false;\n  }\n\n  if (pk.length !== 32) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isValidPublicKey = isValidPublicKey;","map":{"version":3,"mappings":"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","names":["NoiseHandshakePayloadProto","payload_1","NoiseHandshakePayload","generateKeypair","keypair","x25519","generateKeyPair","publicKey","privateKey","secretKey","exports","getPayload","localPeer","staticPublicKey","earlyData","signedPayload","signPayload","getHandshakePayload","earlyDataPayload","Uint8Array","createHandshakePayload","marshalPubKey","libp2pPublicKey","payloadInit","create","identityKey","identitySig","data","encode","finish","peerId","payload","privKey","sign","getPeerIdFromPayload","peer_id_1","createFromPubKey","decodePayload","toObject","decode","prefix","length","isValidPeerId","publicKeyProtobuf","generatedPeerId","id","verifySignedPayload","noiseStaticKey","remotePeer","Error","generatedPayload","pubKey","verify","getHkdf","ck","ikm","hkdf","hkdf_1","sha256_1","okmU8Array","expand","okm","k1","slice","k2","k3","isValidPublicKey","pk"],"sourceRoot":"","sources":["../../src/utils.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}