{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar key = require('interface-datastore/key');\n\nvar multiformats = require('multiformats');\n\nvar raw = require('multiformats/codecs/raw');\n\nvar errCode = require('err-code');\n\nvar base32 = require('multiformats/bases/base32');\n\nvar Digest = require('multiformats/hashes/digest');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar Digest__namespace = /*#__PURE__*/_interopNamespace(Digest);\n\nfunction cidToKey(c) {\n  const cid = multiformats.CID.asCID(c);\n\n  if (cid == null) {\n    throw errCode__default[\"default\"](new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  const encoded = base32.base32.encode(cid.multihash.bytes);\n  return new key.Key('/' + encoded.slice(1).toUpperCase(), false);\n}\n\nfunction keyToCid(key) {\n  return multiformats.CID.createV1(raw__namespace.code, keyToMultihash(key));\n}\n\nfunction keyToMultihash(key) {\n  return Digest__namespace.decode(base32.base32.decode(`b${key.toString().toLowerCase().substring(1)}`));\n}\n\nexports.cidToKey = cidToKey;\nexports.keyToCid = keyToCid;\nexports.keyToMultihash = keyToMultihash;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-repo/cjs/src/utils/blockstore.js"],"names":["Object","defineProperty","exports","value","key","require","multiformats","raw","errCode","base32","Digest","_interopDefaultLegacy","e","_interopNamespace","__esModule","n","create","keys","forEach","k","d","getOwnPropertyDescriptor","get","enumerable","freeze","raw__namespace","errCode__default","Digest__namespace","cidToKey","c","cid","CID","asCID","Error","encoded","encode","multihash","bytes","Key","slice","toUpperCase","keyToCid","createV1","code","keyToMultihash","decode","toString","toLowerCase","substring"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAjB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,yBAAD,CAAjB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,UAAD,CAArB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,2BAAD,CAApB;;AACA,IAAIK,MAAM,GAAGL,OAAO,CAAC,4BAAD,CAApB;;AAEA,SAASM,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,SAASC,iBAAT,CAA2BD,CAA3B,EAA8B;AAC5B,MAAIA,CAAC,IAAIA,CAAC,CAACE,UAAX,EAAuB,OAAOF,CAAP;AACvB,MAAIG,CAAC,GAAGf,MAAM,CAACgB,MAAP,CAAc,IAAd,CAAR;;AACA,MAAIJ,CAAJ,EAAO;AACLZ,IAAAA,MAAM,CAACiB,IAAP,CAAYL,CAAZ,EAAeM,OAAf,CAAuB,UAAUC,CAAV,EAAa;AAClC,UAAIA,CAAC,KAAK,SAAV,EAAqB;AACnB,YAAIC,CAAC,GAAGpB,MAAM,CAACqB,wBAAP,CAAgCT,CAAhC,EAAmCO,CAAnC,CAAR;AACAnB,QAAAA,MAAM,CAACC,cAAP,CAAsBc,CAAtB,EAAyBI,CAAzB,EAA4BC,CAAC,CAACE,GAAF,GAAQF,CAAR,GAAY;AACtCG,UAAAA,UAAU,EAAE,IAD0B;AAEtCD,UAAAA,GAAG,EAAE,YAAY;AAAE,mBAAOV,CAAC,CAACO,CAAD,CAAR;AAAc;AAFK,SAAxC;AAID;AACF,KARD;AASD;;AACDJ,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeH,CAAf;AACA,SAAOZ,MAAM,CAACwB,MAAP,CAAcT,CAAd,CAAP;AACD;;AAED,IAAIU,cAAc,GAAG,aAAaZ,iBAAiB,CAACN,GAAD,CAAnD;;AACA,IAAImB,gBAAgB,GAAG,aAAaf,qBAAqB,CAACH,OAAD,CAAzD;;AACA,IAAImB,iBAAiB,GAAG,aAAad,iBAAiB,CAACH,MAAD,CAAtD;;AAEA,SAASkB,QAAT,CAAkBC,CAAlB,EAAqB;AACnB,QAAMC,GAAG,GAAGxB,YAAY,CAACyB,GAAb,CAAiBC,KAAjB,CAAuBH,CAAvB,CAAZ;;AACA,MAAIC,GAAG,IAAI,IAAX,EAAiB;AACf,UAAMJ,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIO,KAAJ,CAAU,iBAAV,CAA5B,EAA0D,iBAA1D,CAAN;AACD;;AACD,QAAMC,OAAO,GAAGzB,MAAM,CAACA,MAAP,CAAc0B,MAAd,CAAqBL,GAAG,CAACM,SAAJ,CAAcC,KAAnC,CAAhB;AACA,SAAO,IAAIjC,GAAG,CAACkC,GAAR,CAAY,MAAMJ,OAAO,CAACK,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAAlB,EAAkD,KAAlD,CAAP;AACD;;AACD,SAASC,QAAT,CAAkBrC,GAAlB,EAAuB;AACrB,SAAOE,YAAY,CAACyB,GAAb,CAAiBW,QAAjB,CAA0BjB,cAAc,CAACkB,IAAzC,EAA+CC,cAAc,CAACxC,GAAD,CAA7D,CAAP;AACD;;AACD,SAASwC,cAAT,CAAwBxC,GAAxB,EAA6B;AAC3B,SAAOuB,iBAAiB,CAACkB,MAAlB,CAAyBpC,MAAM,CAACA,MAAP,CAAcoC,MAAd,CAAsB,IAAIzC,GAAG,CAAC0C,QAAJ,GAAeC,WAAf,GAA6BC,SAA7B,CAAuC,CAAvC,CAA2C,EAArE,CAAzB,CAAP;AACD;;AAED9C,OAAO,CAAC0B,QAAR,GAAmBA,QAAnB;AACA1B,OAAO,CAACuC,QAAR,GAAmBA,QAAnB;AACAvC,OAAO,CAAC0C,cAAR,GAAyBA,cAAzB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar key = require('interface-datastore/key');\nvar multiformats = require('multiformats');\nvar raw = require('multiformats/codecs/raw');\nvar errCode = require('err-code');\nvar base32 = require('multiformats/bases/base32');\nvar Digest = require('multiformats/hashes/digest');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () { return e[k]; }\n        });\n      }\n    });\n  }\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar raw__namespace = /*#__PURE__*/_interopNamespace(raw);\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar Digest__namespace = /*#__PURE__*/_interopNamespace(Digest);\n\nfunction cidToKey(c) {\n  const cid = multiformats.CID.asCID(c);\n  if (cid == null) {\n    throw errCode__default[\"default\"](new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n  const encoded = base32.base32.encode(cid.multihash.bytes);\n  return new key.Key('/' + encoded.slice(1).toUpperCase(), false);\n}\nfunction keyToCid(key) {\n  return multiformats.CID.createV1(raw__namespace.code, keyToMultihash(key));\n}\nfunction keyToMultihash(key) {\n  return Digest__namespace.decode(base32.base32.decode(`b${ key.toString().toLowerCase().substring(1) }`));\n}\n\nexports.cidToKey = cidToKey;\nexports.keyToCid = keyToCid;\nexports.keyToMultihash = keyToMultihash;\n"]},"metadata":{},"sourceType":"script"}