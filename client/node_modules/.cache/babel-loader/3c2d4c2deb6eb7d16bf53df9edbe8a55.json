{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XXHandshake = void 0;\n\nconst xx_1 = require(\"./handshakes/xx\");\n\nconst utils_1 = require(\"./utils\");\n\nconst logger_1 = require(\"./logger\");\n\nconst encoder_1 = require(\"./encoder\");\n\nclass XXHandshake {\n  constructor(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake) {\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.xx = handshake !== null && handshake !== void 0 ? handshake : new xx_1.XX();\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    this.remoteEarlyData = new Uint8Array(0);\n  } // stage 0\n\n\n  async propose() {\n    (0, logger_1.logLocalStaticKeys)(this.session.hs.s);\n\n    if (this.isInitiator) {\n      (0, logger_1.logger)('Stage 0 - Initiator starting to send first message.');\n      const messageBuffer = this.xx.sendMessage(this.session, new Uint8Array(0));\n      this.connection.writeLP((0, encoder_1.encode0)(messageBuffer));\n      (0, logger_1.logger)('Stage 0 - Initiator finished sending first message.');\n      (0, logger_1.logLocalEphemeralKeys)(this.session.hs.e);\n    } else {\n      (0, logger_1.logger)('Stage 0 - Responder waiting to receive first message...');\n      const receivedMessageBuffer = (0, encoder_1.decode0)((await this.connection.readLP()).slice());\n      const {\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error('xx handshake stage 0 validation fail');\n      }\n\n      (0, logger_1.logger)('Stage 0 - Responder received first message.');\n      (0, logger_1.logRemoteEphemeralKey)(this.session.hs.re);\n    }\n  } // stage 1\n\n\n  async exchange() {\n    if (this.isInitiator) {\n      (0, logger_1.logger)('Stage 1 - Initiator waiting to receive first message from responder...');\n      const receivedMessageBuffer = (0, encoder_1.decode1)((await this.connection.readLP()).slice());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error('xx handshake stage 1 validation fail');\n      }\n\n      (0, logger_1.logger)('Stage 1 - Initiator received the message.');\n      (0, logger_1.logRemoteEphemeralKey)(this.session.hs.re);\n      (0, logger_1.logRemoteStaticKey)(this.session.hs.rs);\n      (0, logger_1.logger)(\"Initiator going to check remote's signature...\");\n\n      try {\n        const decodedPayload = await (0, utils_1.decodePayload)(plaintext);\n        this.remotePeer = this.remotePeer || (await (0, utils_1.getPeerIdFromPayload)(decodedPayload));\n        this.remotePeer = await (0, utils_1.verifySignedPayload)(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        const err = e;\n        throw new Error(`Error occurred while verifying signed payload: ${err.message}`);\n      }\n\n      (0, logger_1.logger)('All good with the signature!');\n    } else {\n      (0, logger_1.logger)('Stage 1 - Responder sending out first message with signed payload and static key.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP((0, encoder_1.encode1)(messageBuffer));\n      (0, logger_1.logger)('Stage 1 - Responder sent the second handshake message with signed payload.');\n      (0, logger_1.logLocalEphemeralKeys)(this.session.hs.e);\n    }\n  } // stage 2\n\n\n  async finish() {\n    if (this.isInitiator) {\n      (0, logger_1.logger)('Stage 2 - Initiator sending third handshake message.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP((0, encoder_1.encode2)(messageBuffer));\n      (0, logger_1.logger)('Stage 2 - Initiator sent message with signed payload.');\n    } else {\n      (0, logger_1.logger)('Stage 2 - Responder waiting for third handshake message...');\n      const receivedMessageBuffer = (0, encoder_1.decode2)((await this.connection.readLP()).slice());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n\n      if (!valid) {\n        throw new Error('xx handshake stage 2 validation fail');\n      }\n\n      (0, logger_1.logger)('Stage 2 - Responder received the message, finished handshake.');\n\n      try {\n        const decodedPayload = await (0, utils_1.decodePayload)(plaintext);\n        this.remotePeer = this.remotePeer || (await (0, utils_1.getPeerIdFromPayload)(decodedPayload));\n        await (0, utils_1.verifySignedPayload)(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        const err = e;\n        throw new Error(`Error occurred while verifying signed payload: ${err.message}`);\n      }\n    }\n\n    (0, logger_1.logCipherState)(this.session);\n  }\n\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.xx.encryptWithAd(cs, new Uint8Array(0), plaintext);\n  }\n\n  decrypt(ciphertext, session) {\n    const cs = this.getCS(session, false);\n    return this.xx.decryptWithAd(cs, new Uint8Array(0), ciphertext);\n  }\n\n  getRemoteStaticKey() {\n    return this.session.hs.rs;\n  }\n\n  getCS(session) {\n    let encryption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!session.cs1 || !session.cs2) {\n      throw new Error('Handshake not completed properly, cipher state does not exist.');\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  setRemoteEarlyData(data) {\n    if (data) {\n      this.remoteEarlyData = data;\n    }\n  }\n\n}\n\nexports.XXHandshake = XXHandshake;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAKA;;AAKA;;AAQA;;AAIA,MAAaA,WAAb,CAAwB;AAatBC,cACEC,WADF,EAEEC,OAFF,EAGEC,QAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,UANF,EAOEC,SAPF,EAOgB;AAEd,SAAKN,WAAL,GAAmBA,WAAnB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;;AACA,QAAIC,UAAJ,EAAgB;AACd,WAAKA,UAAL,GAAkBA,UAAlB;AACD;;AACD,SAAKE,EAAL,GAAUD,SAAS,SAAT,aAAS,WAAT,eAAa,IAAIE,OAAJ,EAAvB;AACA,SAAKC,OAAL,GAAe,KAAKF,EAAL,CAAQG,WAAR,CAAoB,KAAKV,WAAzB,EAAsC,KAAKE,QAA3C,EAAqD,KAAKC,aAA1D,CAAf;AACA,SAAKQ,eAAL,GAAuB,IAAIC,UAAJ,CAAe,CAAf,CAAvB;AACD,GAjCqB,CAmCtB;;;AACoB,QAAPC,OAAO;AAClB,qCAAmB,KAAKJ,OAAL,CAAaK,EAAb,CAAgBC,CAAnC;;AACA,QAAI,KAAKf,WAAT,EAAsB;AACpB,2BAAO,qDAAP;AACA,YAAMgB,aAAa,GAAG,KAAKT,EAAL,CAAQU,WAAR,CAAoB,KAAKR,OAAzB,EAAkC,IAAIG,UAAJ,CAAe,CAAf,CAAlC,CAAtB;AACA,WAAKR,UAAL,CAAgBc,OAAhB,CAAwB,uBAAQF,aAAR,CAAxB;AACA,2BAAO,qDAAP;AACA,0CAAsB,KAAKP,OAAL,CAAaK,EAAb,CAAgBK,CAAtC;AACD,KAND,MAMO;AACL,2BAAO,yDAAP;AACA,YAAMC,qBAAqB,GAAG,uBAAQ,CAAC,MAAM,KAAKhB,UAAL,CAAgBiB,MAAhB,EAAP,EAAiCC,KAAjC,EAAR,CAA9B;AACA,YAAM;AAAEC;AAAF,UAAY,KAAKhB,EAAL,CAAQiB,WAAR,CAAoB,KAAKf,OAAzB,EAAkCW,qBAAlC,CAAlB;;AACA,UAAI,CAACG,KAAL,EAAY;AACV,cAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,2BAAO,6CAAP;AACA,0CAAsB,KAAKhB,OAAL,CAAaK,EAAb,CAAgBY,EAAtC;AACD;AACF,GAtDqB,CAwDtB;;;AACqB,QAARC,QAAQ;AACnB,QAAI,KAAK3B,WAAT,EAAsB;AACpB,2BAAO,wEAAP;AACA,YAAMoB,qBAAqB,GAAG,uBAAQ,CAAC,MAAM,KAAKhB,UAAL,CAAgBiB,MAAhB,EAAP,EAAiCC,KAAjC,EAAR,CAA9B;AACA,YAAM;AAAEM,iBAAF;AAAaL;AAAb,UAAuB,KAAKhB,EAAL,CAAQiB,WAAR,CAAoB,KAAKf,OAAzB,EAAkCW,qBAAlC,CAA7B;;AACA,UAAI,CAACG,KAAL,EAAY;AACV,cAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,2BAAO,2CAAP;AACA,0CAAsB,KAAKhB,OAAL,CAAaK,EAAb,CAAgBY,EAAtC;AACA,uCAAmB,KAAKjB,OAAL,CAAaK,EAAb,CAAgBe,EAAnC;AAEA,2BAAO,gDAAP;;AACA,UAAI;AACF,cAAMC,cAAc,GAAG,MAAM,2BAAcF,SAAd,CAA7B;AACA,aAAKvB,UAAL,GAAkB,KAAKA,UAAL,KAAmB,MAAM,kCAAqByB,cAArB,CAAzB,CAAlB;AACA,aAAKzB,UAAL,GAAkB,MAAM,iCAAoBe,qBAAqB,CAACW,EAA1C,EAA8CD,cAA9C,EAA8D,KAAKzB,UAAnE,CAAxB;AACA,aAAK2B,kBAAL,CAAwBF,cAAc,CAACG,IAAvC;AACD,OALD,CAKE,OAAOd,CAAP,EAAe;AACf,cAAMe,GAAG,GAAGf,CAAZ;AACA,cAAM,IAAIM,KAAJ,CAAU,kDAAkDS,GAAG,CAACC,OAAO,EAAvE,CAAN;AACD;;AACD,2BAAO,8BAAP;AACD,KAtBD,MAsBO;AACL,2BAAO,mFAAP;AACA,YAAMnB,aAAa,GAAG,KAAKT,EAAL,CAAQU,WAAR,CAAoB,KAAKR,OAAzB,EAAkC,KAAKR,OAAvC,CAAtB;AACA,WAAKG,UAAL,CAAgBc,OAAhB,CAAwB,uBAAQF,aAAR,CAAxB;AACA,2BAAO,4EAAP;AACA,0CAAsB,KAAKP,OAAL,CAAaK,EAAb,CAAgBK,CAAtC;AACD;AACF,GAvFqB,CAyFtB;;;AACmB,QAANiB,MAAM;AACjB,QAAI,KAAKpC,WAAT,EAAsB;AACpB,2BAAO,sDAAP;AACA,YAAMgB,aAAa,GAAG,KAAKT,EAAL,CAAQU,WAAR,CAAoB,KAAKR,OAAzB,EAAkC,KAAKR,OAAvC,CAAtB;AACA,WAAKG,UAAL,CAAgBc,OAAhB,CAAwB,uBAAQF,aAAR,CAAxB;AACA,2BAAO,uDAAP;AACD,KALD,MAKO;AACL,2BAAO,4DAAP;AACA,YAAMI,qBAAqB,GAAG,uBAAQ,CAAC,MAAM,KAAKhB,UAAL,CAAgBiB,MAAhB,EAAP,EAAiCC,KAAjC,EAAR,CAA9B;AACA,YAAM;AAAEM,iBAAF;AAAaL;AAAb,UAAuB,KAAKhB,EAAL,CAAQiB,WAAR,CAAoB,KAAKf,OAAzB,EAAkCW,qBAAlC,CAA7B;;AACA,UAAI,CAACG,KAAL,EAAY;AACV,cAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,2BAAO,+DAAP;;AAEA,UAAI;AACF,cAAMK,cAAc,GAAG,MAAM,2BAAcF,SAAd,CAA7B;AACA,aAAKvB,UAAL,GAAkB,KAAKA,UAAL,KAAmB,MAAM,kCAAqByB,cAArB,CAAzB,CAAlB;AACA,cAAM,iCAAoB,KAAKrB,OAAL,CAAaK,EAAb,CAAgBe,EAApC,EAAwCC,cAAxC,EAAwD,KAAKzB,UAA7D,CAAN;AACA,aAAK2B,kBAAL,CAAwBF,cAAc,CAACG,IAAvC;AACD,OALD,CAKE,OAAOd,CAAP,EAAe;AACf,cAAMe,GAAG,GAAGf,CAAZ;AACA,cAAM,IAAIM,KAAJ,CAAU,kDAAkDS,GAAG,CAACC,OAAO,EAAvE,CAAN;AACD;AACF;;AACD,iCAAe,KAAK1B,OAApB;AACD;;AAEM4B,SAAO,CAAET,SAAF,EAAyBnB,OAAzB,EAA8C;AAC1D,UAAM6B,EAAE,GAAG,KAAKC,KAAL,CAAW9B,OAAX,CAAX;AAEA,WAAO,KAAKF,EAAL,CAAQiC,aAAR,CAAsBF,EAAtB,EAA0B,IAAI1B,UAAJ,CAAe,CAAf,CAA1B,EAA6CgB,SAA7C,CAAP;AACD;;AAEMa,SAAO,CAAEC,UAAF,EAA0BjC,OAA1B,EAA+C;AAC3D,UAAM6B,EAAE,GAAG,KAAKC,KAAL,CAAW9B,OAAX,EAAoB,KAApB,CAAX;AAEA,WAAO,KAAKF,EAAL,CAAQoC,aAAR,CAAsBL,EAAtB,EAA0B,IAAI1B,UAAJ,CAAe,CAAf,CAA1B,EAA6C8B,UAA7C,CAAP;AACD;;AAEME,oBAAkB;AACvB,WAAO,KAAKnC,OAAL,CAAaK,EAAb,CAAgBe,EAAvB;AACD;;AAEOU,OAAK,CAAE9B,OAAF,EAA0C;AAAA,QAAjBoC,UAAiB,uEAAJ,IAAI;;AACrD,QAAI,CAACpC,OAAO,CAACqC,GAAT,IAAgB,CAACrC,OAAO,CAACsC,GAA7B,EAAkC;AAChC,YAAM,IAAItB,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,QAAI,KAAKzB,WAAT,EAAsB;AACpB,aAAO6C,UAAU,GAAGpC,OAAO,CAACqC,GAAX,GAAiBrC,OAAO,CAACsC,GAA1C;AACD,KAFD,MAEO;AACL,aAAOF,UAAU,GAAGpC,OAAO,CAACsC,GAAX,GAAiBtC,OAAO,CAACqC,GAA1C;AACD;AACF;;AAESd,oBAAkB,CAAEC,IAAF,EAAiC;AAC3D,QAAIA,IAAJ,EAAU;AACR,WAAKtB,eAAL,GAAuBsB,IAAvB;AACD;AACF;;AAtJqB;;AAAxBe","names":["XXHandshake","constructor","isInitiator","payload","prologue","staticKeypair","connection","remotePeer","handshake","xx","xx_1","session","initSession","remoteEarlyData","Uint8Array","propose","hs","s","messageBuffer","sendMessage","writeLP","e","receivedMessageBuffer","readLP","slice","valid","recvMessage","Error","re","exchange","plaintext","rs","decodedPayload","ns","setRemoteEarlyData","data","err","message","finish","encrypt","cs","getCS","encryptWithAd","decrypt","ciphertext","decryptWithAd","getRemoteStaticKey","encryption","cs1","cs2","exports"],"sourceRoot":"","sources":["../../src/handshake-xx.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}