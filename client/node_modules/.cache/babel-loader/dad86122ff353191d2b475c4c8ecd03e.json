{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nvar NodeRandomSource =\n/** @class */\nfunction () {\n  function NodeRandomSource() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n\n    if (typeof require !== \"undefined\") {\n      var nodeCrypto = require(\"crypto\");\n\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n\n  NodeRandomSource.prototype.randomBytes = function (length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Node.js random byte generator is not available.\");\n    } // Get random bytes (result is Buffer).\n\n\n    var buffer = this._crypto.randomBytes(length); // Make sure we got the length that we requested.\n\n\n    if (buffer.length !== length) {\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    } // Allocate output array.\n\n\n    var out = new Uint8Array(length); // Copy bytes from buffer to output.\n\n    for (var i = 0; i < out.length; i++) {\n      out[i] = buffer[i];\n    } // Cleanup.\n\n\n    wipe_1.wipe(buffer);\n    return out;\n  };\n\n  return NodeRandomSource;\n}();\n\nexports.NodeRandomSource = NodeRandomSource;","map":{"version":3,"mappings":"cAAA;AACA;;;;;;AAGA;;AAIA;AAAA;AAAA;AAMI;AALA,uBAAc,KAAd;AACA,0BAAiB,KAAjB;;AAKI,QAAI,OAAOA,OAAP,KAAmB,WAAvB,EAAoC;AAChC,UAAMC,UAAU,GAAGD,OAAO,CAAC,QAAD,CAA1B;;AACA,UAAIC,UAAU,IAAIA,UAAU,CAACC,WAA7B,EAA0C;AACtC,aAAKC,OAAL,GAAeF,UAAf;AACA,aAAKG,WAAL,GAAmB,IAAnB;AACA,aAAKC,cAAL,GAAsB,IAAtB;AACH;AACJ;AACJ;;AAEDC,qDAAYC,MAAZ,EAA0B;AACtB,QAAI,CAAC,KAAKH,WAAN,IAAqB,CAAC,KAAKD,OAA/B,EAAwC;AACpC,YAAM,IAAIK,KAAJ,CAAU,iDAAV,CAAN;AACH,KAHqB,CAKtB;;;AACA,QAAIC,MAAM,GAAG,KAAKN,OAAL,CAAaD,WAAb,CAAyBK,MAAzB,CAAb,CANsB,CAQtB;;;AACA,QAAIE,MAAM,CAACF,MAAP,KAAkBA,MAAtB,EAA8B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,kDAAV,CAAN;AACH,KAXqB,CAatB;;;AACA,QAAME,GAAG,GAAG,IAAIC,UAAJ,CAAeJ,MAAf,CAAZ,CAdsB,CAgBtB;;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACH,MAAxB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCF,SAAG,CAACE,CAAD,CAAH,GAASH,MAAM,CAACG,CAAD,CAAf;AACH,KAnBqB,CAqBtB;;;AACAC,gBAAKJ,MAAL;AAEA,WAAOC,GAAP;AACH,GAzBD;;AA0BJ;AAAC,CA3CD;;AAAaI","names":["require","nodeCrypto","randomBytes","_crypto","isAvailable","isInstantiated","NodeRandomSource","length","Error","buffer","out","Uint8Array","i","wipe_1","exports"],"sourceRoot":"","sources":["../../source/node.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}