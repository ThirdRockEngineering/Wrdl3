{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar debug = require('debug');\n\nvar utils = require('../../../utils.js');\n\nvar fromString = require('uint8arrays/from-string');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:to-async-iterator');\n\nfunction toAsyncIterator(content) {\n  if (!content) {\n    throw errCode__default[\"default\"](new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = fromString.fromString(content.toString());\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    log('Content was an HTML5 Blob');\n    let index = 0;\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return {\n            done: true\n          };\n        }\n\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, utils.MFS_MAX_CHUNK_SIZE);\n          index += utils.MFS_MAX_CHUNK_SIZE;\n          const reader = new global.FileReader();\n\n          const handleLoad = ev => {\n            reader.removeEventListener('loadend', handleLoad, false);\n\n            if (ev.error) {\n              return reject(ev.error);\n            }\n\n            resolve({\n              done: false,\n              value: new Uint8Array(reader.result)\n            });\n          };\n\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator;\n      }\n    };\n  }\n\n  throw errCode__default[\"default\"](new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n}\n\nexports.toAsyncIterator = toAsyncIterator;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/files/utils/to-async-iterator.js"],"names":["Object","defineProperty","exports","value","errCode","require","debug","utils","fromString","_interopDefaultLegacy","e","errCode__default","debug__default","log","toAsyncIterator","content","Error","String","toString","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","index","next","size","done","Promise","resolve","reject","chunk","slice","MFS_MAX_CHUNK_SIZE","reader","FileReader","handleLoad","ev","removeEventListener","error","Uint8Array","result","addEventListener","readAsArrayBuffer"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errCode = require('err-code');\nvar debug = require('debug');\nvar utils = require('../../../utils.js');\nvar fromString = require('uint8arrays/from-string');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = debug__default[\"default\"]('ipfs:mfs:utils:to-async-iterator');\nfunction toAsyncIterator(content) {\n  if (!content) {\n    throw errCode__default[\"default\"](new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = fromString.fromString(content.toString());\n  }\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n  if (global.Blob && content instanceof global.Blob) {\n    log('Content was an HTML5 Blob');\n    let index = 0;\n    const iterator = {\n      next: () => {\n        if (index > content.size) {\n          return { done: true };\n        }\n        return new Promise((resolve, reject) => {\n          const chunk = content.slice(index, utils.MFS_MAX_CHUNK_SIZE);\n          index += utils.MFS_MAX_CHUNK_SIZE;\n          const reader = new global.FileReader();\n          const handleLoad = ev => {\n            reader.removeEventListener('loadend', handleLoad, false);\n            if (ev.error) {\n              return reject(ev.error);\n            }\n            resolve({\n              done: false,\n              value: new Uint8Array(reader.result)\n            });\n          };\n          reader.addEventListener('loadend', handleLoad);\n          reader.readAsArrayBuffer(chunk);\n        });\n      }\n    };\n    return {\n      [Symbol.asyncIterator]: () => {\n        return iterator;\n      }\n    };\n  }\n  throw errCode__default[\"default\"](new Error(`Don't know how to convert ${ content } into an async iterator`), 'ERR_INVALID_PARAMS');\n}\n\nexports.toAsyncIterator = toAsyncIterator;\n"]},"metadata":{},"sourceType":"script"}