{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar dns = require('ipfs-core-config/dns');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction fqdnFixups(domain) {\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nfunction createDns() {\n  const resolveDNS = async function (domain) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      recursive: true\n    };\n\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string');\n    }\n\n    domain = fqdnFixups(domain);\n    return dns.resolveDnslink(domain, options);\n  };\n\n  return withTimeoutOption.withTimeoutOption(resolveDNS);\n}\n\nexports.createDns = createDns;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/dns.js"],"names":["Object","defineProperty","exports","value","dns","require","withTimeoutOption","fqdnFixups","domain","endsWith","replace","createDns","resolveDNS","options","recursive","Error","resolveDnslink"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,GAAG,GAAGC,OAAO,CAAC,sBAAD,CAAjB;;AACA,IAAIC,iBAAiB,GAAGD,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASE,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,MAAIA,MAAM,CAACC,QAAP,CAAgB,MAAhB,CAAJ,EAA6B;AAC3BD,IAAAA,MAAM,GAAGA,MAAM,CAACE,OAAP,CAAe,OAAf,EAAwB,WAAxB,CAAT;AACD;;AACD,SAAOF,MAAP;AACD;;AACD,SAASG,SAAT,GAAqB;AACnB,QAAMC,UAAU,GAAG,gBAAOJ,MAAP,EAAiD;AAAA,QAAlCK,OAAkC,uEAAxB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAwB;;AAClE,QAAI,OAAON,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM,IAAIO,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACDP,IAAAA,MAAM,GAAGD,UAAU,CAACC,MAAD,CAAnB;AACA,WAAOJ,GAAG,CAACY,cAAJ,CAAmBR,MAAnB,EAA2BK,OAA3B,CAAP;AACD,GAND;;AAOA,SAAOP,iBAAiB,CAACA,iBAAlB,CAAoCM,UAApC,CAAP;AACD;;AAEDV,OAAO,CAACS,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar dns = require('ipfs-core-config/dns');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction fqdnFixups(domain) {\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n  return domain;\n}\nfunction createDns() {\n  const resolveDNS = async (domain, options = { recursive: true }) => {\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string');\n    }\n    domain = fqdnFixups(domain);\n    return dns.resolveDnslink(domain, options);\n  };\n  return withTimeoutOption.withTimeoutOption(resolveDNS);\n}\n\nexports.createDns = createDns;\n"]},"metadata":{},"sourceType":"script"}