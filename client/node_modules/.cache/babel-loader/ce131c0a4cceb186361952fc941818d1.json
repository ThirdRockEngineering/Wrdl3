{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:mfs-preload'), {\n  error: debug__default[\"default\"]('ipfs:mfs-preload:error')\n});\n\nfunction createMfsPreloader(_ref) {\n  let {\n    preload,\n    files,\n    options = {}\n  } = _ref;\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  let timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = stats.cid.toString();\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = stats.cid.toString();\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n}\n\nexports.createMfsPreloader = createMfsPreloader;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/mfs-preload.js"],"names":["Object","defineProperty","exports","value","debug","require","_interopDefaultLegacy","e","debug__default","log","assign","error","createMfsPreloader","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","toString","err","setTimeout","clearTimeout"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,SAASC,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,cAAc,GAAG,aAAaF,qBAAqB,CAACF,KAAD,CAAvD;;AAEA,MAAMK,GAAG,GAAGT,MAAM,CAACU,MAAP,CAAcF,cAAc,CAAC,SAAD,CAAd,CAA0B,kBAA1B,CAAd,EAA6D;AAAEG,EAAAA,KAAK,EAAEH,cAAc,CAAC,SAAD,CAAd,CAA0B,wBAA1B;AAAT,CAA7D,CAAZ;;AACA,SAASI,kBAAT,OAA4D;AAAA,MAAhC;AAACC,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,OAAO,GAAG;AAA3B,GAAgC;AAC1DA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AACA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBR,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,UAAMS,IAAI,GAAG,YAAY,CACxB,CADD;;AAEA,WAAO;AACLC,MAAAA,KAAK,EAAED,IADF;AAELE,MAAAA,IAAI,EAAEF;AAFD,KAAP;AAID;;AACD,MAAIG,OAAO,GAAG,EAAd;AACA,MAAIC,SAAJ;;AACA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACA,YAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAApB;;AACA,UAAIP,OAAO,KAAKK,WAAhB,EAA6B;AAC3BjB,QAAAA,GAAG,CAAE,+BAA+BY,OAAS,OAAOG,KAAK,CAACG,GAAK,EAA5D,CAAH;AACA,cAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;AACAN,QAAAA,OAAO,GAAGK,WAAV;AACD;AACF,KARD,CAQE,OAAOG,GAAP,EAAY;AACZpB,MAAAA,GAAG,CAACE,KAAJ,CAAU,4BAAV,EAAwCkB,GAAxC;AACD,KAVD,SAUU;AACRP,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD;AACF,GAdD;;AAeA,SAAO;AACL,UAAMG,KAAN,GAAc;AACZ,YAAMK,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACAJ,MAAAA,OAAO,GAAGG,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAV;AACAnB,MAAAA,GAAG,CAAE,uBAAuBe,KAAK,CAACG,GAAK,EAApC,CAAH;AACAL,MAAAA,SAAS,GAAGQ,UAAU,CAACP,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD,KANI;;AAOLI,IAAAA,IAAI,GAAG;AACLW,MAAAA,YAAY,CAACT,SAAD,CAAZ;AACD;;AATI,GAAP;AAWD;;AAEDpB,OAAO,CAACU,kBAAR,GAA6BA,kBAA7B","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar debug = require('debug');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debug__default = /*#__PURE__*/_interopDefaultLegacy(debug);\n\nconst log = Object.assign(debug__default[\"default\"]('ipfs:mfs-preload'), { error: debug__default[\"default\"]('ipfs:mfs-preload:error') });\nfunction createMfsPreloader({preload, files, options = {}}) {\n  options.interval = options.interval || 30 * 1000;\n  if (!options.enabled) {\n    log('MFS preload disabled');\n    const noop = async () => {\n    };\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n  let rootCid = '';\n  let timeoutId;\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = stats.cid.toString();\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${ rootCid } -> ${ stats.cid }`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n  return {\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = stats.cid.toString();\n      log(`monitoring MFS root ${ stats.cid }`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n    stop() {\n      clearTimeout(timeoutId);\n    }\n  };\n}\n\nexports.createMfsPreloader = createMfsPreloader;\n"]},"metadata":{},"sourceType":"script"}