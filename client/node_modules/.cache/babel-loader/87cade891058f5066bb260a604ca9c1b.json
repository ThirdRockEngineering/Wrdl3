{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar parallel = require('it-parallel');\n\nvar map = require('it-map');\n\nvar filter = require('it-filter');\n\nvar itPipe = require('it-pipe');\n\nvar utils = require('./utils.js');\n\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\n\nvar parallel__default = /*#__PURE__*/_interopDefaultLegacy(parallel);\n\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\n\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nconst BLOCK_RM_CONCURRENCY = 8;\n\nfunction createRm(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  async function* rm(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!Array.isArray(cids)) {\n      cids = [cids];\n    }\n\n    const release = await repo.gcLock.writeLock();\n\n    try {\n      yield* itPipe.pipe(cids, source => map__default[\"default\"](source, cid => {\n        return async () => {\n          cid = utils.cleanCid(cid);\n          const result = {\n            cid\n          };\n\n          try {\n            const has = await repo.blocks.has(cid);\n\n            if (!has) {\n              throw errCode__default[\"default\"](new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n            }\n\n            await repo.blocks.delete(cid);\n          } catch (err) {\n            if (!options.force) {\n              err.message = `cannot remove ${cid}: ${err.message}`;\n              result.error = err;\n            }\n          }\n\n          return result;\n        };\n      }), source => parallel__default[\"default\"](source, {\n        concurrency: BLOCK_RM_CONCURRENCY\n      }), source => filter__default[\"default\"](source, () => !options.quiet));\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption.withTimeoutOption(rm);\n}\n\nexports.createRm = createRm;","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/ipfs-core/cjs/src/components/block/rm.js"],"names":["Object","defineProperty","exports","value","errCode","require","parallel","map","filter","itPipe","utils","withTimeoutOption","_interopDefaultLegacy","e","errCode__default","parallel__default","map__default","filter__default","BLOCK_RM_CONCURRENCY","createRm","repo","rm","cids","options","Array","isArray","release","gcLock","writeLock","pipe","source","cid","cleanCid","result","has","blocks","Error","delete","err","force","message","error","concurrency","quiet"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIE,GAAG,GAAGF,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAApB;;AACA,IAAII,MAAM,GAAGJ,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,YAAD,CAAnB;;AACA,IAAIM,iBAAiB,GAAGN,OAAO,CAAC,qCAAD,CAA/B;;AAEA,SAASO,qBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAOA,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAlB,IAA8B,aAAaA,CAA3C,GAA+CA,CAA/C,GAAmD;AAAE,eAAWA;AAAb,GAA1D;AAA6E;;AAElH,IAAIC,gBAAgB,GAAG,aAAaF,qBAAqB,CAACR,OAAD,CAAzD;;AACA,IAAIW,iBAAiB,GAAG,aAAaH,qBAAqB,CAACN,QAAD,CAA1D;;AACA,IAAIU,YAAY,GAAG,aAAaJ,qBAAqB,CAACL,GAAD,CAArD;;AACA,IAAIU,eAAe,GAAG,aAAaL,qBAAqB,CAACJ,MAAD,CAAxD;;AAEA,MAAMU,oBAAoB,GAAG,CAA7B;;AACA,SAASC,QAAT,OAA0B;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;;AACxB,kBAAgBC,EAAhB,CAAmBC,IAAnB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACrC,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0B;AACxBA,MAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AACD,UAAMI,OAAO,GAAG,MAAMN,IAAI,CAACO,MAAL,CAAYC,SAAZ,EAAtB;;AACA,QAAI;AACF,aAAOnB,MAAM,CAACoB,IAAP,CAAYP,IAAZ,EAAkBQ,MAAM,IAAId,YAAY,CAAC,SAAD,CAAZ,CAAwBc,MAAxB,EAAgCC,GAAG,IAAI;AACxE,eAAO,YAAY;AACjBA,UAAAA,GAAG,GAAGrB,KAAK,CAACsB,QAAN,CAAeD,GAAf,CAAN;AACA,gBAAME,MAAM,GAAG;AAAEF,YAAAA;AAAF,WAAf;;AACA,cAAI;AACF,kBAAMG,GAAG,GAAG,MAAMd,IAAI,CAACe,MAAL,CAAYD,GAAZ,CAAgBH,GAAhB,CAAlB;;AACA,gBAAI,CAACG,GAAL,EAAU;AACR,oBAAMpB,gBAAgB,CAAC,SAAD,CAAhB,CAA4B,IAAIsB,KAAJ,CAAU,iBAAV,CAA5B,EAA0D,qBAA1D,CAAN;AACD;;AACD,kBAAMhB,IAAI,CAACe,MAAL,CAAYE,MAAZ,CAAmBN,GAAnB,CAAN;AACD,WAND,CAME,OAAOO,GAAP,EAAY;AACZ,gBAAI,CAACf,OAAO,CAACgB,KAAb,EAAoB;AAClBD,cAAAA,GAAG,CAACE,OAAJ,GAAe,iBAAiBT,GAAK,KAAKO,GAAG,CAACE,OAAS,EAAvD;AACAP,cAAAA,MAAM,CAACQ,KAAP,GAAeH,GAAf;AACD;AACF;;AACD,iBAAOL,MAAP;AACD,SAhBD;AAiBD,OAlBkC,CAA5B,EAkBHH,MAAM,IAAIf,iBAAiB,CAAC,SAAD,CAAjB,CAA6Be,MAA7B,EAAqC;AAAEY,QAAAA,WAAW,EAAExB;AAAf,OAArC,CAlBP,EAkBoFY,MAAM,IAAIb,eAAe,CAAC,SAAD,CAAf,CAA2Ba,MAA3B,EAAmC,MAAM,CAACP,OAAO,CAACoB,KAAlD,CAlB9F,CAAP;AAmBD,KApBD,SAoBU;AACRjB,MAAAA,OAAO;AACR;AACF;;AACD,SAAOf,iBAAiB,CAACA,iBAAlB,CAAoCU,EAApC,CAAP;AACD;;AAEDnB,OAAO,CAACiB,QAAR,GAAmBA,QAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar errCode = require('err-code');\nvar parallel = require('it-parallel');\nvar map = require('it-map');\nvar filter = require('it-filter');\nvar itPipe = require('it-pipe');\nvar utils = require('./utils.js');\nvar withTimeoutOption = require('ipfs-core-utils/with-timeout-option');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar errCode__default = /*#__PURE__*/_interopDefaultLegacy(errCode);\nvar parallel__default = /*#__PURE__*/_interopDefaultLegacy(parallel);\nvar map__default = /*#__PURE__*/_interopDefaultLegacy(map);\nvar filter__default = /*#__PURE__*/_interopDefaultLegacy(filter);\n\nconst BLOCK_RM_CONCURRENCY = 8;\nfunction createRm({repo}) {\n  async function* rm(cids, options = {}) {\n    if (!Array.isArray(cids)) {\n      cids = [cids];\n    }\n    const release = await repo.gcLock.writeLock();\n    try {\n      yield* itPipe.pipe(cids, source => map__default[\"default\"](source, cid => {\n        return async () => {\n          cid = utils.cleanCid(cid);\n          const result = { cid };\n          try {\n            const has = await repo.blocks.has(cid);\n            if (!has) {\n              throw errCode__default[\"default\"](new Error('block not found'), 'ERR_BLOCK_NOT_FOUND');\n            }\n            await repo.blocks.delete(cid);\n          } catch (err) {\n            if (!options.force) {\n              err.message = `cannot remove ${ cid }: ${ err.message }`;\n              result.error = err;\n            }\n          }\n          return result;\n        };\n      }), source => parallel__default[\"default\"](source, { concurrency: BLOCK_RM_CONCURRENCY }), source => filter__default[\"default\"](source, () => !options.quiet));\n    } finally {\n      release();\n    }\n  }\n  return withTimeoutOption.withTimeoutOption(rm);\n}\n\nexports.createRm = createRm;\n"]},"metadata":{},"sourceType":"script"}