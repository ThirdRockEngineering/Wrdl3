{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst debug = require('debug');\n\nconst log = debug('libp2p:webrtc-star:listener');\nlog.error = debug('libp2p:webrtc-star:listener:error');\n\nconst errCode = require('err-code');\n\nconst io = require('socket.io-client');\n\nconst SimplePeer = require('libp2p-webrtc-peer');\n\nconst pDefer = require('p-defer');\n\nconst toConnection = require('./socket-to-conn');\n\nconst {\n  cleanUrlSIO\n} = require('./utils');\n\nconst {\n  CODE_P2P\n} = require('./constants');\n\nconst sioOptions = {\n  transports: ['websocket'],\n  'force new connection': true,\n  path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed\n\n};\n\nmodule.exports = function (_ref, WebRTCStar) {\n  let {\n    handler,\n    upgrader\n  } = _ref;\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const listener = new EventEmitter();\n  let listeningAddr;\n  let signallingUrl;\n  listener.__connections = [];\n  listener.__spChannels = new Map();\n  listener.__pendingIntents = new Map();\n\n  listener.listen = ma => {\n    // Should only be used if not already listening\n    if (listeningAddr) {\n      throw errCode(new Error('listener already in use'), 'ERR_ALREADY_LISTENING');\n    }\n\n    const defer = pDefer(); // Should be kept unmodified\n\n    listeningAddr = ma;\n    let signallingAddr;\n\n    if (!ma.protoCodes().includes(CODE_P2P) && upgrader.localPeer) {\n      signallingAddr = ma.encapsulate(`/p2p/${upgrader.localPeer.toB58String()}`);\n    } else {\n      signallingAddr = ma;\n    }\n\n    listener.on('error', () => defer.reject());\n    signallingUrl = cleanUrlSIO(ma);\n    log('Dialing to Signalling Server on: ' + signallingUrl);\n    listener.io = io.connect(signallingUrl, sioOptions);\n\n    const incomingDial = offer => {\n      if (offer.answer || offer.err || !offer.intentId) {\n        return;\n      }\n\n      const intentId = offer.intentId;\n\n      let pendings = listener.__pendingIntents.get(intentId);\n\n      if (!pendings) {\n        pendings = [];\n\n        listener.__pendingIntents.set(intentId, pendings);\n      }\n\n      let channel = listener.__spChannels.get(intentId);\n\n      if (channel) {\n        channel.signal(offer.signal);\n        return;\n      } else if (offer.signal.type !== 'offer') {\n        pendings.push(offer);\n        return;\n      }\n\n      const spOptions = {\n        trickle: false,\n        ...options\n      }; // Use custom WebRTC implementation\n\n      if (WebRTCStar.wrtc) {\n        spOptions.wrtc = WebRTCStar.wrtc;\n      }\n\n      channel = new SimplePeer(spOptions);\n\n      const onError = err => {\n        log.error('incoming connection errored', err);\n      };\n\n      channel.on('error', onError);\n      channel.once('close', function () {\n        channel.removeListener('error', onError);\n      });\n      channel.on('signal', signal => {\n        offer.signal = signal;\n        offer.answer = true;\n        listener.io.emit('ss-handshake', offer);\n      });\n      channel.signal(offer.signal);\n\n      for (const pendingOffer of pendings) {\n        channel.signal(pendingOffer.signal);\n      }\n\n      listener.__pendingIntents.set(intentId, []);\n\n      channel.once('connect', async () => {\n        const maConn = toConnection(channel);\n        log('new inbound connection %s', maConn.remoteAddr);\n        let conn;\n\n        try {\n          conn = await upgrader.upgradeInbound(maConn);\n        } catch (err) {\n          log.error('inbound connection failed to upgrade', err);\n          return maConn.close();\n        }\n\n        if (!conn.remoteAddr) {\n          try {\n            conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toB58String()}`);\n          } catch (err) {\n            log.error('could not determine remote address', err);\n          }\n        }\n\n        log('inbound connection %s upgraded', maConn.remoteAddr);\n        trackConn(listener, maConn, intentId);\n        listener.emit('connection', conn);\n        handler(conn);\n      });\n\n      listener.__spChannels.set(intentId, channel);\n    };\n\n    listener.io.once('connect_error', err => defer.reject(err));\n    listener.io.once('error', err => {\n      listener.emit('error', err);\n      listener.emit('close');\n    });\n    listener.io.on('ws-handshake', incomingDial);\n    listener.io.on('ws-peer', WebRTCStar._peerDiscovered);\n    listener.io.on('connect', () => {\n      listener.io.emit('ss-join', signallingAddr.toString());\n    });\n    listener.io.once('connect', () => {\n      listener.emit('listening');\n      defer.resolve();\n    }); // Store listen and signal reference addresses\n\n    WebRTCStar.sigReferences.set(signallingUrl, {\n      listener,\n      signallingAddr\n    });\n    return defer.promise;\n  };\n\n  listener.close = async () => {\n    // Close listener\n    const ref = WebRTCStar.sigReferences.get(signallingUrl);\n\n    if (ref && ref.listener.io) {\n      ref.listener.io.emit('ss-leave');\n      ref.listener.io.close();\n    }\n\n    await Promise.all(listener.__connections.map(maConn => maConn.close()));\n    listener.emit('close');\n    listener.removeAllListeners(); // Reset state\n\n    listeningAddr = undefined;\n    WebRTCStar.sigReferences.delete(signallingUrl);\n  };\n\n  listener.getAddrs = () => {\n    return [listeningAddr];\n  };\n\n  return listener;\n};\n\nfunction trackConn(listener, maConn, intentId) {\n  listener.__connections.push(maConn);\n\n  const untrackConn = () => {\n    listener.__connections = listener.__connections.filter(c => c !== maConn);\n\n    listener.__spChannels.delete(intentId);\n\n    listener.__pendingIntents.delete(intentId);\n  };\n\n  maConn.conn.once('close', untrackConn);\n}","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-webrtc-star/src/listener.js"],"names":["EventEmitter","require","debug","log","error","errCode","io","SimplePeer","pDefer","toConnection","cleanUrlSIO","CODE_P2P","sioOptions","transports","path","module","exports","WebRTCStar","handler","upgrader","options","listener","listeningAddr","signallingUrl","__connections","__spChannels","Map","__pendingIntents","listen","ma","Error","defer","signallingAddr","protoCodes","includes","localPeer","encapsulate","toB58String","on","reject","connect","incomingDial","offer","answer","err","intentId","pendings","get","set","channel","signal","type","push","spOptions","trickle","wrtc","onError","once","removeListener","emit","pendingOffer","maConn","remoteAddr","conn","upgradeInbound","close","decapsulateCode","remotePeer","trackConn","_peerDiscovered","toString","resolve","sigReferences","promise","ref","Promise","all","map","removeAllListeners","undefined","delete","getAddrs","untrackConn","filter","c"],"mappings":"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","sourcesContent":["'use strict'\n\nconst EventEmitter = require('events')\nconst debug = require('debug')\nconst log = debug('libp2p:webrtc-star:listener')\nlog.error = debug('libp2p:webrtc-star:listener:error')\n\nconst errCode = require('err-code')\nconst io = require('socket.io-client')\nconst SimplePeer = require('libp2p-webrtc-peer')\nconst pDefer = require('p-defer')\n\nconst toConnection = require('./socket-to-conn')\nconst { cleanUrlSIO } = require('./utils')\nconst { CODE_P2P } = require('./constants')\n\nconst sioOptions = {\n  transports: ['websocket'],\n  'force new connection': true,\n  path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed\n}\n\nmodule.exports = ({ handler, upgrader }, WebRTCStar, options = {}) => {\n  const listener = new EventEmitter()\n  let listeningAddr\n  let signallingUrl\n\n  listener.__connections = []\n  listener.__spChannels = new Map()\n  listener.__pendingIntents = new Map()\n  listener.listen = (ma) => {\n    // Should only be used if not already listening\n    if (listeningAddr) {\n      throw errCode(new Error('listener already in use'), 'ERR_ALREADY_LISTENING')\n    }\n\n    const defer = pDefer()\n\n    // Should be kept unmodified\n    listeningAddr = ma\n\n    let signallingAddr\n    if (!ma.protoCodes().includes(CODE_P2P) && upgrader.localPeer) {\n      signallingAddr = ma.encapsulate(`/p2p/${upgrader.localPeer.toB58String()}`)\n    } else {\n      signallingAddr = ma\n    }\n\n    listener.on('error', () => defer.reject())\n\n    signallingUrl = cleanUrlSIO(ma)\n\n    log('Dialing to Signalling Server on: ' + signallingUrl)\n    listener.io = io.connect(signallingUrl, sioOptions)\n\n    const incomingDial = (offer) => {\n      if (offer.answer || offer.err || !offer.intentId) {\n        return\n      }\n\n      const intentId = offer.intentId\n      let pendings = listener.__pendingIntents.get(intentId)\n      if (!pendings) {\n        pendings = []\n        listener.__pendingIntents.set(intentId, pendings)\n      }\n\n      let channel = listener.__spChannels.get(intentId)\n      if (channel) {\n        channel.signal(offer.signal)\n        return\n      } else if (offer.signal.type !== 'offer') {\n        pendings.push(offer)\n        return\n      }\n\n      const spOptions = {\n        trickle: false,\n        ...options\n      }\n\n      // Use custom WebRTC implementation\n      if (WebRTCStar.wrtc) { spOptions.wrtc = WebRTCStar.wrtc }\n\n      channel = new SimplePeer(spOptions)\n\n      const onError = (err) => {\n        log.error('incoming connection errored', err)\n      }\n\n      channel.on('error', onError)\n      channel.once('close', (...args) => {\n        channel.removeListener('error', onError)\n      })\n\n      channel.on('signal', (signal) => {\n        offer.signal = signal\n        offer.answer = true\n        listener.io.emit('ss-handshake', offer)\n      })\n\n      channel.signal(offer.signal)\n      for (const pendingOffer of pendings) {\n        channel.signal(pendingOffer.signal)\n      }\n      listener.__pendingIntents.set(intentId, [])\n\n      channel.once('connect', async () => {\n        const maConn = toConnection(channel)\n        log('new inbound connection %s', maConn.remoteAddr)\n\n        let conn\n        try {\n          conn = await upgrader.upgradeInbound(maConn)\n        } catch (err) {\n          log.error('inbound connection failed to upgrade', err)\n          return maConn.close()\n        }\n\n        if (!conn.remoteAddr) {\n          try {\n            conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toB58String()}`)\n          } catch (err) {\n            log.error('could not determine remote address', err)\n          }\n        }\n\n        log('inbound connection %s upgraded', maConn.remoteAddr)\n\n        trackConn(listener, maConn, intentId)\n\n        listener.emit('connection', conn)\n        handler(conn)\n      })\n      listener.__spChannels.set(intentId, channel)\n    }\n\n    listener.io.once('connect_error', (err) => defer.reject(err))\n    listener.io.once('error', (err) => {\n      listener.emit('error', err)\n      listener.emit('close')\n    })\n\n    listener.io.on('ws-handshake', incomingDial)\n    listener.io.on('ws-peer', WebRTCStar._peerDiscovered)\n\n    listener.io.on('connect', () => {\n      listener.io.emit('ss-join', signallingAddr.toString())\n    })\n\n    listener.io.once('connect', () => {\n      listener.emit('listening')\n      defer.resolve()\n    })\n\n    // Store listen and signal reference addresses\n    WebRTCStar.sigReferences.set(signallingUrl, {\n      listener,\n      signallingAddr\n    })\n\n    return defer.promise\n  }\n\n  listener.close = async () => {\n    // Close listener\n    const ref = WebRTCStar.sigReferences.get(signallingUrl)\n    if (ref && ref.listener.io) {\n      ref.listener.io.emit('ss-leave')\n      ref.listener.io.close()\n    }\n\n    await Promise.all(listener.__connections.map(maConn => maConn.close()))\n    listener.emit('close')\n    listener.removeAllListeners()\n\n    // Reset state\n    listeningAddr = undefined\n    WebRTCStar.sigReferences.delete(signallingUrl)\n  }\n\n  listener.getAddrs = () => {\n    return [listeningAddr]\n  }\n\n  return listener\n}\n\nfunction trackConn (listener, maConn, intentId) {\n  listener.__connections.push(maConn)\n\n  const untrackConn = () => {\n    listener.__connections = listener.__connections.filter(c => c !== maConn)\n    listener.__spChannels.delete(intentId)\n    listener.__pendingIntents.delete(intentId)\n  }\n\n  maConn.conn.once('close', untrackConn)\n}\n"]},"metadata":{},"sourceType":"script"}