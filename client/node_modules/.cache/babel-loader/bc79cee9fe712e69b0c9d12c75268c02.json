{"ast":null,"code":"'use strict';\n\nconst {\n  KadDHT\n} = require('./kad-dht');\n\nconst {\n  DualKadDHT\n} = require('./dual-kad-dht');\n/**\n * @typedef {import('./types').DHT} DHT\n * @typedef {import('./kad-dht').KadDHTOps} KadDHTOps\n * @typedef {import('./types').QueryEvent} QueryEvent\n * @typedef {import('./types').SendingQueryEvent} SendingQueryEvent\n * @typedef {import('./types').PeerResponseEvent} PeerResponseEvent\n * @typedef {import('./types').FinalPeerEvent} FinalPeerEvent\n * @typedef {import('./types').QueryErrorEvent} QueryErrorEvent\n * @typedef {import('./types').ProviderEvent} ProviderEvent\n * @typedef {import('./types').ValueEvent} ValueEvent\n * @typedef {import('./types').AddingPeerEvent} AddingPeerEvent\n * @typedef {import('./types').DialingPeerEvent} DialingPeerEvent\n */\n\n\nmodule.exports = {\n  /**\n   * @param {KadDHTOps} opts\n   * @returns {DHT}\n   */\n  create: opts => {\n    return new DualKadDHT(new KadDHT({ ...opts,\n      protocol: '/ipfs/kad/1.0.0',\n      lan: false\n    }), new KadDHT({ ...opts,\n      protocol: '/ipfs/lan/kad/1.0.0',\n      clientMode: false,\n      lan: true\n    }), opts.libp2p);\n  }\n};","map":{"version":3,"sources":["/Users/emilsharafutdinov/Desktop/Work/SR3/Wrdl3/client/node_modules/libp2p-kad-dht/src/index.js"],"names":["KadDHT","require","DualKadDHT","module","exports","create","opts","protocol","lan","clientMode","libp2p"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,WAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAiBD,OAAO,CAAC,gBAAD,CAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,MAAM,CAACC,OAAP,GAAiB;AACf;AACF;AACA;AACA;AACEC,EAAAA,MAAM,EAAGC,IAAD,IAAU;AAChB,WAAO,IAAIJ,UAAJ,CACL,IAAIF,MAAJ,CAAW,EACT,GAAGM,IADM;AAETC,MAAAA,QAAQ,EAAE,iBAFD;AAGTC,MAAAA,GAAG,EAAE;AAHI,KAAX,CADK,EAML,IAAIR,MAAJ,CAAW,EACT,GAAGM,IADM;AAETC,MAAAA,QAAQ,EAAE,qBAFD;AAGTE,MAAAA,UAAU,EAAE,KAHH;AAITD,MAAAA,GAAG,EAAE;AAJI,KAAX,CANK,EAYLF,IAAI,CAACI,MAZA,CAAP;AAcD;AApBc,CAAjB","sourcesContent":["'use strict'\n\nconst { KadDHT } = require('./kad-dht')\nconst { DualKadDHT } = require('./dual-kad-dht')\n\n/**\n * @typedef {import('./types').DHT} DHT\n * @typedef {import('./kad-dht').KadDHTOps} KadDHTOps\n * @typedef {import('./types').QueryEvent} QueryEvent\n * @typedef {import('./types').SendingQueryEvent} SendingQueryEvent\n * @typedef {import('./types').PeerResponseEvent} PeerResponseEvent\n * @typedef {import('./types').FinalPeerEvent} FinalPeerEvent\n * @typedef {import('./types').QueryErrorEvent} QueryErrorEvent\n * @typedef {import('./types').ProviderEvent} ProviderEvent\n * @typedef {import('./types').ValueEvent} ValueEvent\n * @typedef {import('./types').AddingPeerEvent} AddingPeerEvent\n * @typedef {import('./types').DialingPeerEvent} DialingPeerEvent\n */\n\nmodule.exports = {\n  /**\n   * @param {KadDHTOps} opts\n   * @returns {DHT}\n   */\n  create: (opts) => {\n    return new DualKadDHT(\n      new KadDHT({\n        ...opts,\n        protocol: '/ipfs/kad/1.0.0',\n        lan: false\n      }),\n      new KadDHT({\n        ...opts,\n        protocol: '/ipfs/lan/kad/1.0.0',\n        clientMode: false,\n        lan: true\n      }),\n      opts.libp2p\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script"}